#! /bin/sh

# Launch FindBugs from the command line.

Usage() {
	echo "Usage: findbugs [options]"
	echo "   -gui            Use the Graphical UI (default behavior)"
	echo "   -textui         Use the Text UI"
	echo "   -jvmArgs args   Pass args to JVM"
	echo "   -help           Display this message"
	echo "All other options are passed to the FindBugs application"
	exit 0;
}

# Find findbugs_home.
# This code shamelessly stolen from Ant's "bin/ant" script.

## resolve links - $0 may be a link to ant's home
PRG="$0"
progname=`basename "$0"`
saveddir=`pwd`

# need this for relative symlinks
dirname_prg=`dirname "$PRG"`
cd "$dirname_prg"
  
while [ -h "$PRG" ] ; do
	ls=`ls -ld "$PRG"`
	link=`expr "$ls" : '.*-> \(.*\)$'`
	if expr "$link" : '/.*' > /dev/null; then
		PRG="$link"
	else
		PRG=`dirname "$PRG"`"/$link"
	fi
done
  
findbugs_home=`dirname "$PRG"`/..

cd "$saveddir"

# make it fully qualified
findbugs_home=`cd "$findbugs_home" && pwd`

# End of code shamelessly stolen from Ant.

if [ ! -d "$findbugs_home" ]; then
	echo "The path $findbugs_home,"
	echo "which is where I think FindBugs is located,"
	echo "does not seem to be a directory."
	exit 1
fi
#echo "findbugs_home=$findbugs_home"

# Process command line arguments.
# All options that aren't consumed by this script are sent
# to the FindBugs main() method.
argList=''
jvmArgs="-Xmx128m"
appJar="findbugsGUI.jar"
while [ $# -gt 0 ]; do
	arg=$1
	shift

	case $arg in
	-gui)
		appJar="findbugsGUI.jar"
		;;

	-textui)
		appJar="findbugs.jar"
		;;

	-jvmArgs)
		jvmArgs=$1
		shift
		#echo "jvmArgs='$jvmArgs'"
		;;

	-help)
		Usage
		;;

	*)
		argList="$argList $arg"
		;;
	esac
done

# Handle cygwin, courtesy of Peter D. Stout
os=`uname`
if [ `expr "$os" : CYGWIN` -ne 0 ]; then
    findbugs_home=`cygpath --mixed "$findbugs_home"`
fi

# Launch FindBugs!
java $jvmArgs "-Dfindbugs.home=$findbugs_home" -jar "$findbugs_home/lib/$appJar" $argList

# vim:ts=4
