<!--
	FindBugs Ant build script.
	Based on original FindBugs Ant Script by Mike Fagan.
	Rewritten 1/5/2005 by David Hovemeyer.
-->

<project name="findbugs" default="build">

	<!-- 
	        The local.properties properties file contains the location of eclipsePlugin.dir 

	        This value is likely to be different for each checkout of the plugin,
	        so the local.properties file is not managed by cvs
	        
	-->
	<property file="local.properties" />

	<property file="build.properties" />
	
	<property name="jar.dir" value="lib"/>
	<property name="plugin.dir" value="plugin"/>
	<property name="build.dir" value="build"/>
	<property name="classes.dir" value="build/classes"/>
	<property name="scripts.dir" value="bin"/>
	<property name="src.dir" value="src/java"/>
	<property name="src5.dir" value="src/java5"/>
	<property name="toolsrc.dir" value="src/tools"/>
	<property name="scriptsrc.dir" value="src/scripts"/>
	<property name="xslsrc.dir" value="src/xsl"/>
	<property name="junitsrc.dir" value="src/junit"/>
	<property name="anttasksrc.dir" value="src/antTask"/>
	<property name="docsrc.dir" value="src/doc"/>
	<property name="etc.dir" value="etc"/>
	<property name="test.dir" value="test"/>
	<property name="doc.dir" value="doc"/>
	<property name="web.dir" value="web"/>
	<property name="apiDoc.dir" value="apiJavaDoc"/>
	<property name="annotationDoc.dir" value="annotationJavaDoc"/>
	<property name="jnlp.dir" value="jnlp"/>
	<property name="pkg.base" value="edu/umd/cs/findbugs"/>
	<property name="engine.jar" value="${jar.dir}/findbugs.jar"/>
	<property name="oneFourCompatibility.jar" value="${jar.dir}/oneFourCompatibility.jar"/>
	<property name="annotations.jar" value="${jar.dir}/annotations.jar"/>
	<property name="coreplugin.jar" value="${plugin.dir}/coreplugin.jar"/>
	<property name="gui.jar" value="${jar.dir}/findbugsGUI.jar"/>
	<property name="test.jar" value="${test.dir}/dumb.jar"/>
	<property name="sampleoutput.dir" value="build/sampleoutput"/>
	<property name="junittests.jar" value="build/junittests.jar"/>
	<property name="anttask.jar" value="${jar.dir}/findbugs-ant.jar"/>
	<property name="scripts.props" value="etc/script.properties"/>
	<property name="scripts.stamp" value="${build.dir}/scripts.stamp"/>
	<property name="doc.props.file" value="${etc.dir}/doc.properties"/>
	<property name="version.props.file" value="${build.dir}/version.properties"/>
	
	<path id="findbugs.classpath">
	    <pathelement location="${jar.dir}/bcel.jar"/>
	    <pathelement location="${jar.dir}/dom4j-full.jar"/>
	    <pathelement location="${jar.dir}/AppleJavaExtensions.jar"/>
	    <pathelement location="${jar.dir}/junit.jar"/>
		<pathelement location="${jar.dir}/asm-3.0.jar"/>
		<pathelement location="${jar.dir}/asm-tree-3.0.jar"/>
	</path>
	
	<path id="tools.classpath">
		<pathelement location="${classes.dir}"/>
		<path refid="findbugs.classpath"/>
	</path>
	
	<patternset id="codebase.data.pats">
		<include name="**/*.properties"/>
		<include name="**/*.png"/>
		<include name="**/*.html"/>
		<include name="**/*.db"/>
	</patternset>
	
	<patternset id="doc.src.pats">
		<include name="**/*.html"/>
		<include name="**/*.xml"/>
		<include name="**/*.xsl"/>
		<include name="**/*.pdf"/>
	</patternset>
	
	<patternset id="doc.img.pats">
		<include name="**/*.png"/>
		<include name="**/*.css"/>
		<include name="**/*.txt"/>
	</patternset>

	<!-- Default target builds scripts and jars, allowing execution using
		the working directory as FINDBUGS_HOME.  Also build test case jarfile. -->
	<target name="build" depends="jars,scripts,anttask"/>
	
	<!-- Rebuild from scratch. -->
	<target name="rebuild" depends="clean,build"/>

	<!-- Compile Java source files, and copy other files (properties,
		images, html, XSL stylesheets) that need to be part of the codebase. -->
	<target name="classes">
		<mkdir dir="${classes.dir}"/>
		<!-- Compile Java source files. -->
		<echo level="info" message="compiling Priorities"/>
		<javac srcdir="${src.dir}"
						includes="${pkg.base}/Priorities.java"
						destdir="${classes.dir}"
						source="1.5"
						target="jsr14"
						deprecation="on"
						debug="on">
					<classpath refid="findbugs.classpath"/>
				</javac>
		<echo level="info" message="compiling annotations"/>
		<javac srcdir="${src5.dir}"
						includes="${pkg.base}/annotations/** net/jcip/annotations/**"
						destdir="${classes.dir}"
						source="1.5"
						target="1.5"
						deprecation="on"
						debug="on">
					<classpath refid="findbugs.classpath"/>
				</javac>
		<echo level="info" message="compiling findbugs"/>
		<javac srcdir="${src.dir}"
				destdir="${classes.dir}"
				source="1.5"
				target="jsr14"
				deprecation="off"
				debug="on">
			<classpath refid="findbugs.classpath"/>
		</javac>
		<echo level="info" message="compiling gui2"/>
		<javac srcdir="${src5.dir}"
						includes="${pkg.base}/gui2/** ${pkg.base}/sourceviewer/**"
						destdir="${classes.dir}"
						source="1.5"
						target="1.5"
						deprecation="on"
						debug="on">
					<classpath refid="findbugs.classpath"/>
				</javac>
		<!-- Copy codebase data files. -->
		<echo level="info" message="copying data files"/>
		<copy todir="${classes.dir}">
			<fileset dir="${src.dir}">
				<patternset refid="codebase.data.pats"/>
			</fileset>
			<fileset dir="${src5.dir}">
				<patternset refid="codebase.data.pats"/>
			</fileset>
			<fileset dir="${xslsrc.dir}">
				<include name="*.xsl"/>
			</fileset>
		</copy>
		<!-- Compile JUnit test cases. -->
		<javac srcdir="${junitsrc.dir}"
				destdir="${classes.dir}"
				source="1.5"
				target="1.5"
				deprecation="on"
				debug="on">
			<classpath refid="tools.classpath"/>
		</javac>
		<!-- Compile tools. -->
		<javac srcdir="${toolsrc.dir}"
				destdir="${classes.dir}"
				source="1.5"
				target="jsr14"
				debug="on"
				deprecation="on"
				excludes="${pkg.base}/tools/patcomp/**">
			<classpath refid="tools.classpath"/>
		</javac>
		<!-- Compile Ant task. -->
		<javac srcdir="${anttasksrc.dir}"
			destdir="${classes.dir}"
			source="1.5"
			target="jsr14"
			deprecation="on"
			debug="on">
			<classpath refid="tools.classpath"/>
		</javac>
	</target>

	<!-- Validate findbugs.xml and messagesXXX.xml files. -->
	<target name="validate">
		<xmlvalidate lenient="false" failonerror="yes">
			<attribute name="http://apache.org/xml/features/validation/schema" value="true"/>
			<attribute name="http://xml.org/sax/features/namespaces" value="true"/>
			<fileset dir="${etc.dir}" includes="*.xml"/>
		</xmlvalidate>
	</target>
	
	<target name="validatesamplexmloutput" depends="runanttask">
		<schemavalidate failonerror="yes" noNamespaceFile="${etc.dir}/bugcollection.xsd">
			<attribute name="http://xml.org/sax/features/namespaces" value="true"/>
			<fileset dir="${sampleoutput.dir}" includes="*.xml"/>
		</schemavalidate>
	</target>
	<target name="validatesamplehtmloutput" depends="applystylesheets">

		<xmlvalidate failonerror="no">
			<attribute name="http://apache.org/xml/features/validation/schema" value="true"/>
			<attribute name="http://xml.org/sax/features/namespaces" value="true"/>
			<fileset dir="${sampleoutput.dir}" includes="*.html"/>
		</xmlvalidate>
	</target>
	<target name="validatesampleoutput" depends="validatesamplexmloutput,validatesamplehtmloutput"/>
	
	<!-- Build jar files. -->
	<target name="PrepareOneFourCompatibilityTest" depends="anttask,classes,jars">
		<!-- Main engine and command line jar file. -->
		<jar destfile="${oneFourCompatibility.jar}" >
			<!-- Compiled classes, properties files. -->
			<fileset dir="${classes.dir}">
				<exclude name="${pkg.base}/gui2/**"/>
				<exclude name="${pkg.base}/sourceViewer/**"/>
				<exclude name="${pkg.base}/annotations/**"/>
				<exclude name="net/jcip/annotations/**"/>
				<exclude name="${pkg.base}/Footprint?*.class"/>
				<exclude name="**/*Test.class"/> <!-- Exclude JUnit tests. -->
				<include name="**/*.class"/>
			</fileset>
		</jar>
   </target>
	<target name="CheckOneFourCompatibility">
   <property name="findbugs.home" value="." />
    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${anttask.jar}"/>
    <findbugs home="."
              output="text"
		quietErrors="true"
		      failOnError="true"
		      warningsProperty="warningsFound"
			  visitors="ResolveAllReferences"
			  jvmargs="-Xmx600m" >
		<class location="${oneFourCompatibility.jar}" />
		</findbugs>
	<fail if="warningsFound" message="Not compatible with Java 1.4"/>
	</target>
		
	<!-- Build jar files. -->
	<target name="jars" depends="classes, validate">
		<!-- Main engine and command line jar file. -->
		<jar destfile="${engine.jar}"
				manifest="etc/MANIFEST-findbugs.MF">
			<!-- Compiled classes, properties files. -->
			<fileset dir="${classes.dir}">
				<exclude name="${pkg.base}/tools/**"/>
				<exclude name="${pkg.base}/gui/**"/>
				<exclude name="${pkg.base}/gui2/**"/>
				<exclude name="${pkg.base}/sourceViewer/**"/>
				<exclude name="${pkg.base}/detect/**"/>
				<exclude name="${pkg.base}/tools/**"/>
				<exclude name="${pkg.base}/antTask/**"/>
				<exclude name="**/*Test.class"/> <!-- Exclude JUnit tests. -->
				<include name="**/*.class"/>
				<include name="**/*.properties"/>
				<include name="**/*.db"/>
				<include name="**/*.xsl"/>
			</fileset>
		</jar>
		
		<!-- Core detector plugin. -->
		<jar destfile="${plugin.dir}/coreplugin.jar">
			<fileset dir="etc">
				<include name="findbugs.xml"/>
				<include name="messages*.xml"/>
			</fileset>
			<fileset dir="${classes.dir}">
				<include name="${pkg.base}/detect/*.class"/>
			</fileset>
		</jar>
		
		<!-- Swing GUI jar file. -->
		<jar destfile="${gui.jar}"
				manifest="etc/MANIFEST-findbugsGUI.MF">
			<fileset dir="${classes.dir}">
				<include name="${pkg.base}/sourceViewer/**/*.class"/>
				<include name="${pkg.base}/gui/**/*.class"/>
				<include name="${pkg.base}/gui/**/*.properties"/>
				<include name="${pkg.base}/gui/**/*.png"/>
				<include name="${pkg.base}/gui/**/*.html"/>
				<include name="${pkg.base}/gui2/**/*.class"/>
				<include name="${pkg.base}/gui2/**/*.properties"/>
				<include name="${pkg.base}/gui2/**/*.png"/>
				<include name="${pkg.base}/gui2/**/*.html"/>
			</fileset>
		</jar>

		<!-- Annotations jar file. -->
		<jar destfile="${annotations.jar}">
			<fileset dir="${classes.dir}">
				<include name="**/annotations/*.class"/>
			</fileset>
			<fileset dir="${src.dir}">
				<include name="**/annotations/*.java"/>
			</fileset>
		</jar>
	</target>
	
	<!-- See if front-end scripts need to be regenerated. -->
	<target name="checkscripts">
		<condition property="scripts.uptodate">
			<and>
				<!-- Generated scripts must be newer than src scripts -->
				<uptodate targetfile="${scripts.stamp}">
					<srcfiles dir="${scriptsrc.dir}/standard" includes="*"  excludes="CVS"/>
				</uptodate>
				<!-- And, generated scripts must be newer than etc/script.properties -->
				<uptodate targetfile="${scripts.stamp}">
					<srcfiles file="${scripts.props}"/>
				</uptodate>
			</and>
		</condition>
	</target>
	
	<!-- Generate front-end scripts. -->
	<target name="scripts" depends="checkscripts" 
				unless="scripts.uptodate"
				>
		<loadproperties srcFile="${scripts.props}"/>

		<filterset id="script.filters">
			<filter token="GET_FBHOME" value="${script.get.fbhome}" />
			<filter token="SET_DEFAULT_JAVA" value="${script.set.default.java}"/>
			<filter token="WRAP_JAVA" value="${script.wrap.java}"/>
			<filter token="WRAP_JAR" value="${script.wrap.jar}"/>
			<filter token="DEFINE_ESCAPE_ARG" value="${script.define.escape_arg}"/>
		</filterset>

		<copy todir="${scripts.dir}" overwrite="true">
					<fileset dir="${scriptsrc.dir}/standard"/>
					<filterset refid="script.filters"/>
				</copy>
		
		<copy todir="${scripts.dir}/deprecated" overwrite="true">
			<fileset dir="${scriptsrc.dir}/deprecated"/>
			<filterset refid="script.filters"/>
		</copy>

		<mkdir dir="${build.dir}"/>

		<!-- Make the Unix scripts executable. -->
		<chmod dir="${scripts.dir}" perm="a+x" includes="**/*" excludes="**/*.bat"/>
		
		<touch file="${scripts.stamp}"/>
	</target>
	
	
	
	<!-- Ant task jar file. -->
	<target name="anttask" depends="classes">
		<jar destfile="${anttask.jar}">
			<fileset dir="${classes.dir}">
				<include name="${pkg.base}/anttask/**"/>
			</fileset>
			<fileset dir="${anttasksrc.dir}">
				<include name="${pkg.base}/anttask/*.properties"/>
			</fileset>
		</jar>
	</target>
	
	<!-- JUnit test cases -->
	<target name="junittests" depends="classes">
		<jar destfile="${junittests.jar}">
			<fileset dir="${classes.dir}">
				<exclude name="${pkg.base}/detect/**"/>
				<include name="**/*Test.class"/>
			</fileset>
		</jar>
	</target>


  <target name="applystylesheets" depends="jars,runanttask">
   <property name="findbugs.home" value="." />
   <java classname="edu.umd.cs.findbugs.PrintingBugReporter"
           fork="true"
           failonerror="true"
		   output="${sampleoutput.dir}/fancy.html" 
           maxmemory="400m">
		<classpath>
           <pathelement location="${jar.dir}/findbugs.jar"/>
		</classpath>
    <jvmarg value="-Dfindbugs.home=${findbugs.home}"/>
	    <arg value="-html:fancy.xsl"/>
	    <arg value="${sampleoutput.dir}/bcel.xml"/>
	</java>
   <java classname="edu.umd.cs.findbugs.PrintingBugReporter"
           fork="true"
           failonerror="true"
		   output="${sampleoutput.dir}/default.html" 
           maxmemory="400m">
		<classpath>
           <pathelement location="${jar.dir}/findbugs.jar"/>
		</classpath>
    <jvmarg value="-Dfindbugs.home=${findbugs.home}"/>
	    <arg value="-html:default.xsl"/>
	    <arg value="${sampleoutput.dir}/bcel.xml"/>
	</java>
   <java classname="edu.umd.cs.findbugs.PrintingBugReporter"
           fork="true"
           failonerror="true"
		   output="${sampleoutput.dir}/plain.html" 
           maxmemory="400m">
		<classpath>
           <pathelement location="${jar.dir}/findbugs.jar"/>
		</classpath>
    <jvmarg value="-Dfindbugs.home=${findbugs.home}"/>
	    <arg value="-html:plain.xsl"/>
	    <arg value="${sampleoutput.dir}/bcel.xml"/>
	</java>
   <java classname="edu.umd.cs.findbugs.PrintingBugReporter"
           fork="true"
           failonerror="true"
		   output="${sampleoutput.dir}/summary.html" 
           maxmemory="400m">
		<classpath>
           <pathelement location="${jar.dir}/findbugs.jar"/>
		</classpath>
    <jvmarg value="-Dfindbugs.home=${findbugs.home}"/>
	    <arg value="-html:summary.xsl"/>
	    <arg value="${sampleoutput.dir}/bcel.xml"/>
	</java>




  </target>
  <target name="runanttask" depends="anttask,jars">
   <property name="findbugs.home" value="." />
    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${anttask.jar}"/>
    <mkdir dir="${sampleoutput.dir}"/>
    <findbugs home="."
              output="xml:withMessages"
			  jvmargs="-Xmx600m"
              outputFile="${sampleoutput.dir}/bcel.xml" >
      <class location="${jar.dir}/bcel.jar" />
    </findbugs>
  </target>


	<!-- Run JUnit test cases -->
	<target name="runjunit" depends="junittests,jars">
		<echo>Running JUnit test cases for FindBugs...</echo>
		<java dir="."
			fork="true"
			failonerror="true"
			classname="edu.umd.cs.findbugs.tools.junit.JUnitJarRunner">
			<jvmarg value="-Dfindbugs.home=."/>
			<classpath refid="tools.classpath"/>
			<arg value="${junittests.jar}"/>
			<arg value="${engine.jar}"/>
		</java>
	</target>

	<target name="smoketest" depends="runjunit,validatesampleoutput"/>


	<!-- Get version properties. -->
	<target name="version" depends="classes">
		<java classpathref="tools.classpath"
			output="${version.props.file}"
			classname="edu.umd.cs.findbugs.Version"
			failonerror="true">
			<arg value="-props"/>
		</java>
		
		<loadproperties srcfile="${version.props.file}"/>
	</target>

	<target name="checkdocs">
		<!-- FIXME: check whether docs are up to date -->
	</target>
	
	<!-- Generate formatted documentation. -->
	<target name="docs" depends="classes,version,bugdesc,checkdocs" unless="docs.uptodate">
		<loadproperties srcFile="${doc.props.file}"/>

		<antcall target="generatedocs">
			<param name="docoutput.dir" value="${doc.dir}"/>
			<param name="googleanalytics.fragment" value=""/>
		</antcall>
		<antcall target="generatemanual">
			<param name="docoutput.dir" value="${doc.dir}"/>
			<param name="googleanalytics.fragment" value=""/>
		</antcall>
	</target>

	<target name="checkweb">
		<!-- FIXME: check whether web docs are up to date -->
	</target>

	<!-- Generate website. -->
	<target name="web" depends="classes,version,bugdesc,checkweb,apiJavadoc">
		<loadproperties srcFile="${doc.props.file}"/>

		<antcall target="generatedocs">
			<param name="docoutput.dir" value="${web.dir}"/>
			<param name="googleanalytics.fragment" value="${doc.html.googleanalytics}"/>
		</antcall>
		<antcall target="generatemanual">
			<param name="docoutput.dir" value="${web.dir}"/>
			<param name="googleanalytics.fragment" value="${doc.html.googleanalytics}"/>
		</antcall>
		<!-- move javadocs from 'apiJavadoc' target (could use <copy/> instead of <move/>, but slower) -->
		<move todir="${web.dir}/api">
			<fileset dir="${apiDoc.dir}"/>
		</move>
		<mkdir dir="${web.dir}/xsl"/>
		<copy todir="${web.dir}/xsl">
			<fileset dir="${xslsrc.dir}">
				<include name="*.xsl"/>
			</fileset>
		</copy>
	</target>

	<target name="checkbugdesc">
	</target>

	<!--
		Generate all bug description HTML files.
	-->
	<target name="bugdesc" depends="checkbugdesc" unless="bugdesc.uptodate">
		<loadproperties srcFile="${doc.props.file}"/>
		<!-- Generate bug descriptions. -->
		<antcall target="generatebugdesc">
			<param name="bugdesc.output" value="${docsrc.dir}/bugDescriptions.html"/>
			<param name="bugdesc.title" value="FindBugs Bug Descriptions"/>
			<param name="bugdesc.prologue" value="${doc.html.gen.bugDescriptions.prologue}"/>
			<param name="bugdesc.unabridged" value="false"/>
		</antcall>
		<antcall target="generatebugdesc">
			<param name="bugdesc.output" value="${docsrc.dir}/allBugDescriptions.html"/>
			<param name="bugdesc.title" value="FindBugs Bug Descriptions (Unabridged)"/>
			<param name="bugdesc.prologue" value="${doc.html.gen.allBugDescriptions.prologue}"/>
			<param name="bugdesc.unabridged" value="true"/>
		</antcall>
	</target>
	
	<!--
		Generate a single bug description HTML file.

		Input Params:
		bugdesc.output		- bug description file to create
		bugdesc.title		- title of document
		bugdesc.prologue	- text at beginning of bug description file
		bugdesc.unabridged	- true if generating all bug descriptions,
							  false if only default-enabled
	-->
	<target name="generatebugdesc" depends="jars">
		<java classname="edu.umd.cs.findbugs.tools.html.PrettyPrintBugDescriptions"
			fork="true"
			logError="true"
			output="${bugdesc.output}">
			<jvmarg value="-Dfindbugs.home=."/>
			<jvmarg value="-Dfindbugs.desc.unabridged=${bugdesc.unabridged}"/>
			<classpath refid="tools.classpath"/>
			<arg value="${bugdesc.title}"/>
			<arg value="${doc.html.gen.header}"/>
			<arg value="${doc.html.gen.beginBody}"/>
			<arg value="${bugdesc.prologue}"/>
			<arg value="${doc.html.gen.endBody}"/>
		</java>
	</target>

	<!--
		Generate documentation files by performing token substitutions
		based on property values.  This will construct viewable HTML
		from the raw documentation sources, as well as the XML/XSL files
		ready to be formatted as HTML by the docbook-XSL stylesheet
		package.

		Input Params:
		docoutput.dir				- output directory for generated documents
		googleanalytics.fragment	- HTML fragment for google analytics
									  (empty if not formatting for website)
	-->
	<target name="generatedocs">
		<mkdir dir="${docoutput.dir}"/>

		<!-- Filter set used for generating text substitution values for
			documentation. -->
		<filterset id="doc.filters">
			<filter token="VERSION" value="${release.number}" />
			<filter token="RELEASE_DATE" value="${release.date}" />
			<filter token="ECLIPSE_UI_VERSION" value="${eclipse.ui.version}" />
			<filter token="WEBSITE" value="${findbugs.website}"/>
			<filter token="DOWNLOADS_WEBSITE" value="${findbugs.downloads.website}"/>
			<filter token="HTML_XSL_STYLESHEET" value="${xsl.stylesheet.home}/html/chunk.xsl" />
<!--
			<filter token="ECLIPSE_XSL_STYLESHEET" value="${eclipse.xsl.stylesheet}" />
-->
			<filter token="HTML_SIDEBAR" value="${doc.html.sidebar}"/>
			<filter token="HTML_FOOTER" value="${doc.html.footer}"/>
			<filter token="GOOGLE_ANALYTICS" value="${googleanalytics.fragment}"/>
		</filterset>  

		<!-- Generate files, substituting token values based on properties -->
		<copy todir="${docoutput.dir}">
			<filterset>
				<filterset refid="doc.filters"/>
			</filterset>
			<fileset dir="${docsrc.dir}">
				<patternset refid="doc.src.pats"/>
			</fileset>
		</copy>
		
		<copy todir="${docoutput.dir}">
			<fileset dir="${docsrc.dir}">
				<patternset refid="doc.img.pats"/>
			</fileset>
		</copy>
		
	</target>

	<!--
		Format the manual as HTML.

		Input Params:
		docoutput.dir - the directory containing the generated HTML/XML/XSL files
						(must be a child of the project root directory)
	-->
	<target name="generatemanual">
		<echo>Running saxon: ${saxon.home}/saxon.jar</echo>
		<java fork="true" dir="${docoutput.dir}" failonerror="true" classname="com.icl.saxon.StyleSheet" >
			<classpath>
				<pathelement location="${saxon.home}/saxon.jar"/>
				<pathelement path="${java.class.path}"/>
			</classpath>
			<arg value="manual.xml" />
			<arg value="manual.xsl" />
		</java>
	</target>
	
	<!-- Generate jnlp jars -->
	<target name="jnlp" depends="jars">
		<mkdir dir="${jnlp.dir}/plugin"/>
		<copy todir="${jnlp.dir}" file="${engine.jar}"/>
		<copy todir="${jnlp.dir}" file="${gui.jar}"/>
		<copy todir="${jnlp.dir}" file="${jar.dir}/bcel.jar"/>
		<copy todir="${jnlp.dir}" file="${jar.dir}/asm-3.0.jar"/>
		<copy todir="${jnlp.dir}" file="${jar.dir}/asm-tree-3.0.jar"/>
		<copy todir="${jnlp.dir}" file="${jar.dir}/dom4j-full.jar"/>		
		<copy todir="${jnlp.dir}/plugin" file="${plugin.dir}/coreplugin.jar"/>
		<input message="Enter keystore password:"  addproperty="password"/>
		<signjar keystore="findbugs.keystore" alias="findbugs" storepass="${password}" keypass="${password}">
			<fileset dir="${jnlp.dir}">
				<include name="**/*.jar"/>
			</fileset>
		</signjar>
	</target>
	<target name="sign" depends="jars">
		<input message="Enter keystore password:"  addproperty="password"/>
		<signjar keystore="findbugs.keystore" alias="findbugs" storepass="${password}" keypass="${password}">
			<fileset dir="${jnlp.dir}">
				<include name="**/*.jar"/>
			</fileset>
		</signjar>
	</target>


	<!-- Generate binary and source distributions. -->
	<target name="dist" depends="bindist,srcdist,jnlp"/>
	
	<!-- Generate binary distribution (both .zip and .tar.gz) -->
	<target name="bindist" depends="rebuild,docs">
		<patternset id="bindist.miscfile.pats">
			<include name="README.txt"/>
			<include name="LICENSE*.txt"/>
			<include name="bin/*.bat"/>
			<include name="lib/buggy.icns"/>
			<include name="src/xsl/*.xsl"/> <!-- Bug #1187977 -->
		</patternset>
		
		<patternset id="bindist.jar.pats">
			<include name="lib/*.jar"/>
			<include name="plugin/*.jar"/>
			<exclude name="lib/AppleJavaExtensions.jar"/>
			<exclude name="lib/junit.jar"/>
			<exclude name="lib/plastic.jar"/>
		</patternset>
		
		<patternset id="bindist.unixscript.pats">
			<include name="bin/*"/>
			<include name="bin/deprecated/*"/>
			<exclude name="bin/*.bat"/>
		</patternset>

		<zip destfile="${build.dir}/findbugs-${release.number}.zip" compress="true">
			<zipfileset prefix="findbugs-${release.number}" dir=".">
				<patternset refid="bindist.miscfile.pats"/>
			</zipfileset>
			<zipfileset prefix="findbugs-${release.number}" dir="." filemode="555">
				<patternset refid="bindist.unixscript.pats"/>
			</zipfileset>
			<zipfileset prefix="findbugs-${release.number}" dir=".">
				<patternset refid="bindist.jar.pats"/>
			</zipfileset>
			<zipfileset prefix="findbugs-${release.number}/doc" dir="${doc.dir}">
				<patternset refid="doc.src.pats"/>
				<patternset refid="doc.img.pats"/>
			</zipfileset>
		</zip>

		<tar destfile="${build.dir}/findbugs-${release.number}.tar.gz" compression="gzip">
			<tarfileset prefix="findbugs-${release.number}" dir=".">
				<patternset refid="bindist.miscfile.pats"/>
			</tarfileset>
			<tarfileset prefix="findbugs-${release.number}" dir="." mode="555">
				<patternset refid="bindist.unixscript.pats"/>
			</tarfileset>
			<tarfileset prefix="findbugs-${release.number}" dir=".">
				<patternset refid="bindist.jar.pats"/>
			</tarfileset>
			<tarfileset prefix="findbugs-${release.number}/doc" dir="${doc.dir}">
				<patternset refid="doc.src.pats"/>
				<patternset refid="doc.img.pats"/>
			</tarfileset>
		</tar>

	</target>

	<!-- Build source distribution. -->
	<target name="srcdist" depends="docs">
		<mkdir dir="${build.dir}/src"/>
		<delete dir="${build.dir}/src/findbugs-${release.number}"/>

		<cvs cvsRoot="wpugh@findbugs.cvs.sourceforge.net:/cvsroot/findbugs"
			cvsRsh="ssh"
			dest="${build.dir}/src"
			command="export -r HEAD -d findbugs-${release.number} findbugs"/>
		
		<zip destfile="${build.dir}/findbugs-${release.number}-source.zip" compress="true">
			<zipfileset dir="${build.dir}/src" includes="findbugs-${release.number}/**"/>
			<zipfileset prefix="findbugs-${release.number}/doc" dir="${doc.dir}">
				<patternset refid="doc.src.pats"/>
				<patternset refid="doc.img.pats"/>
			</zipfileset>
		</zip>
	</target>
	
	<!-- Delete generated files. -->
	<target name="clean">
		<delete>
			<fileset dir="${scripts.dir}" includes="*" excludes="findbugs.bat"/>
		</delete>
		<delete dir="build"/>
		<delete dir="${doc.dir}"/>
		<delete dir="${web.dir}"/>
		<delete file="${engine.jar}"/>
		<delete file="${coreplugin.jar}"/>
		<delete file="${gui.jar}"/>
		<delete file="${anttask.jar}"/>
	</target>

    <target name="apiJavadoc" depends="version">
       <delete dir="${apiDoc.dir}"/>
       <mkdir dir="${apiDoc.dir}"/>
      <javadoc access="protected" 
       author="true" 
	    packagenames="*"
       classpath="lib/bcel.jar:lib/junit.jar:lib/dom4j-full.jar:lib/AppleJavaExtensions.jar:lib/asm-3.0.jar:lib/asm-tree-3.0.jar"
        destdir="${apiDoc.dir}" 
        doctitle="FindBugs API Documentation" 
        Header="&lt;b&gt;FindBugs&amp;trade; ${release.number}&lt;/b&gt;"
        Windowtitle="FindBugs ${release.number} API"
        bottom="&lt;font size='-1'&gt;&lt;a href='http://findbugs.sourceforge.net/' target='_parent'&gt;FindBugs&lt;/a&gt;&amp;trade; is licenced under the LGPL. Copyright &amp;copy; 2006 University of Maryland.&lt;/font&gt;"
	    nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar= "false" notree="false" 
        sourcepath="src/java:src/java5" splitindex="true" use="true" version="true"/>
		</target>

    <target name="annotationJavadoc">
       <delete dir="${annotationDoc.dir}"/>
       <mkdir dir="${annotationDoc.dir}"/>
      <javadoc access="public" 
       classpath="lib/bcel.jar:lib/junit.jar:lib/dom4j-full.jar:lib/AppleJavaExtensions.jar"
        destdir="${annotationDoc.dir}" 
	    packagenames="edu.umd.cs.findbugs.annotations"
        doctitle="FindBugs Annotation Documentation" 
	    nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar= "false" notree="false" 
        sourcepath="src/java5" splitindex="true" use="true" version="true"/>
		</target>

	
</project>

<!-- vim:set ts=4: -->
