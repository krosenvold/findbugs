<!--
  Ant build script for FindBugs
  Contributed by Mike Fagan <mfagan@tde.com>
  With changes by David Hovemeyer <daveho@cs.umd.edu>

  The general idea behind building FindBugs is that the top-level
  working directory (i.e., the directory containing "build.xml")
  looks like a findbugs binary installation (once the default "build"
  target has executed).

  The "release" target builds an actual binary installation
  by copying files and directories from the top-level working
  directory into a subdirectory of build/release.
-->

<project name="find-bugs" default="build">

    <!--
      *****************************************************************
      User Configuration:
      This section must be modified to reflect your system.
      *****************************************************************
    -->

    <!-- Set this to the location where you installed the generics-enabled
         version of javac. -->
    <property name="jsr14.home"
              value="/export/home/daveho/linux/java/jsr14_adding_generics-1_3-ea"/>
<!--
    <property name="jsr14.home"
              value="/home/software/java/jsr14_adding_generics-1_3-ea" />
-->

    <!-- Set this to the directory containing the DocBook Modular XSL Stylesheets
         from http://docbook.sourceforge.net/projects/xsl/ -->
    <property name="xsl.stylesheet.home"
              value="/export/home/daveho/linux/docbook/docbook-xsl-1.61.0" />
<!--
    <property name="xsl.stylesheet.home"
              value="/home/software/docbook/docbook-xsl-1.61.0" />
-->

    <!-- Set this to the directory where Saxon (http://saxon.sourceforge.net/)
         is installed. -->
    <property name="saxon.home"
              value="/export/home/daveho/linux/java/saxon-6.5.2" />

    <!-- Set this to the directory where FOP (http://xml.apache.org/fop/)
         is installed.  (Note: this is disabled for now.) -->
    <property name="fop.home"
              value="/export/home/daveho/linux/java/fop-0.20.5rc2" />

    <!--
      *****************************************************************
      You should not need to change anything beyond this point.
      *****************************************************************
    -->

    <property name="findbugs.dir" value="." />
    <property name="findbugs.src.dir" value="${findbugs.dir}/src/java" />
    <property name="findbugs.jar.name" value="findbugs.jar" />
    <property name="findbugsgui.jar.name" value="findbugsGUI.jar" />
    <property name="coreplugin.jar.name" value="coreplugin.jar" />
    <property name="doc.src.dir" value="${findbugs.dir}/src/doc" />
    <property name="doc.dir" value="${findbugs.dir}/doc" />
    <property name="build.dir" value="${findbugs.dir}/build" />
    <property name="jar.dir" value="lib" />
    <property name="script.dir" value="bin" />
    <property name="plugin.dir" value="plugin" />
    <property name="class.dir" value="${build.dir}/classes" />
    <property name="release.dir" value="${build.dir}/release" />
    <property name="release.prop.file" value="${build.dir}/release.properties" />
    <property name="html.xsl.stylesheet" value="${xsl.stylesheet.home}/html/chunk.xsl" />
    <property name="fo.xsl.stylesheet" value="${xsl.stylesheet.home}/fo/docbook.xsl" />

    <!-- Classpath for compiling FindBugs. -->
    <path id="classpath">
      <pathelement location="${jar.dir}/bcel.jar" />
      <pathelement location="${jar.dir}/dom4j-full.jar" />
    </path>

    <!-- Classpath for running Saxon -->
    <path id="saxon.classpath">
      <pathelement location="${saxon.home}/saxon.jar"/>
      <pathelement path="${java.class.path}"/>
    </path>

    <!-- Classpath for running FOP -->
    <path id="fop.classpath">
      <pathelement path="${fop.home}/build/fop.jar" />
      <fileset dir="${fop.home}/lib">
        <include name="**/*.jar"/>
      </fileset>
      <pathelement path="${java.class.path}"/>
    </path>

    <target name="clean" depends="init">
      <delete dir="${build.dir}" />
      <delete dir="${plugin.dir}" />
      <delete dir="${doc.dir}" />
      <delete file="${release.prop.file}" />
      <delete file="${jar.dir}/${findbugs.jar.name}" />
      <delete file="${jar.dir}/${findbugsgui.jar.name}" />
    </target>

    <target name="init" >
      <mkdir dir="${jar.dir}" />
      <mkdir dir="${plugin.dir}" />
      <mkdir dir="${class.dir}" />
      <mkdir dir="${release.dir}" />
      <mkdir dir="${doc.dir}" />
      <mkdir dir="${build.dir}" />
    </target>

    <!-- Target to compile classes. -->
    <target name="classes" depends="init">
      <javac srcdir="${findbugs.src.dir}" destdir="${class.dir}"
             source="1.5"
             compiler="com.cortexeb.Jsr14CompilerAdapter">
        <classpath refid="classpath" />
      </javac>
    </target>

    <!-- Target to build jar file for the main engine. -->
    <target name="findbugs" depends="classes">
      <copy todir="${class.dir}">
        <fileset dir="${findbugs.src.dir}" includes="**/*.properties"/>
      </copy>

      <!--
        FindBugs engine - all classes except those in the GUI
        and the Detector implementations (which are part of the core plugin).
      -->
      <jar destfile="${jar.dir}/${findbugs.jar.name}"
           basedir="${class.dir}" manifest="${findbugs.dir}/etc/MANIFEST-findbugs.MF">
        <exclude name="edu/umd/cs/findbugs/gui/**" />
        <exclude name="edu/umd/cs/findbugs/detect/*" />
        <exclude name="*.xml" />
      </jar>
    </target>

    <!-- Target to build the core plugin.
         This is all of the standard bug pattern detectors.  -->
    <target name="coreplugin" depends="classes">

      <javac srcdir="${findbugs.src.dir}" destdir="${class.dir}"
             includes="edu/umd/cs/findbugs/detect/*.java"
             source="1.5"
             compiler="com.cortexeb.Jsr14CompilerAdapter">
        <classpath refid="classpath" />
      </javac>

      <copy file="etc/findbugs.xml" todir="${class.dir}" />
      <copy file="etc/messages.xml" todir="${class.dir}" />

      <jar destfile="${plugin.dir}/${coreplugin.jar.name}" basedir="${class.dir}">
         <include name="*.xml" />
         <include name="edu/umd/cs/findbugs/detect/*.class" />
      </jar>

    </target>

    <!-- Target to build the GUI jar file. -->
    <target name="findbugsgui" depends="classes">
      <copy todir="${class.dir}">
        <fileset dir="${findbugs.src.dir}" includes="**/*.png"/>
        <fileset dir="${findbugs.src.dir}" includes="**/*.html"/>
      </copy>

      <!--
        When building the Jar file for the GUI, we just need the contents
        of the edu/umd/cs/findbugs/gui directory (and subdirectories).
        The main engine is picked up by having findbugs.jar in the
        Class-Path attribute of the manifest for findbugsGUI.jar.
      -->
      <jar destfile="${jar.dir}/${findbugsgui.jar.name}"
           manifest="${findbugs.dir}/etc/MANIFEST-findbugsGUI.MF">
        <fileset dir="${class.dir}" includes="edu/umd/cs/findbugs/gui/*" />
        <fileset dir="${class.dir}" includes="edu/umd/cs/findbugs/gui/help/*" />
      </jar>
    </target>

    <!-- Target to get the release version info. -->
    <target name="version" depends="classes">
      <java classname="edu.umd.cs.findbugs.Version" 
             failonerror="true" output="${release.prop.file}">
         <classpath>
           <pathelement location="${class.dir}"/>
         </classpath>
         <arg value="-props"/> 
      </java>
      <loadproperties srcFile="${release.prop.file}" />
    </target>

    <!-- Target to generate documentation files from their sources. -->
    <target name="docfiles" depends="version">
       <copy todir="${doc.dir}">
         <fileset dir="${doc.src.dir}" includes="**/*.png"/>
       </copy>

       <copy todir="${doc.dir}">
         <fileset dir="${doc.src.dir}" excludes="**/*.png"/>
         <!--
           Perform substitutions on the documentation files.
           This is how we ensure that things like version number,
           release date, etc. are correct in the generated docs.
           It also tells the doc formatting tools where to find
           stylesheets and the like.
         -->
         <filterset>
            <filter token="VERSION" value="${release.number}" />
            <filter token="RELEASE_DATE" value="${release.date}" />
            <filter token="HTML_XSL_STYLESHEET" value="${html.xsl.stylesheet}" />
        </filterset>  
      </copy>

      <!-- The manual is up to date as long as the generated HTML
           file are newer than manual.xml and manual.xsl. -->
      <uptodate property="manual.build.notRequired" >
        <srcfiles dir="${doc.dir}" includes="manual.xml,manual.xsl" />
        <mapper type="merge" to="manual/index.html" />
      </uptodate>
    </target>

    <!-- Target to build the manual. -->
    <target name="manual" depends="docfiles" unless="manual.build.notRequired" >
       <mkdir dir="${doc.dir}/manual" />

       <!-- Format the manual as HTML. -->
       <java fork="true" dir="${doc.dir}" failonerror="true" classname="com.icl.saxon.StyleSheet" >
         <classpath refid="saxon.classpath" />
         <arg value="manual.xml" />
         <arg value="manual.xsl" />
       </java>

       <!-- Format the manual as PDF.  This is disabled for now. -->
<!--
       <java fork="true" dir="${doc.dir}" failonerror="true" classname="com.icl.saxon.StyleSheet" >
         <classpath refid="saxon.classpath" />
         <arg value="-o" />
         <arg value="${doc.dir}/manual.fo" />
         <arg value="manual.xml" />
         <arg value="${fo.xsl.stylesheet}" />
       </java>
       <java fork="true" dir="${doc.dir}" failonerror="true" classname="org.apache.fop.apps.Fop">
         <classpath refid="fop.classpath" />
         <arg value="manual.fo" />
         <arg value="manual.pdf" />
       </java>
-->
    </target>

    <!-- Target to build the docs. -->
    <target name="docs" depends="docfiles,manual">
    </target>

    <!-- Default target: just compile the code
         and build the Jar files. -->
    <target name="build" depends="findbugs,coreplugin,findbugsgui" />

    <!-- Compile the code and format the docs. -->
    <target name="buildAll" depends="build,docs" />

    <!-- Target to build the release. This just means copying generated files
         (code and docs). -->
    <target name="release" depends="buildAll">
       <copy todir="${release.dir}/findbugs-${release.number}/lib">
         <fileset dir="${jar.dir}" includes="**/*.jar"/>
       </copy>
       <copy todir="${release.dir}/findbugs-${release.number}/plugin">
         <fileset dir="${plugin.dir}" includes="**/*.jar"/>
       </copy>
       <copy todir="${release.dir}/findbugs-${release.number}/doc">
         <fileset dir="${doc.dir}" />
       </copy>
       <copy todir="${release.dir}/findbugs-${release.number}/bin">
         <fileset dir="${script.dir}" />
       </copy>
       <chmod file="${release.dir}/findbugs-${release.number}/bin/findbugs" perm="a+rx"/>
    </target>

    <!-- Update the FindBugs web page. -->
<!--
    <property name="findbugs.web.dir" value="/fs/www/users/pugh/java/bugs" />
-->
    <property name="findbugs.web.dir" value="/tmp/bugs" />
    <target name="web" depends="docs" >
      <copy todir="${findbugs.web.dir}" >
        <fileset dir="${doc.dir}" />
      </copy>
    </target>
    
</project>

