<!--
  Ant build script for FindBugs
  Contributed by Mike Fagan <mfagan@tde.com>
  With changes by David Hovemeyer <daveho@cs.umd.edu>

  If you are building FindBugs for the first time, please see
  the manual for important information.  You can find it in
  "doc/manual/index.html" in the FindBugs directory, or online at

     http://www.cs.umd.edu/~pugh/java/bugs/manual/index.html

  The general idea behind building FindBugs is that the top-level
  working directory (i.e., the directory containing "build.xml")
  looks like a findbugs binary installation (once the default "build"
  target has executed).

  The "release" target builds an actual binary installation
  by copying files and directories from the top-level working
  directory into a subdirectory of build/release.
-->

<project name="find-bugs" default="build">


    <!--
      *****************************************************************
      All properties that need to be customized for your system
      (e.g., location of third-party libraries) are
      contained in a separate properties file, build.properties.

      You should not need to change anything in this file.
      *****************************************************************
    -->

    <property file="build.properties"/>

    <property name="findbugs.dir" value="." />
    <property name="findbugs.src.dir" value="${findbugs.dir}/src/java" />
    <property name="anttask.src.dir" value="${findbugs.dir}/src/antTask" />
    <property name="tools.src.dir" value="${findbugs.dir}/src/tools"/>
    <property name="eclipse.src.dir" value="${findbugs.dir}/src/eclipsePlugin"/>
    <property name="script.src.dir" value="${findbugs.dir}/src/scripts"/>
    <property name="findbugs.jar.name" value="findbugs.jar" />
    <property name="findbugsgui.jar.name" value="findbugsGUI.jar" />
    <property name="coreplugin.jar.name" value="coreplugin.jar" />
    <property name="anttask.jar.name" value="findbugs-ant.jar" />
    <property name="doc.src.dir" value="${findbugs.dir}/src/doc" />
    <property name="doc.dir" value="${findbugs.dir}/doc" />
    <property name="javadoc.dir" value="${findbugs.dir}/doc/api" />
    <property name="build.dir" value="${findbugs.dir}/build" />
    <property name="jar.dir" value="lib" />
    <property name="script.dir" value="bin" />
    <property name="plugin.dir" value="plugin" />
    <property name="class.dir" value="${build.dir}/classes" />
    <property name="tools.dir" value="${build.dir}/tools"/>
    <property name="test.dir" value="${findbugs.dir}/test" />
    <property name="release.prop.file" value="${build.dir}/release.properties" />
    <property name="html.xsl.stylesheet" value="${xsl.stylesheet.home}/html/chunk.xsl" />
    <property name="fo.xsl.stylesheet" value="${xsl.stylesheet.home}/fo/docbook.xsl" />
    <property name="doc.props.file" value="${findbugs.dir}/etc/doc.properties"/>
    <property name="html.uptodate.stamp" value="${build.dir}/html-uptodate.stamp"/>
    <property name="script.props.file" value="${findbugs.dir}/etc/script.properties"/>
    <property name="scripts.uptodate.stamp" value="${findbugs.dir}/build/scripts-uptodate.stamp"/>

    <!--
      *****************************************************************
      Class paths
      *****************************************************************
    -->

    <!-- Classpath for compiling FindBugs. -->
    <path id="classpath">
      <pathelement location="${jar.dir}/bcel.jar" />
      <pathelement location="${jar.dir}/dom4j-full.jar" />
    </path>

    <!-- Classpath for running Saxon -->
    <path id="saxon.classpath">
      <pathelement location="${saxon.home}/saxon.jar"/>
      <pathelement path="${java.class.path}"/>
    </path>

    <!-- Classpath for running FOP -->
    <path id="fop.classpath">
      <pathelement path="${fop.home}/build/fop.jar" />
      <fileset dir="${fop.home}/lib">
        <include name="**/*.jar"/>
      </fileset>
      <pathelement path="${java.class.path}"/>
    </path>

    <!-- Classpath for building tools. -->
    <path id="tools.buildclasspath">
      <path refid="classpath"/>
      <pathelement path="${class.dir}"/>
    </path>

    <!-- Classpath for running tools. -->
    <path id="tools.classpath">
      <path refid="tools.buildclasspath"/>
      <pathelement location="${tools.dir}"/>
    </path>

    <!--
      *****************************************************************
      FileSets
      *****************************************************************
    -->

    <!-- All Java source files used to generated HTML. -->
    <fileset id="tools.html.src" dir="${tools.src.dir}"
             includes="edu/umd/cs/findbugs/tools/html/*.java"/>

    <!--
      *****************************************************************
      Targets
      *****************************************************************
    -->

    <target name="clean">
      <delete dir="${build.dir}" />
      <delete dir="${plugin.dir}" />
      <delete dir="${doc.dir}" />
      <delete file="${release.prop.file}" />
      <delete file="${jar.dir}/${findbugs.jar.name}" />
      <delete file="${jar.dir}/${findbugsgui.jar.name}" />
      <delete file="${jar.dir}/${anttask.jar.name}" />
      <delete>
        <fileset dir="${test.dir}" includes="*.class" />
        <fileset dir="${test.dir}" includes="*.jar" />
      </delete>
      <ant dir="${eclipse.src.dir}/edu.umd.cs.findbugs" target="clean" inheritall="false"/>
      <ant dir="${eclipse.src.dir}/de.tobject.findbugs" target="clean" inheritall="false"/>
    </target>

    <target name="init" >
      <mkdir dir="${jar.dir}" />
      <mkdir dir="${plugin.dir}" />
      <mkdir dir="${class.dir}" />
      <mkdir dir="${doc.dir}" />
      <mkdir dir="${build.dir}" />
      <mkdir dir="${tools.dir}"/>
    </target>

    <!-- Target to compile classes. -->
    <target name="classes" depends="init">
      <!-- Compile with the JSR14 prototype compiler and compiler adapter -->
      <javac srcdir="${findbugs.src.dir}" destdir="${class.dir}"
             source="1.5"
             debug="true"
             compiler="com.cortexeb.Jsr14CompilerAdapter">
        <classpath refid="classpath" />
      </javac>

      <!-- Use the following to compile using JDK 1.5 javac -->
<!--
      <javac srcdir="${findbugs.src.dir}" destdir="${class.dir}"
             source="1.5"
             target="1.5"
             debug="true">
        <classpath refid="classpath" />
      </javac>
-->
    </target>

    <!-- Target to build jar file for the main engine. -->
    <target name="findbugs" depends="classes">
      <copy todir="${class.dir}">
        <fileset dir="${findbugs.src.dir}" includes="**/*.properties"/>
      </copy>
      <copy file="${findbugs.dir}/etc/summary.xsl" todir="${class.dir}" />

      <!--
        FindBugs engine - all classes except those in the GUI,
        the Detector implementations (which are part of the core plugin),
        and the Ant task (which is put in its own Jar file).
      -->
      <jar destfile="${jar.dir}/${findbugs.jar.name}"
           basedir="${class.dir}" manifest="${findbugs.dir}/etc/MANIFEST-findbugs.MF">
        <exclude name="edu/umd/cs/findbugs/gui/**" />
        <exclude name="edu/umd/cs/findbugs/detect/*" />
        <exclude name="*.xml" />
        <exclude name="edu/umd/cs/findbugs/anttask/**" />
      </jar>
    </target>

    <!-- Check if core plugin XML files need to be copied. -->
    <target name="corepluginXMLCheck" depends="tools">
      <condition property="coreplugin.xml.uptodate">
        <and>
          <uptodate>
            <srcfiles dir="${findbugs.dir}"
                      includes="etc/findbugs.xml,etc/messages.xml,etc/messages_ja.xml"/>
            <mapper type="glob"
                    from="etc/*.xml"
                    to="${class.dir}/*.xml"/>
          </uptodate>
        </and>
      </condition>
    </target>

    <!-- Copy XML files (plugin descriptor and messages files)
         for the core plugin.  We run a Java program to check
         that the messages files actually define all of the messages
         required by the plugin (as defined in the plugin descriptor). -->
    <target name="corepluginXML" depends="classes,corepluginXMLCheck" unless="coreplugin.xml.uptodate">
      <java dir="${findbugs.dir}"
            fork="true"
            classname="edu.umd.cs.findbugs.tools.xml.CheckMessages"
            failonerror="true">
         <classpath refid="tools.classpath"/>
         <arg value="etc/findbugs.xml"/>
         <arg value="etc/messages.xml"/>
<!--
         <arg value="etc/messages_ja.xml"/>
-->
      </java>

      <copy file="etc/findbugs.xml" todir="${class.dir}" />
      <copy file="etc/messages.xml" todir="${class.dir}" />
      <copy file="etc/messages_ja.xml" todir="${class.dir}" />
    </target>

    <!-- Target to build the core plugin.
         This is all of the standard bug pattern detectors.  -->
    <target name="coreplugin" depends="classes,corepluginXML">
      <jar destfile="${plugin.dir}/${coreplugin.jar.name}" basedir="${class.dir}">
         <include name="*.xml" />
         <include name="edu/umd/cs/findbugs/detect/*.class" />
      </jar>
    </target>

    <!-- Target to build the GUI jar file. -->
    <target name="findbugsgui" depends="classes">
      <copy todir="${class.dir}">
        <fileset dir="${findbugs.src.dir}" includes="**/*.png"/>
        <fileset dir="${findbugs.src.dir}" includes="**/*.html"/>
      </copy>

      <!--
        When building the Jar file for the GUI, we just need the contents
        of the edu/umd/cs/findbugs/gui directory (and subdirectories).
        The main engine is picked up by having findbugs.jar in the
        Class-Path attribute of the manifest for findbugsGUI.jar.
      -->
      <jar destfile="${jar.dir}/${findbugsgui.jar.name}"
           manifest="${findbugs.dir}/etc/MANIFEST-findbugsGUI.MF">
        <fileset dir="${class.dir}" includes="edu/umd/cs/findbugs/gui/*" />
        <fileset dir="${class.dir}" includes="edu/umd/cs/findbugs/gui/help/*" />
      </jar>
    </target>

    <target name="scriptsCheck">
      <condition property="scripts.uptodate">
        <and>
          <!-- Generated scripts must be newer than src scripts -->
          <uptodate>
            <srcfiles dir="${findbugs.dir}" includes="src/scripts/*"/>
            <mapper type="glob"
                    from="src/scripts/*"
                    to="${script.dir}/*"/>
          </uptodate>
          <!-- And, generated scripts must be newer than etc/script.properties -->
          <uptodate targetfile="${scripts.uptodate.stamp}">
            <srcfiles file="${script.props.file}"/>
          </uptodate>
        </and>
      </condition>
    </target>

    <!-- Target to copy the scripts (substituting script fragments
         as needed). -->
    <target name="scripts" depends="init,scriptsCheck" unless="scripts.uptodate">
      <loadproperties srcFile="${script.props.file}"/>

      <filterset id="scriptFilters">
        <filter token="GET_FBHOME" value="${script.get.fbhome}" />
        <filter token="SET_DEFAULT_JAVA" value="${script.set.default.java}"/>
        <filter token="WRAP_JAVA" value="${script.wrap.java}"/>
        <filter token="WRAP_JAR" value="${script.wrap.jar}"/>
      </filterset>

      <copy todir="${script.dir}" overwrite="true">
        <fileset dir="${script.src.dir}"/>
        <filterset refid="scriptFilters"/>
      </copy>

      <!-- Make the Unix scripts executable. -->
      <chmod dir="${script.dir}" perm="a+x" includes="*" excludes="*.bat"/>

      <touch file="${scripts.uptodate.stamp}"/>
    </target>

    <!-- Target to build the anttask -->
    <target name="anttask" depends="findbugs">
      <javac srcdir="${anttask.src.dir}" debug="true" destdir="${class.dir}" >
        <classpath refid="classpath" />
      </javac>
 
      <jar destfile="${jar.dir}/${anttask.jar.name}"
          basedir="${class.dir}" includes="edu/umd/cs/findbugs/anttask/**" />
    </target>

    <!-- Target to build the Eclipse plugin. -->
    <target name="eclipsePlugin" depends="findbugs,coreplugin,tools,version">
       <!-- Create the plugin descriptor files.
            We use a filter set to ensure that the plugin version numbers
            are up-to-date with the global version properties from
            the edu.umd.cs.findbugs.Version class. -->
       <copy file="${eclipse.src.dir}/edu.umd.cs.findbugs/plugin.xml.in"
             tofile="${eclipse.src.dir}/edu.umd.cs.findbugs/plugin.xml">
         <filterset refid="docFilters"/>
       </copy>
       <copy file="${eclipse.src.dir}/de.tobject.findbugs/plugin.xml.in"
             tofile="${eclipse.src.dir}/de.tobject.findbugs/plugin.xml">
         <filterset refid="docFilters"/>
       </copy>

       <!-- Generate build properties for core Eclipse plugin. -->
       <java dir="${findbugs.dir}"
             fork="true"
             classname="edu.umd.cs.findbugs.tools.eclipse.EclipseClasspath"
             output="${eclipse.src.dir}/edu.umd.cs.findbugs/build.properties"
             failonerror="true">
         <classpath refid="tools.classpath"/>
         <arg value="${eclipse.home}"/>
         <arg value="${eclipse.src.dir}/edu.umd.cs.findbugs"/>
       </java>

       <!-- Spawn Ant subtask to build the core Eclipse plugin. -->
       <ant dir="${eclipse.src.dir}/edu.umd.cs.findbugs" inheritall="false"/>

       <!-- Generate build properties for UI Eclipse plugin. -->
       <java dir="${findbugs.dir}"
             fork="true"
             classname="edu.umd.cs.findbugs.tools.eclipse.EclipseClasspath"
             output="${eclipse.src.dir}/de.tobject.findbugs/build.properties"
             failonerror="true">
         <classpath refid="tools.classpath"/>
         <arg value="${eclipse.home}"/>
         <arg value="${eclipse.src.dir}/de.tobject.findbugs"/>
         <arg value="edu.umd.cs.findbugs"/>
         <arg value="${eclipse.src.dir}/edu.umd.cs.findbugs"/>
       </java>

       <!-- Spawn Ant subtask to build the UI Eclipse plugin. -->
       <ant dir="${eclipse.src.dir}/de.tobject.findbugs" inheritall="false"/>
    </target>

    <!-- Build jar file of test cases.  -->
    <target name="testjar" depends="init,anttask" >
       <javac srcdir="${test.dir}" excludes="IgnoredReturnValue.java,TryLock.java" debug="true" />
       <jar destfile="${test.dir}/dumb.jar" basedir="${test.dir}" includes="*.class"
            excludes="IgnoredReturnValue*.class,TryLock*.class" />
    </target>

    <!-- Run findbugs on the test Jar file. -->
    <target name="runtests" depends="testjar">
      <taskdef name="findbugs"
               classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
        <classpath>
          <pathelement location="${jar.dir}/${findbugs.jar.name}"/>
          <pathelement location="${jar.dir}/${anttask.jar.name}"/>
        </classpath>
      </taskdef>

      <findbugs home="." reportLevel="low"
                output="text" outputFile="${test.dir}/dumb.bugs">
        <class location="${test.dir}/dumb.jar"/>
        <systemProperty name="findbugs.assertionmethods" value="UserAss3rtion.makeSureItIsOK"/>
<!--
        <systemProperty name="cfg.prune.stats" value="true"/>
        <systemProperty name="classContext.timeAnalyses" value="true"/>
        <systemProperty name="dataflow.maxiters" value="500"/>
-->
      </findbugs>
    </target>

    <!-- Build test cases that require JSR166 library. -->
    <target name="jsr166test">
       <javac srcdir="${test.dir}" includes="IgnoredReturnValue.java,TryLock.java" debug="true" />
       <jar destfile="${test.dir}/jsr166test.jar" basedir="${test.dir}"
            includes="IgnoredReturnValue*.class,TryLock*.class" />
    </target>

    <!--
       Build tools. This includes:
         - Eclipse plugin classpath extractor
    -->
    <target name="tools" depends="classes">
      <javac srcdir="${tools.src.dir}" destdir="${tools.dir}"
             excludes="edu/umd/cs/findbugs/tools/patcomp/*"
             source="1.5"
             debug="true"
             compiler="com.cortexeb.Jsr14CompilerAdapter">
        <classpath refid="tools.buildclasspath"/>
      </javac> 
    </target>

    <!-- Target to get the release version info. -->
    <target name="version" depends="classes">
      <java classname="edu.umd.cs.findbugs.Version" 
             failonerror="true" output="${release.prop.file}">
         <classpath>
           <pathelement location="${class.dir}"/>
         </classpath>
         <arg value="-props"/> 
      </java>
      <loadproperties srcFile="${release.prop.file}" />

      <!-- Now we can define properties that depend on version number properties. -->

      <property name="release.dir" value="${build.dir}/bin/findbugs-${release.number}" />

      <property name="release.base" value="findbugs-${release.number}" />
      <property name="bin.release.scripts"
                value="${release.base}/bin/findbugs,${release.base}/bin/mergeResults,${release.base}/bin/bugHistory,${release.base}/bin/categorizeBugs,${release.base}/bin/countBugs,${release.base}/bin/findExamples,${release.base}/bin/unionResults,${release.base}/bin/fbwrap,${release.base}/bin/graphIS2FalsePositives" />
      <property name="src.release.scripts"
                value="${bin.release.scripts},${release.base}/etc/createXML,${release.base}/etc/runTests,${release.base}/etc/summarizeBugs,${release.base}/etc/diffBugSummaries" />

      <!-- Get HTML doc properties -->
      <loadproperties srcFile="${doc.props.file}"/>

      <!-- Filter set used for generating text substitution values for
           documentation and Eclipse plugin descriptors. -->
      <filterset id="docFilters">
        <filter token="VERSION" value="${release.number}" />
        <filter token="RELEASE_DATE" value="${release.date}" />
        <filter token="ECLIPSE_UI_VERSION" value="${eclipse.ui.version}" />
        <filter token="WEBSITE" value="${findbugs.website}"/>
        <filter token="DOWNLOADS_WEBSITE" value="${findbugs.downloads.website}"/>
        <filter token="HTML_XSL_STYLESHEET" value="${html.xsl.stylesheet}" />
        <filter token="HTML_SIDEBAR" value="${doc.html.sidebar}"/>
        <filter token="HTML_FOOTER" value="${doc.html.footer}"/>
      </filterset>  
    </target>

    <!-- Check if the bug descriptions HTML file needs to be generated. -->
    <target name="bugDescriptionsCheck" depends="tools,version">
      <condition property="bugDescriptions.html.uptodate">
        <and>
          <uptodate targetfile="${doc.src.dir}/bugDescriptions.html">
            <srcfiles refid="tools.html.src"/>
            <srcfiles file="${doc.props.file}"/>
            <srcfiles file="${plugin.dir}/coreplugin.jar"/>
          </uptodate>
        </and>
      </condition>
    </target>

    <!-- Generate HTML of bug descriptions. -->
    <target name="bugDescriptions" depends="bugDescriptionsCheck"
            unless="bugDescriptions.html.uptodate">
      <java classname="edu.umd.cs.findbugs.tools.html.PrettyPrintBugDescriptions"
            output="${doc.src.dir}/bugDescriptions.html"
            failonerror="true"
            fork="true">
         <jvmarg value="-Dfindbugs.home=${findbugs.dir}"/>
         <classpath refid="tools.classpath"/>
         <arg value="FindBugs Bug Descriptions"/>
         <arg value="${doc.html.gen.header}"/>
         <arg value="${doc.html.gen.beginBody}"/>
         <arg value="${doc.html.gen.bugDescriptions.prologue}"/>
         <arg value="${doc.html.gen.endBody}"/>
      </java>
    </target>

    <!-- Check whether the HTML docfiles are up to date. -->
    <target name="docfilesHTMLCheck">
      <condition property="docfiles.html.uptodate">
        <and>
          <!-- Generated html and css files must be newer than src html and css files -->
          <uptodate>
            <srcfiles dir="${findbugs.dir}" includes="src/doc/*.html"/>
            <mapper type="glob"
                    from="src/doc/*.html"
                    to="${doc.dir}/*.html"/>
          </uptodate>
          <uptodate>
            <srcfiles dir="${findbugs.dir}" includes="src/doc/*.css"/>
            <mapper type="glob"
                    from="src/doc/*.css"
                    to="${doc.dir}/*.css"/>
          </uptodate>
          <!-- And, generated html files must be newer than etc/doc.properties -->
          <uptodate targetfile="${html.uptodate.stamp}">
            <srcfiles file="${doc.props.file}"/>
          </uptodate>
        </and>
      </condition>
    </target>

    <!-- Generate HTML documentation (website). -->
    <target name="docfilesHTML"
            depends="version,tools,docfilesHTMLCheck,bugDescriptions"
            unless="docfiles.html.uptodate">
       <copy todir="${doc.dir}" overwrite="true">
         <fileset dir="${doc.src.dir}" includes="*.html,*.css"/>
         <filterset refid="docFilters"/>
      </copy>
      <touch file="${html.uptodate.stamp}"/>
    </target>

    <!-- Target to generate documentation files from their sources. -->
    <target name="docfiles" depends="version,tools,docfilesHTML">
       <!-- Image files -->
       <copy todir="${doc.dir}">
         <fileset dir="${doc.src.dir}" includes="**/*.png"/>
       </copy>

      <!-- XML/XSL source for the manual -->
      <copy todir="${doc.dir}">
        <fileset dir="${doc.src.dir}" includes="manual.xml,manual.xsl"/>
        <filterset refid="docFilters"/>
      </copy>

      <!-- The manual is up to date as long as the generated HTML
           file are newer than manual.xml and manual.xsl. -->
      <uptodate property="manual.build.notRequired" >
        <srcfiles dir="${doc.dir}" includes="manual.xml,manual.xsl" />
        <mapper type="merge" to="manual/index.html" />
      </uptodate>
    </target>

    <!-- Target to build the manual. -->
    <target name="manual" depends="docfiles" unless="manual.build.notRequired" >
       <mkdir dir="${doc.dir}/manual" />

       <!-- Format the manual as HTML. -->
       <java fork="true" dir="${doc.dir}" failonerror="true" classname="com.icl.saxon.StyleSheet" >
         <classpath refid="saxon.classpath" />
         <arg value="manual.xml" />
         <arg value="manual.xsl" />
       </java>

       <!-- Format the manual as PDF.  This is disabled for now. -->
<!--
       <java fork="true" dir="${doc.dir}" failonerror="true" classname="com.icl.saxon.StyleSheet" >
         <classpath refid="saxon.classpath" />
         <arg value="-o" />
         <arg value="${doc.dir}/manual.fo" />
         <arg value="manual.xml" />
         <arg value="${fo.xsl.stylesheet}" />
       </java>
       <java fork="true" dir="${doc.dir}" failonerror="true" classname="org.apache.fop.apps.Fop">
         <classpath refid="fop.classpath" />
         <arg value="manual.fo" />
         <arg value="manual.pdf" />
       </java>
-->
    </target>

    <!-- Target to build the docs. -->
    <target name="docs" depends="docfiles,manual">
    </target>

    <!-- Build Javadocs.  This is experimental, and requires a 1.5 JDK. -->
    <target name="javadoc" depends="init">
      <delete dir="${javadoc.dir}"/>
      <mkdir dir="${javadoc.dir}"/>
      <javadoc destdir="${javadoc.dir}"
               source="1.5"
               windowtitle="FindBugs API Reference"
               >
        <fileset dir="${findbugs.src.dir}"/>
      </javadoc>
    </target>

    <!-- Default target: just compile the code
         and build the Jar files. -->
    <target name="build" depends="findbugs,coreplugin,findbugsgui,scripts,anttask,testjar" />

    <!-- Rebuild. -->
    <target name="rebuild" depends="clean,build" />

    <!-- Compile the code and format the docs. -->
    <target name="buildAll" depends="build,eclipsePlugin,docs" />

    <!-- Target to build the release. This just means copying generated files
         (code and docs). -->
    <target name="release" depends="buildAll,version">
       <copy todir="${release.dir}/lib">
         <fileset dir="${jar.dir}" includes="**/*.jar" excludes="plastic.jar"  />
         <fileset dir="${jar.dir}" includes="**/*.icns" />
       </copy>
       <copy todir="${release.dir}/plugin">
         <fileset dir="${plugin.dir}" includes="**/*.jar"/>
       </copy>
       <copy todir="${release.dir}/doc">
         <fileset dir="${doc.dir}" />
       </copy>
       <copy todir="${release.dir}/bin">
         <fileset dir="${script.dir}" />
       </copy>
       <chmod perm="a+rx">
         <fileset dir="${build.dir}/bin" includes="${src.release.scripts}" />
       </chmod>
       <copy file="LICENSE.txt" todir="${release.dir}" />
       <copy file="README.txt" todir="${release.dir}" />
    </target>

    <!-- Create binary distribution files (.tar.gz and .zip) -->
    <target name="bindist" depends="release">
      <mkdir dir="${build.dir}/bin" />
      <tar tarfile="${build.dir}/bin/findbugs-${release.number}.tar.gz"
           longfile="gnu"
           compression="gzip">
         <tarfileset dir="${build.dir}/bin" includes="findbugs-${release.number}/**" excludes="${src.release.scripts}" />
         <tarfileset dir="${build.dir}/bin" includes="${bin.release.scripts}" mode="555" />
      </tar>
      <zip destfile="${build.dir}/bin/findbugs-${release.number}.zip">
         <zipfileset dir="${build.dir}/bin" includes="findbugs-${release.number}/**" excludes="${src.release.scripts}" />
         <zipfileset dir="${build.dir}/bin" includes="${bin.release.scripts}" filemode="555" />
      </zip>
    </target>

    <!-- Create a source distribution. -->
    <target name="srcdist" depends="release" >
       <mkdir dir="${build.dir}/src" />
       <delete dir="${build.dir}/src/findbugs-${release.number}" />

       <!-- Export the code from CVS. -->
       <cvs cvsRoot="daveho@cvs.sourceforge.net:/cvsroot/findbugs"
            cvsRsh="ssh"
            dest="${build.dir}/src"
            command="export -r HEAD -d findbugs-${release.number} findbugs" />

       <!-- Copy generated documentation -->
       <copy todir="${build.dir}/src/findbugs-${release.number}/doc" >
         <fileset dir="${doc.dir}" />
       </copy>

       <!-- Put it in a zip file. -->
       <zip destfile="${build.dir}/src/findbugs-${release.number}-source.zip">
         <zipfileset dir="${build.dir}/src" includes="findbugs-${release.number}/**" excludes="${src.release.scripts}"/>
         <zipfileset dir="${build.dir}/src" includes="${src.release.scripts}" filemode="555" />
       </zip>
    </target>

    <!-- Update the FindBugs web page.
         Since the project moved to sourceforge, we don't actually
         update it in place any more.  Instead, just deploy it to
         a temp directory, which we can zip up and deploy by hand.
    -->
    <property name="findbugs.web.dir" value="/tmp/findbugsWebsite" />
    <target name="web" depends="docs" >
      <delete dir="findbugs.web.dir}"/>
      <copy todir="${findbugs.web.dir}" >
        <fileset dir="${doc.dir}" />
      </copy>
    </target>

</project>

