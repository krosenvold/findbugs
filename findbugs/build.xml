<!--
	FindBugs Ant build script.
	Based on original FindBugs Ant Script by Mike Fagan.
	Rewritten 1/5/2005 by David Hovemeyer.
-->

<project name="findbugs" default="build">
	
	<property file="build.properties"/>
	
	<property name="jar.dir" value="lib"/>
	<property name="plugin.dir" value="plugin"/>
	<property name="build.dir" value="build"/>
	<property name="classes.dir" value="build/classes"/>
	<property name="scripts.dir" value="bin"/>
	<property name="src.dir" value="src/java"/>
	<property name="toolsrc.dir" value="src/tools"/>
	<property name="scriptsrc.dir" value="src/scripts"/>
	<property name="xslsrc.dir" value="src/xsl"/>
	<property name="junitsrc.dir" value="src/junit"/>
	<property name="anttasksrc.dir" value="src/antTask"/>
	<property name="docsrc.dir" value="src/doc"/>
	<property name="etc.dir" value="etc"/>
	<property name="test.dir" value="test"/>
	<property name="doc.dir" value="doc"/>
	<property name="apiDoc.dir" value="apiJavaDoc"/>
	<property name="annotationDoc.dir" value="annotationJavaDoc"/>
	<property name="jnlp.dir" value="jnlp"/>
	<property name="pkg.base" value="edu/umd/cs/findbugs"/>
	<property name="engine.jar" value="${jar.dir}/findbugs.jar"/>
	<property name="annotations.jar" value="${jar.dir}/annotations.jar"/>
	<property name="coreplugin.jar" value="${plugin.dir}/coreplugin.jar"/>
	<property name="gui.jar" value="${jar.dir}/findbugsGUI.jar"/>
	<property name="test.jar" value="${test.dir}/dumb.jar"/>
	<property name="junittests.jar" value="build/junittests.jar"/>
	<property name="anttask.jar" value="${jar.dir}/findbugs-ant.jar"/>
	<property name="scripts.props" value="etc/script.properties"/>
	<property name="scripts.stamp" value="${build.dir}/scripts.stamp"/>
	<property name="doc.props.file" value="${etc.dir}/doc.properties"/>
	<property name="version.props.file" value="${build.dir}/version.properties"/>
	
	<path id="findbugs.classpath">
	    <pathelement location="${jar.dir}/bcel.jar"/>
	    <pathelement location="${jar.dir}/dom4j-full.jar"/>
	    <pathelement location="${jar.dir}/AppleJavaExtensions.jar"/>
	    <pathelement location="${jar.dir}/junit.jar"/>
	</path>
	
	<path id="tools.classpath">
		<pathelement location="${classes.dir}"/>
		<path refid="findbugs.classpath"/>
	</path>
	
	<patternset id="codebase.data.pats">
		<include name="**/*.properties"/>
		<include name="**/*.png"/>
		<include name="**/*.html"/>
	</patternset>
	
	<patternset id="doc.src.pats">
		<include name="**/*.html"/>
		<include name="**/*.xml"/>
		<include name="**/*.xsl"/>
	</patternset>
	
	<patternset id="doc.img.pats">
		<include name="**/*.png"/>
		<include name="**/*.css"/>
		<include name="**/*.txt"/>
	</patternset>

	<!-- Some of the test classes require a real JDK 1.5 -->
	<condition property="jsr14.excludes"
	           value="IgnoredReturnValue.java,JSR166.java,TryLock.java,UnnecessaryMathTest.java">
		<equals arg1="${build.compiler}"
		        arg2="com.cortexeb.Jsr14CompilerAdapter"/>
	</condition>

	<!-- Default target builds scripts and jars, allowing execution using
		the working directory as FINDBUGS_HOME.  Also build test case jarfile. -->
	<target name="build" depends="jars,scripts,testjar,anttask"/>
	
	<!-- Rebuild from scratch. -->
	<target name="rebuild" depends="clean,build"/>

	<!-- Compile Java source files, and copy other files (properties,
		images, html, XSL stylesheets) that need to be part of the codebase. -->
	<target name="classes">
		<mkdir dir="${classes.dir}"/>
		<!-- Compile Java source files. -->
		<javac srcdir="${src.dir}"
				excludes="${pkg.base}/ba/ir/**,${pkg.base}/ba/type2/**"
				destdir="${classes.dir}"
				source="1.5"
				target="jsr14"
				deprecation="on"
				debug="on">
			<classpath refid="findbugs.classpath"/>
		</javac>
		<!-- Copy codebase data files. -->
		<copy todir="${classes.dir}">
			<fileset dir="${src.dir}">
				<patternset refid="codebase.data.pats"/>
			</fileset>
			<fileset dir="${xslsrc.dir}">
				<include name="*.xsl"/>
			</fileset>
		</copy>
		<!-- Compile JUnit test cases. -->
		<javac srcdir="${junitsrc.dir}"
				excludes="${pkg.base}/ba/type2/**"
				destdir="${classes.dir}"
				source="1.5"
				target="jsr14"
				debug="on">
			<classpath refid="tools.classpath"/>
		</javac>
		<!-- Compile tools. -->
		<javac srcdir="${toolsrc.dir}"
				destdir="${classes.dir}"
				source="1.5"
				target="jsr14"
				debug="on"
				excludes="${pkg.base}/tools/patcomp/**">
			<classpath refid="tools.classpath"/>
		</javac>
		<!-- Compile Ant task. -->
		<javac srcdir="${anttasksrc.dir}"
			destdir="${classes.dir}"
			source="1.5"
			target="jsr14"
			debug="on">
			<classpath refid="tools.classpath"/>
		</javac>
	</target>

	<!-- Validate findbugs.xml and messagesXXX.xml files. -->
	<target name="validate">
		<xmlvalidate lenient="false" failonerror="yes">
			<attribute name="http://apache.org/xml/features/validation/schema" value="true"/>
			<attribute name="http://xml.org/sax/features/namespaces" value="true"/>
			<fileset dir="${etc.dir}" includes="*.xml"/>
		</xmlvalidate>
	</target>
	
	<!-- Build jar files. -->
	<target name="jars" depends="classes, validate">
		<!-- Main engine and command line jar file. -->
		<jar destfile="${engine.jar}"
				manifest="etc/MANIFEST-findbugs.MF">
			<!-- Compiled classes, properties files. -->
			<fileset dir="${classes.dir}">
				<exclude name="${pkg.base}/tools/**"/>
				<exclude name="${pkg.base}/gui/**"/>
				<exclude name="${pkg.base}/detect/**"/>
				<exclude name="${pkg.base}/tools/**"/>
				<exclude name="${pkg.base}/antTask/**"/>
				<exclude name="**/*Test.class"/> <!-- Exclude JUnit tests. -->
				<include name="**/*.class"/>
				<include name="**/*.properties"/>
				<include name="**/*.xsl"/>
			</fileset>
		</jar>
		
		<!-- Core detector plugin. -->
		<jar destfile="${plugin.dir}/coreplugin.jar">
			<fileset dir="etc">
				<include name="findbugs.xml"/>
				<include name="messages*.xml"/>
			</fileset>
			<fileset dir="${classes.dir}">
				<include name="${pkg.base}/detect/*.class"/>
			</fileset>
		</jar>
		
		<!-- Swing GUI jar file. -->
		<jar destfile="${gui.jar}"
				manifest="etc/MANIFEST-findbugsGUI.MF">
			<fileset dir="${classes.dir}">
				<include name="${pkg.base}/gui/**/*.class"/>
				<include name="${pkg.base}/gui/**/*.properties"/>
				<include name="${pkg.base}/gui/**/*.png"/>
				<include name="${pkg.base}/gui/**/*.html"/>
			</fileset>
		</jar>

		<!-- Annotations jar file. -->
		<jar destfile="${annotations.jar}">
			<fileset dir="${classes.dir}">
				<include name="${pkg.base}/annotations/*.class"/>
			</fileset>
		</jar>
	</target>
	
	<!-- See if front-end scripts need to be regenerated. -->
	<target name="checkscripts">
		<condition property="scripts.uptodate">
			<and>
				<!-- Generated scripts must be newer than src scripts -->
				<uptodate>
					<srcfiles dir="." includes="${scriptsrc.dir}/*"/>
					<mapper type="regexp"
						from="^src(/|\\)scripts(/|\\)(.*)$$"
						to="${scripts.dir}/\3"/>
				</uptodate>
				<!-- And, generated scripts must be newer than etc/script.properties -->
				<uptodate targetfile="${scripts.stamp}">
					<srcfiles file="${scripts.props}"/>
				</uptodate>
			</and>
		</condition>
	</target>
	
	<!-- Generate front-end scripts. -->
	<target name="scripts" depends="checkscripts" unless="scripts.uptodate">
		<loadproperties srcFile="${scripts.props}"/>

		<filterset id="script.filters">
			<filter token="GET_FBHOME" value="${script.get.fbhome}" />
			<filter token="SET_DEFAULT_JAVA" value="${script.set.default.java}"/>
			<filter token="WRAP_JAVA" value="${script.wrap.java}"/>
			<filter token="WRAP_JAR" value="${script.wrap.jar}"/>
			<filter token="DEFINE_ESCAPE_ARG" value="${script.define.escape_arg}"/>
		</filterset>

		<copy todir="${scripts.dir}" overwrite="true">
			<fileset dir="${scriptsrc.dir}"/>
			<filterset refid="script.filters"/>
		</copy>

		<!-- Make the Unix scripts executable. -->
		<chmod dir="${scripts.dir}" perm="a+x" includes="*" excludes="*.bat"/>

		<touch file="${scripts.stamp}"/>
	</target>
	
	<!-- Test cases (for detectors) -->
	<target name="testjar" depends="classes">
		<javac srcdir="${test.dir}"
		       excludes="${jsr14.excludes}"
		       destdir="${test.dir}"
		       source="1.5"
		       debug="on">
			<classpath refid="tools.classpath"/>
		</javac>
		<jar destfile="${test.jar}">
			<fileset dir="${test.dir}">
				<include name="**/*.class"/>
			</fileset>
		</jar>
	</target>
	
	<!-- Ant task jar file. -->
	<target name="anttask" depends="classes">
		<jar destfile="${anttask.jar}">
			<fileset dir="${classes.dir}">
				<include name="${pkg.base}/anttask/**"/>
			</fileset>
			<fileset dir="${anttasksrc.dir}">
				<include name="${pkg.base}/anttask/*.properties"/>
			</fileset>
		</jar>
	</target>
	
	<!-- JUnit test cases -->
	<target name="junittests" depends="classes">
		<jar destfile="${junittests.jar}">
			<fileset dir="${classes.dir}">
				<exclude name="${pkg.base}/detect/**"/>
				<include name="**/*Test.class"/>
			</fileset>
		</jar>
	</target>

	<!-- Run JUnit test cases -->
	<target name="runjunit" depends="junittests,jars">
		<echo>Running JUnit test cases for FindBugs...</echo>
		<java dir="."
			fork="true"
			failonerror="true"
			classname="edu.umd.cs.findbugs.tools.junit.JUnitJarRunner">
			<jvmarg value="-Dfindbugs.home=."/>
			<classpath refid="tools.classpath"/>
			<arg value="${junittests.jar}"/>
			<arg value="${engine.jar}"/>
		</java>
	</target>

	<!-- Get version properties. -->
	<target name="version" depends="classes">
		<java classpathref="tools.classpath"
			output="${version.props.file}"
			classname="edu.umd.cs.findbugs.Version"
			failonerror="true">
			<arg value="-props"/>
		</java>
		
		<loadproperties srcfile="${version.props.file}"/>
	</target>
	
	<!-- Generate formatted documentation. -->
	<target name="docs" depends="docfiles,manual"/>
	
	<target name="bugdesc">
		<java classname="edu.umd.cs.findbugs.tools.html.PrettyPrintBugDescriptions"
			fork="true"
			output="${bugdesc.output}">
			<jvmarg value="-Dfindbugs.home=."/>
			<jvmarg value="-Dfindbugs.desc.unabridged=${bugdesc.unabridged}"/>
			<classpath refid="tools.classpath"/>
			<arg value="${bugdesc.title}"/>
			<arg value="${doc.html.gen.header}"/>
			<arg value="${doc.html.gen.beginBody}"/>
			<arg value="${bugdesc.prologue}"/>
			<arg value="${doc.html.gen.endBody}"/>
		</java>
	</target>
	
	<target name="docfiles" depends="classes,version">
		<mkdir dir="${doc.dir}"/>
		
		<!-- Get HTML doc properties -->
		<loadproperties srcFile="${doc.props.file}"/>
		
		<!-- Generate bug descriptions. -->
		<antcall target="bugdesc">
			<param name="bugdesc.output" value="${docsrc.dir}/bugDescriptions.html"/>
			<param name="bugdesc.title" value="FindBugs Bug Descriptions"/>
			<param name="bugdesc.prologue" value="${doc.html.gen.bugDescriptions.prologue}"/>
			<param name="bugdesc.unabridged" value="false"/>
		</antcall>
		<antcall target="bugdesc">
			<param name="bugdesc.output" value="${docsrc.dir}/allBugDescriptions.html"/>
			<param name="bugdesc.title" value="FindBugs Bug Descriptions (Unabridged)"/>
			<param name="bugdesc.prologue" value="${doc.html.gen.allBugDescriptions.prologue}"/>
			<param name="bugdesc.unabridged" value="true"/>
		</antcall>

		<!-- Filter set used for generating text substitution values for
			documentation. -->
		<filterset id="doc.filters">
			<filter token="VERSION" value="${release.number}" />
			<filter token="RELEASE_DATE" value="${release.date}" />
			<filter token="ECLIPSE_CORE_VERSION" value="${eclipse.core.version}"/>
			<filter token="ECLIPSE_UI_VERSION" value="${eclipse.ui.version}" />
			<filter token="WEBSITE" value="${findbugs.website}"/>
			<filter token="DOWNLOADS_WEBSITE" value="${findbugs.downloads.website}"/>
			<filter token="HTML_XSL_STYLESHEET" value="${xsl.stylesheet.home}/html/chunk.xsl" />
<!--
			<filter token="ECLIPSE_XSL_STYLESHEET" value="${eclipse.xsl.stylesheet}" />
-->
			<filter token="HTML_SIDEBAR" value="${doc.html.sidebar}"/>
			<filter token="HTML_FOOTER" value="${doc.html.footer}"/>
		</filterset>  
		
		<copy todir="${doc.dir}">
			<filterset refid="doc.filters"/>
			<fileset dir="${docsrc.dir}">
				<patternset refid="doc.src.pats"/>
			</fileset>
		</copy>
		
		<copy todir="${doc.dir}">
			<fileset dir="${docsrc.dir}">
				<patternset refid="doc.img.pats"/>
			</fileset>
		</copy>
		
	</target>

	<!-- Format the manual as HTML. -->
	<target name="manual" depends="docfiles">
		<java fork="true" dir="${doc.dir}" failonerror="true" classname="com.icl.saxon.StyleSheet" >
			<classpath>
				<pathelement location="${saxon.home}/saxon.jar"/>
				<pathelement path="${java.class.path}"/>
			</classpath>
			<arg value="manual.xml" />
			<arg value="manual.xsl" />
		</java>
	</target>
	
	<!-- Generate jnlp jars -->
	<target name="jnlp" depends="jars">
		<mkdir dir="${jnlp.dir}/plugin"/>
		<copy todir="${jnlp.dir}" file="${engine.jar}"/>
		<copy todir="${jnlp.dir}" file="${gui.jar}"/>
		<copy todir="${jnlp.dir}" file="${jar.dir}/bcel.jar"/>
		<copy todir="${jnlp.dir}" file="${jar.dir}/dom4j-full.jar"/>		
		<copy todir="${jnlp.dir}/plugin" file="${plugin.dir}/coreplugin.jar"/>
		<input message="Enter keystore password:"  addproperty="password"/>
		<signjar keystore="findbugs.keystore" alias="findbugs" storepass="${password}" keypass="${password}">
			<fileset dir="${jnlp.dir}">
				<include name="**/*.jar"/>
			</fileset>
		</signjar>
	</target>
	
	<!-- Generate binary and source distributions. -->
	<target name="dist" depends="bindist,srcdist,jnlp"/>
	
	<!-- Generate binary distribution (both .zip and .tar.gz) -->
	<target name="bindist" depends="rebuild,docs">
		<patternset id="bindist.miscfile.pats">
			<include name="README.txt"/>
			<include name="LICENSE.txt"/>
			<include name="bin/*.bat"/>
			<include name="lib/buggy.icns"/>
			<include name="src/xsl/*.xsl"/> <!-- Bug #1187977 -->
		</patternset>
		
		<patternset id="bindist.jar.pats">
			<include name="lib/*.jar"/>
			<include name="plugin/*.jar"/>
			<exclude name="lib/AppleJavaExtensions.jar"/>
			<exclude name="lib/junit.jar"/>
			<exclude name="lib/plastic.jar"/>
		</patternset>
		
		<patternset id="bindist.unixscript.pats">
			<include name="bin/*"/>
			<exclude name="bin/*.bat"/>
		</patternset>

		<zip destfile="${build.dir}/findbugs-${release.number}.zip" compress="true">
			<zipfileset prefix="findbugs-${release.number}" dir=".">
				<patternset refid="bindist.miscfile.pats"/>
			</zipfileset>
			<zipfileset prefix="findbugs-${release.number}" dir="." filemode="555">
				<patternset refid="bindist.unixscript.pats"/>
			</zipfileset>
			<zipfileset prefix="findbugs-${release.number}" dir=".">
				<patternset refid="bindist.jar.pats"/>
			</zipfileset>
			<zipfileset prefix="findbugs-${release.number}/doc" dir="${doc.dir}">
				<patternset refid="doc.src.pats"/>
				<patternset refid="doc.img.pats"/>
			</zipfileset>
		</zip>

		<tar destfile="${build.dir}/findbugs-${release.number}.tar.gz" compression="gzip">
			<tarfileset prefix="findbugs-${release.number}" dir=".">
				<patternset refid="bindist.miscfile.pats"/>
			</tarfileset>
			<tarfileset prefix="findbugs-${release.number}" dir="." mode="555">
				<patternset refid="bindist.unixscript.pats"/>
			</tarfileset>
			<tarfileset prefix="findbugs-${release.number}" dir=".">
				<patternset refid="bindist.jar.pats"/>
			</tarfileset>
			<tarfileset prefix="findbugs-${release.number}/doc" dir="${doc.dir}">
				<patternset refid="doc.src.pats"/>
				<patternset refid="doc.img.pats"/>
			</tarfileset>
		</tar>

	</target>

	<!-- Build source distribution. -->
	<target name="srcdist" depends="docs">
		<mkdir dir="${build.dir}/src"/>
		<delete dir="${build.dir}/src/findbugs-${release.number}"/>

		<cvs cvsRoot="daveho@cvs.sourceforge.net:/cvsroot/findbugs"
			cvsRsh="ssh"
			dest="${build.dir}/src"
			command="export -r HEAD -d findbugs-${release.number} findbugs"/>
		
		<zip destfile="${build.dir}/findbugs-${release.number}-source.zip" compress="true">
			<zipfileset dir="${build.dir}/src" includes="findbugs-${release.number}/**"/>
			<zipfileset prefix="findbugs-${release.number}/doc" dir="${doc.dir}">
				<patternset refid="doc.src.pats"/>
				<patternset refid="doc.img.pats"/>
			</zipfileset>
		</zip>
	</target>
	
	<!-- Delete generated files. -->
	<target name="clean">
		<delete>
			<fileset dir="${scripts.dir}" includes="*" excludes="findbugs.bat"/>
		</delete>
		<delete dir="build"/>
		<delete>
			<fileset dir="${test.dir}" includes="*.class,*.jar"/>
		</delete>
		<delete file="${engine.jar}"/>
		<delete file="${coreplugin.jar}"/>
		<delete file="${gui.jar}"/>
		<delete file="${anttask.jar}"/>
	</target>

    <target name="apiJavadoc">
       <delete dir="${apiDoc.dir}"/>
       <mkdir dir="${apiDoc.dir}"/>
      <javadoc access="protected" 
       author="true" 
	    packagenames="*"
       classpath="lib/bcel.jar:lib/junit.jar:lib/dom4j-full.jar:lib/AppleJavaExtensions.jar"
        destdir="${apiDoc.dir}" 
        doctitle="FindBugs API Documentation" 
	    nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar= "false" notree="false" 
        sourcepath="src/java" splitindex="true" use="true" version="true"/>
		</target>

    <target name="annotationJavadoc">
       <delete dir="${annotationDoc.dir}"/>
       <mkdir dir="${annotationDoc.dir}"/>
      <javadoc access="public" 
       classpath="lib/bcel.jar:lib/junit.jar:lib/dom4j-full.jar:lib/AppleJavaExtensions.jar"
        destdir="${annotationDoc.dir}" 
	    packagenames="edu.umd.cs.findbugs.annotations"
        doctitle="FindBugs Annotation Documentation" 
	    nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar= "false" notree="false" 
        sourcepath="src/java" splitindex="true" use="true" version="true"/>
		</target>

	
</project>

<!-- vim:set ts=4: -->
