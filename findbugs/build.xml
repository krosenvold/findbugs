<!--
  Ant build script for FindBugs
  Contributed by Mike Fagan <mfagan@tde.com>
  With changes by David Hovemeyer <daveho@cs.umd.edu>

  If you are building FindBugs for the first time, please see
  the manual for important information.  You can find it in
  "doc/manual/index.html" in the FindBugs directory, or online at

     http://www.cs.umd.edu/~pugh/java/bugs/manual/index.html

  The general idea behind building FindBugs is that the top-level
  working directory (i.e., the directory containing "build.xml")
  looks like a findbugs binary installation (once the default "build"
  target has executed).

  The "release" target builds an actual binary installation
  by copying files and directories from the top-level working
  directory into a subdirectory of build/release.
-->

<project name="find-bugs" default="build">


    <!--
      *****************************************************************
      All properties that need to be customized for your system
      (e.g., location of third-party libraries) are
      contained in a separate properties file, build.properties.

      You should not need to change anything in this file.
      *****************************************************************
    -->

    <property file="build.properties"/>

    <property name="findbugs.dir" value="." />
    <property name="findbugs.src.dir" value="${findbugs.dir}/src/java" />
    <property name="anttask.src.dir" value="${findbugs.dir}/src/antTask" />
    <property name="tools.src.dir" value="${findbugs.dir}/src/tools"/>
    <property name="findbugs.jar.name" value="findbugs.jar" />
    <property name="findbugsgui.jar.name" value="findbugsGUI.jar" />
    <property name="coreplugin.jar.name" value="coreplugin.jar" />
    <property name="anttask.jar.name" value="findbugs-ant.jar" />
    <property name="doc.src.dir" value="${findbugs.dir}/src/doc" />
    <property name="doc.dir" value="${findbugs.dir}/doc" />
    <property name="build.dir" value="${findbugs.dir}/build" />
    <property name="jar.dir" value="lib" />
    <property name="script.dir" value="bin" />
    <property name="plugin.dir" value="plugin" />
    <property name="class.dir" value="${build.dir}/classes" />
    <property name="tools.dir" value="${build.dir}/tools"/>
    <property name="test.dir" value="${findbugs.dir}/test" />
    <property name="release.prop.file" value="${build.dir}/release.properties" />
    <property name="html.xsl.stylesheet" value="${xsl.stylesheet.home}/html/chunk.xsl" />
    <property name="fo.xsl.stylesheet" value="${xsl.stylesheet.home}/fo/docbook.xsl" />

    <!-- Classpath for compiling FindBugs. -->
    <path id="classpath">
      <pathelement location="${jar.dir}/bcel.jar" />
      <pathelement location="${jar.dir}/dom4j-full.jar" />
    </path>

    <!-- Classpath for running Saxon -->
    <path id="saxon.classpath">
      <pathelement location="${saxon.home}/saxon.jar"/>
      <pathelement path="${java.class.path}"/>
    </path>

    <!-- Classpath for running FOP -->
    <path id="fop.classpath">
      <pathelement path="${fop.home}/build/fop.jar" />
      <fileset dir="${fop.home}/lib">
        <include name="**/*.jar"/>
      </fileset>
      <pathelement path="${java.class.path}"/>
    </path>

    <target name="clean">
      <delete dir="${build.dir}" />
      <delete dir="${plugin.dir}" />
      <delete dir="${doc.dir}" />
      <delete file="${release.prop.file}" />
      <delete file="${jar.dir}/${findbugs.jar.name}" />
      <delete file="${jar.dir}/${findbugsgui.jar.name}" />
      <delete file="${jar.dir}/${anttask.jar.name}" />
      <delete>
        <fileset dir="${test.dir}" includes="*.class" />
        <fileset dir="${test.dir}" includes="*.jar" />
      </delete>
    </target>

    <target name="init" >
      <mkdir dir="${jar.dir}" />
      <mkdir dir="${plugin.dir}" />
      <mkdir dir="${class.dir}" />
      <mkdir dir="${doc.dir}" />
      <mkdir dir="${build.dir}" />
      <mkdir dir="${tools.dir}"/>
    </target>

    <!-- Target to compile classes. -->
    <target name="classes" depends="init">
      <javac srcdir="${findbugs.src.dir}" destdir="${class.dir}"
             source="1.5"
             debug="true"
             compiler="com.cortexeb.Jsr14CompilerAdapter">
        <classpath refid="classpath" />
      </javac>
<!--
      <javac srcdir="${findbugs.src.dir}" destdir="${class.dir}"
             source="1.5"
             target="1.5"
             debug="true">
        <classpath refid="classpath" />
      </javac>
-->
    </target>

    <!-- Target to build jar file for the main engine. -->
    <target name="findbugs" depends="classes">
      <copy todir="${class.dir}">
        <fileset dir="${findbugs.src.dir}" includes="**/*.properties"/>
      </copy>
      <copy file="${findbugs.dir}/etc/summary.xsl" todir="${class.dir}" />

      <!--
        FindBugs engine - all classes except those in the GUI,
        the Detector implementations (which are part of the core plugin),
        and the Ant task (which is put in its own Jar file).
      -->
      <jar destfile="${jar.dir}/${findbugs.jar.name}"
           basedir="${class.dir}" manifest="${findbugs.dir}/etc/MANIFEST-findbugs.MF">
        <exclude name="edu/umd/cs/findbugs/gui/**" />
        <exclude name="edu/umd/cs/findbugs/detect/*" />
        <exclude name="*.xml" />
        <exclude name="edu/umd/cs/findbugs/anttask/**" />
      </jar>
    </target>

    <!-- Target to build the core plugin.
         This is all of the standard bug pattern detectors.  -->
    <target name="coreplugin" depends="classes">

      <copy file="etc/findbugs.xml" todir="${class.dir}" />
      <copy file="etc/messages.xml" todir="${class.dir}" />
      <copy file="etc/messages_ja.xml" todir="${class.dir}" />

      <jar destfile="${plugin.dir}/${coreplugin.jar.name}" basedir="${class.dir}">
         <include name="*.xml" />
         <include name="edu/umd/cs/findbugs/detect/*.class" />
      </jar>

    </target>

    <!-- Target to build the GUI jar file. -->
    <target name="findbugsgui" depends="classes">
      <copy todir="${class.dir}">
        <fileset dir="${findbugs.src.dir}" includes="**/*.png"/>
        <fileset dir="${findbugs.src.dir}" includes="**/*.html"/>
      </copy>

      <!--
        When building the Jar file for the GUI, we just need the contents
        of the edu/umd/cs/findbugs/gui directory (and subdirectories).
        The main engine is picked up by having findbugs.jar in the
        Class-Path attribute of the manifest for findbugsGUI.jar.
      -->
      <jar destfile="${jar.dir}/${findbugsgui.jar.name}"
           manifest="${findbugs.dir}/etc/MANIFEST-findbugsGUI.MF">
        <fileset dir="${class.dir}" includes="edu/umd/cs/findbugs/gui/*" />
        <fileset dir="${class.dir}" includes="edu/umd/cs/findbugs/gui/help/*" />
      </jar>
    </target>

    <!-- Target to build the anttask -->
    <target name="anttask" depends="findbugs">
      <javac srcdir="${anttask.src.dir}" debug="true" destdir="${class.dir}" >
        <classpath refid="classpath" />
      </javac>
 
      <jar destfile="${jar.dir}/${anttask.jar.name}"
          basedir="${class.dir}" includes="edu/umd/cs/findbugs/anttask/**" />
    </target>

    <!-- Build jar file of test cases.  -->
    <target name="testjar" depends="init,anttask" >
    <taskdef name="findbugs"
        classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
            <classpath>
                <pathelement location="${jar.dir}/${findbugs.jar.name}"/>
                <pathelement location="${jar.dir}/${anttask.jar.name}"/>
            </classpath>
        </taskdef>
       <javac srcdir="${test.dir}" excludes="IgnoredReturnValue.java,TryLock.java" debug="true" />
       <jar destfile="${test.dir}/dumb.jar" basedir="${test.dir}" includes="*.class"
            excludes="IgnoredReturnValue*.class,TryLock*.class" />
        <findbugs home="." reportLevel="low"
                output="text" outputFile="${test.dir}/dumb.bugs">
          <class location="${test.dir}/dumb.jar"/>
          </findbugs>
    </target>

    <!-- Build test cases that require JSR166 library. -->
    <target name="jsr166test">
       <javac srcdir="${test.dir}" includes="IgnoredReturnValue.java,TryLock.java" debug="true" />
       <jar destfile="${test.dir}/jsr166test.jar" basedir="${test.dir}"
            includes="IgnoredReturnValue*.class,TryLock*.class" />
    </target>

    <!-- Target to build the Eclipse plugin classpath extractor. -->
    <target name="eclipseClasspath" depends="init">
      <javac srcdir="${tools.src.dir}" destdir="${tools.dir}"
             source="1.5"
             debug="true">
        <classpath refid="classpath"/>
      </javac> 
    </target>

    <!-- Target to get the release version info. -->
    <target name="version" depends="classes">
      <java classname="edu.umd.cs.findbugs.Version" 
             failonerror="true" output="${release.prop.file}">
         <classpath>
           <pathelement location="${class.dir}"/>
         </classpath>
         <arg value="-props"/> 
      </java>
      <loadproperties srcFile="${release.prop.file}" />
      <property name="release.dir" value="${build.dir}/bin/findbugs-${release.number}" />
    </target>

    <!-- Target to generate documentation files from their sources. -->
    <target name="docfiles" depends="version">
       <copy todir="${doc.dir}">
         <fileset dir="${doc.src.dir}" includes="**/*.png"/>
       </copy>

       <copy todir="${doc.dir}">
         <fileset dir="${doc.src.dir}" excludes="**/*.png"/>
         <!--
           Perform substitutions on the documentation files.
           This is how we ensure that things like version number,
           release date, etc. are correct in the generated docs.
           It also tells the doc formatting tools where to find
           stylesheets and the like.
         -->
         <filterset>
            <filter token="VERSION" value="${release.number}" />
            <filter token="RELEASE_DATE" value="${release.date}" />
            <filter token="HTML_XSL_STYLESHEET" value="${html.xsl.stylesheet}" />
        </filterset>  
      </copy>

      <!-- The manual is up to date as long as the generated HTML
           file are newer than manual.xml and manual.xsl. -->
      <uptodate property="manual.build.notRequired" >
        <srcfiles dir="${doc.dir}" includes="manual.xml,manual.xsl" />
        <mapper type="merge" to="manual/index.html" />
      </uptodate>
    </target>

    <!-- Target to build the manual. -->
    <target name="manual" depends="docfiles" unless="manual.build.notRequired" >
       <mkdir dir="${doc.dir}/manual" />

       <!-- Format the manual as HTML. -->
       <java fork="true" dir="${doc.dir}" failonerror="true" classname="com.icl.saxon.StyleSheet" >
         <classpath refid="saxon.classpath" />
         <arg value="manual.xml" />
         <arg value="manual.xsl" />
       </java>

       <!-- Format the manual as PDF.  This is disabled for now. -->
<!--
       <java fork="true" dir="${doc.dir}" failonerror="true" classname="com.icl.saxon.StyleSheet" >
         <classpath refid="saxon.classpath" />
         <arg value="-o" />
         <arg value="${doc.dir}/manual.fo" />
         <arg value="manual.xml" />
         <arg value="${fo.xsl.stylesheet}" />
       </java>
       <java fork="true" dir="${doc.dir}" failonerror="true" classname="org.apache.fop.apps.Fop">
         <classpath refid="fop.classpath" />
         <arg value="manual.fo" />
         <arg value="manual.pdf" />
       </java>
-->
    </target>

    <!-- Target to build the docs. -->
    <target name="docs" depends="docfiles,manual">
    </target>

    <!-- Default target: just compile the code
         and build the Jar files. -->
    <target name="build" depends="findbugs,coreplugin,findbugsgui,anttask,testjar" />

    <!-- Rebuild. -->
    <target name="rebuild" depends="clean,build" />

    <!-- Compile the code and format the docs. -->
    <target name="buildAll" depends="build,docs" />

    <!-- Target to build the release. This just means copying generated files
         (code and docs). -->
    <target name="release" depends="buildAll">

       <property name="release.base" value="findbugs-${release.number}" />
       <property name="bin.release.scripts"
                 value="${release.base}/bin/findbugs,${release.base}/bin/mergeResults,${release.base}/bin/bugHistory" />
       <property name="src.release.scripts"
                value="${bin.release.scripts},${release.base}/etc/createXML,${release.base}/etc/runTests,${release.base}/etc/summarizeBugs,${release.base}/etc/diffBugSummaries" />

       <copy todir="${release.dir}/lib">
         <fileset dir="${jar.dir}" includes="**/*.jar" excludes="plastic.jar"  />
       </copy>
       <copy todir="${release.dir}/plugin">
         <fileset dir="${plugin.dir}" includes="**/*.jar"/>
       </copy>
       <copy todir="${release.dir}/doc">
         <fileset dir="${doc.dir}" />
       </copy>
       <copy todir="${release.dir}/bin">
         <fileset dir="${script.dir}" />
       </copy>
       <chmod perm="a+rx">
         <fileset dir="${build.dir}/bin" includes="${src.release.scripts}" />
       </chmod>
       <copy file="LICENSE.txt" todir="${release.dir}" />
       <copy file="README.txt" todir="${release.dir}" />
    </target>

    <!-- Create binary distribution files (.tar.gz and .zip) -->
    <target name="bindist" depends="release">
      <mkdir dir="${build.dir}/bin" />
      <tar tarfile="${build.dir}/bin/findbugs-${release.number}.tar.gz"
           longfile="gnu"
           compression="gzip">
         <tarfileset dir="${build.dir}/bin" includes="findbugs-${release.number}/**" excludes="${bin.release.scripts}" />
         <tarfileset dir="${build.dir}/bin" includes="${bin.release.scripts}" mode="555" />
      </tar>
      <zip destfile="${build.dir}/bin/findbugs-${release.number}.zip">
         <zipfileset dir="${build.dir}/bin" includes="findbugs-${release.number}/**" excludes="${bin.release.scripts}" />
         <zipfileset dir="${build.dir}/bin" includes="${bin.release.scripts}" filemode="555" />
      </zip>
    </target>

    <!-- Create a source distribution. -->
    <target name="srcdist" depends="release" >
       <mkdir dir="${build.dir}/src" />
       <delete dir="${build.dir}/src/findbugs-${release.number}" />

       <!-- Export the code from CVS. -->
       <cvs cvsRoot="/fs/pugh/p/cvs"
            dest="${build.dir}/src"
            command="export -r HEAD -d findbugs-${release.number} findbugsAll" />

       <!-- Copy generated documentation -->
       <copy todir="${build.dir}/src/findbugs-${release.number}/doc" >
         <fileset dir="${doc.dir}" />
       </copy>

       <!-- Put it in a tarball. -->
       <tar tarfile="${build.dir}/src/findbugs-${release.number}-source.tar.gz"
            compression="gzip">
         <tarfileset dir="${build.dir}/src" includes="findbugs-${release.number}/**" excludes="${src.release.scripts}" />
         <tarfileset dir="${build.dir}/src" includes="${src.release.scripts}" mode="555" />
       </tar>
    </target>

    <!-- Update the FindBugs web page. -->
    <property name="findbugs.web.dir" value="/fs/www/users/pugh/java/bugs" />
<!--
    <property name="findbugs.web.dir" value="/fs/www/users/daveho/findbugs" />
-->
    <target name="web" depends="docs" >
      <copy todir="${findbugs.web.dir}" >
        <fileset dir="${doc.dir}" />
      </copy>
    </target>

</project>

