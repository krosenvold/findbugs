#! /usr/bin/perl

# I used this script to generate the "findbugs.xml" file for the
# standard FindBugs bug pattern detectors as part of converting
# FindBugs to a plugin architecture.

# See doc/AddingDetectors for info on the format of "findbugs.xml".

package Pattern;

sub new  {
	my ($class, $type) = @_;
	my $self = bless {}, $class;

	$self->{type} = $type;

	return $self;
}
sub getType { my ($self) = @_; return  $self->{type}; }
sub setAbbrev { my ($self, $abbrev) = @_; $self->{abbrev} = $abbrev; }
sub getAbbrev { my ($self) = @_; return $self->{abbrev}; }
sub setShortDesc { my ($self, $shortDesc) = @_; $self->{shortDesc} = $shortDesc; }
sub getShortDesc { my ($self) = @_; return $self->{shortDesc}; }
sub setLongDesc { my ($self, $longDesc) = @_; $self->{longDesc} = $longDesc; }
sub getLongDesc { my ($self) = @_; return $self->{longDesc}; }
sub setDetailText { my ($self, $detailText) = @_; $self->{detailText} = $detailText; }
sub getDetailText { my ($self) = @_; return $self->{detailText}; }

package Detector;

sub new {
	my ($class, $javaClass) = @_;
	my $self = bless {}, $class;
	$self->{javaClass} = $javaClass;
	$self->{patternList} = [];
	return $self;
}
sub getJavaClass { my ($self) = @_; return $self->{javaClass}; }
sub addPattern {
	my ($self, $pattern) = @_;
	push @{$self->{patternList}}, $pattern;
}
sub getPatterns {
	my ($self) = @_;
	return sort { my $cmp = $a->getType() <=> $b->getType(); } @{$self->{patternList}};
}

package main;

use strict qw(refs vars);
use FileHandle;

my @tagStack = ();

# Scan properties files to get short and long messages.
# This indirectly creates all of the Pattern objects.
my %patternNameToPattern = ();
scanProperties(new FileHandle("<src/edu/umd/cs/findbugs/FindBugsShortMessages.properties"),
	sub { my ($pattern, $value) = @_; $pattern->setShortDesc($value); });
scanProperties(new FileHandle("<src/edu/umd/cs/findbugs/FindBugsMessages.properties"),
	sub { my ($pattern, $value) = @_; $pattern->setLongDesc($value); });

my @patternTypes = keys %patternNameToPattern;
print "Found ", scalar(@patternTypes), " bug patterns\n";

# Scan the HTML files to get the detail messages.
foreach my $type (@patternTypes) {
	my $htmlDoc = "src/edu/umd/cs/findbugs/gui/help/$type.html";
	my $fh = new FileHandle("<$htmlDoc");
	(defined $fh) || die "Couldn't open $htmlDoc: $!\n";
	my $detailText = '';
	my $state = 0;
	while (<$fh>) {
		if ($state == 0 && /\<h1\>/i) {
			$state = 1;
		} elsif ($state == 1) {
			if (/\<\/body\>/i) {
				$state = 2;
				last;
			} else {
				$detailText .= munchHTML($_);
			}
		}
	}
	$fh->close();
	if ($state != 2) {
		die "Unexpected HTML formatting in $htmlDoc\n";
	}
	my $pattern = $patternNameToPattern{$type};
	$pattern->setDetailText($detailText);
}

# Scan the detector sources to see which patterns are reported from
# which detectors.
my @detectorFiles = split(/\s+/, `ls src/edu/umd/cs/findbugs/detect/*.java`);
my @detectors = ();
my %seenAlready = ();
my $totalPatterns = 0;
print "Found ", scalar(@detectorFiles), " detectors\n";
foreach my $file (@detectorFiles) {
	my $fh = new FileHandle("<$file");
	(defined $fh) || die "Couldn't open $file: $!\n";
	my $pkg = '';
	my $javaClass = '';
	my @patterns = ();
	my $dynamic = 0;
	while (<$fh>) {
		if (/^package (.*);/) {
			$pkg = $1;
		} elsif (/^public class (\S+)/) {
			$javaClass = "$pkg.$1";
		} elsif (/new BugInstance\(\"([A-Z0-9_]+)\"/) {
			push @patterns, $1;
		} elsif (/new BugInstance\(.*\?\s*(\"[A-Z0-9_]+\")\s*:\s*\"([A-Z0-9_]+)\"/) {
			push @patterns, $1;
			push @patterns, $2;
		} elsif (/bugType = \"([A-Z0-9_]+)\";/) {
			push @patterns, $1;
			$dynamic = 1;
		} elsif (/String (bugType|type) =.*\? \"([A-Z0-9_]+)\" : \"([A-Z0-9_]+)\"/) {
			push @patterns, $2;
			push @patterns, $3;
			$dynamic = 1;
		} elsif (/new BugInstance/ && !$dynamic) {
			die "Unrecognized point for reporting in file $file\n";
		}
	}
	$fh->close();
	die "Couldn't find class name of $file\n" if ($javaClass eq '');

	my $detector = new Detector($javaClass);
	push @detectors, $detector;

	my $count=0;
	print "Adding patterns for $javaClass\n";
	foreach my $pattern (@patterns) {
		$pattern =~ s/\"//g;
		if (!exists $seenAlready{$pattern}) {
			$seenAlready{$pattern} = $javaClass;
		} elsif ($seenAlready{$pattern} ne $javaClass) {
			die "Saw pattern $pattern reported from multiple detectors: (current is $javaClass, last was ", $seenAlready{$pattern}, ")\n";
		}
		my $patObj = $patternNameToPattern{$pattern};
		(defined $patObj) || die "Can't find pattern $pattern\n";
		$detector->addPattern($patObj);
		++$count;
	}
	print "Added $count patterns\n";
	$totalPatterns += $count;
}
print "Scanned $totalPatterns patterns in detectors\n";

# Now we can generate findbugs.xml
my $outfh = new FileHandle(">findbugs.xml");
(defined $outfh) || die "Couldn't open findbugs.xml for output: $!\n";

beginNode($outfh, "DetectorPlugin");
foreach my $detector (@detectors) {
	print $outfh "\n";
	beginNode($outfh, "Detector");
	addElement($outfh, "Class", $detector->getJavaClass());
	my @patterns = $detector->getPatterns();
	foreach my $pattern (@patterns) {
		beginNode($outfh, "BugPattern");
		addElement($outfh, "Type", $pattern->getType());
		addElement($outfh, "Abbrev", $pattern->getAbbrev());
		beginNode($outfh, "Description");
		addElement($outfh, "ShortDescription", $pattern->getShortDesc());
		addElement($outfh, "LongDescription", $pattern->getLongDesc());
		beginNode($outfh, "Details");
		print $outfh $pattern->getDetailText();
		endNode($outfh); # Details
		endNode($outfh); # Description
		endNode($outfh); # BugPattern
	}
	endNode($outfh); # Detector
}
print $outfh "\n";
endNode($outfh); # DetectorPlugin



# ----------------------------------------------------------------------
# Subroutines
# ----------------------------------------------------------------------

sub scanProperties {
	my ($fh, $callback) = @_;

	(defined $fh) || die;

	while (<$fh>) {
		if (/^\s*(\S+)\s*=(.*)$/) {
			my ($name, $value) = ($1, $2);
			my $pattern = $patternNameToPattern{$name};
			if (!defined $pattern) {
				$pattern = new Pattern($name);
				$patternNameToPattern{$name} = $pattern;
				#print "[$name]\n";
			}
			$value =~ /([^:]+):/;
			my $abbrev = $1;
			my $prevAbbrev = $pattern->getAbbrev();
			die "Abbrev mismatch $abbrev != $prevAbbrev for $name" if ($prevAbbrev ne '' && $prevAbbrev ne $abbrev) ;
			$pattern->setAbbrev($abbrev);
			$value =~ s/^[^:]+:\s*//;
			&{$callback}($pattern, $value);
		}
	}
	$fh->close();
}

sub munchHTML {
	my ($line) = @_;
	$line =~ s,\&,&amp;,g;
	$line =~ s,\<,&lt;,g;
	$line =~ s,\>,&gt;,g;
	return $line;
}

sub beginNode {
	my ($outfh, $tag) = @_;
	my $indent = '  ' x scalar(@tagStack);
	print $outfh "$indent<$tag>\n";
	push @tagStack, $tag;
}

sub addElement {
	my ($outfh, $tag, $value) = @_;
	my $indent = '  ' x scalar(@tagStack);
	print $outfh "$indent<$tag>$value</$tag>\n";
}

sub endNode {
	my ($outfh) = @_;
	my $tag = (pop @tagStack);
	my $indent = '  ' x scalar(@tagStack);
	print $outfh "$indent</$tag>\n";
}

# vim:ts=4
