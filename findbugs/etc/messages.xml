<?xml version="1.0" encoding="UTF-8"?>

<MessageCollection xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   				   xsi:noNamespaceSchemaLocation="messagecollection.xsd">

  <!--
  **********************************************************************
  Plugin information
  **********************************************************************
  -->
  <Plugin>
    <ShortDescription>Default FindBugs plugin</ShortDescription>
    <Details>
<![CDATA[
<p>
This plugin contains all of the standard FindBugs detectors.
</p>
]]>
    </Details>
  </Plugin>

  <!--
  **********************************************************************
  Detectors
  **********************************************************************
   -->


  <Detector class="edu.umd.cs.findbugs.detect.NoteSuppressedWarnings">
    <Details>
<![CDATA[
<p> Suppresses warnings based on use of the edu.umd.cs.findbugs.annotations.NoteSuppressWarnings annotation.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.NoteCheckReturnValue">
    <Details>
<![CDATA[
<p> Looks for annotations to check return values of a method.
</p>
]]>
    </Details>
  </Detector>


  <Detector class="edu.umd.cs.findbugs.detect.BadUseOfReturnValue">
    <Details>
<![CDATA[
<p> Looks for cases where the return value of a function is discarded
after being checked for non-null.  </p>

]]>
    </Details>
  </Detector>
  <Detector class="edu.umd.cs.findbugs.detect.InheritanceUnsafeGetResource">
    <Details>
<![CDATA[
<p> Looks for uses of this.getClass().getResource(...), which can give
unexpected results if the class is extended by a class in
another package. It is a fast detector</p>

]]>
    </Details>
  </Detector>
  <Detector class="edu.umd.cs.findbugs.detect.InfiniteRecursiveLoop">
    <Details>
<![CDATA[
<p> Looks for an infinite recursive loop. It is a fast detector.</p>
]]>
    </Details>
  </Detector>
  <Detector class="edu.umd.cs.findbugs.detect.VolatileUsage">
    <Details>
<![CDATA[
<p> Looks for bug patterns in the usage of volatile fields. It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.EmptyZipFileEntry">
    <Details>
<![CDATA[
<p> This looks for creation of empty zip file entries. It is a moderately fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.TestingGround">
    <Details>
<![CDATA[
<p> This detector is just a hook for testing new detectors.
Normally, this detector does nothing.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.ResolveAllReferences">
    <Details>
<![CDATA[
<p> Checks that all references call be resolved.  </p>
]]>
    </Details>
  </Detector>


  <Detector class="edu.umd.cs.findbugs.detect.SwitchFallthrough">
    <Details>
<![CDATA[
<p> This detector looks for switch statements containing fall through.
It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindFieldSelfAssignment">
    <Details>
<![CDATA[
<p> This detector looks for places where a field is assigned
by reading the value of the same field.  It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindNonShortCircuit">
    <Details>
<![CDATA[
<p> This detector looks for suspicious uses of non-short-circuiting
boolean operators (<code>|</code> and <code>&amp;</code> instead of
<code>||</code> and <code>&amp;&amp;</code>).</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.DontCatchIllegalMonitorStateException">
    <Details>
<![CDATA[
<p> This detector looks for try-catch blocks that catch an IllegalMonitorStateException.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindFloatMath">
    <Details>
<![CDATA[
<p> This detector looks for uses of floating point math. It is a moderately fast detector.</p>
]]>
    </Details>
  </Detector>
  <Detector class="edu.umd.cs.findbugs.detect.CloneIdiom">
    <Details>
<![CDATA[
<p> This detector looks for violations of the idioms for writing
cloneable classes. It is a fast detector.</p>
]]>
    </Details>
  </Detector>
  <Detector class="edu.umd.cs.findbugs.detect.DroppedException">
    <Details>
<![CDATA[
<p> This detector looks for code where an exception is caught,
but nothing is done to handle the exception.  It is a fast detector.</p>
]]>
    </Details>
  </Detector>
  <Detector class="edu.umd.cs.findbugs.detect.DumbMethods">
    <Details>
<![CDATA[
<p> This detector looks for calls to pointless methods,
such as the no-argument String constructor.
It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindDoubleCheck" >
    <Details>
<![CDATA[
<p> This detector looks for instances of double checked locking.
It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindFinalizeInvocations" >
    <Details>
<![CDATA[
<p> This detector looks for calls to finalize() and other finalizer-related
issues.  It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindHEmismatch" >
    <Details>
<![CDATA[
<p> This detector looks for problems in the definition of the hashCode() and equals()
methods.  It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindNakedNotify" >
    <Details>
<![CDATA[
<p> This detector looks for calls to notify() that don't seem
to modify mutable object state.  It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindReturnRef" >
    <Details>
<![CDATA[
<p> This detector looks for methods that return mutable static data.
It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindRunInvocations" >
    <Details>
<![CDATA[
<p> This detector looks for calls to Thread.run().  It is a fast
detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindSpinLoop" >
    <Details>
<![CDATA[
<p> This detector looks for loops that spin reading from a field.
It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindTwoLockWait" >
    <Details>
<![CDATA[
<p> This detector looks for calls to wait() with two (or more) locks held.
It is a slow detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindUnconditionalWait" >
    <Details>
<![CDATA[
<p> This detector looks for calls to wait() not in a conditional or loop.
It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindUninitializedGet" >
    <Details>
<![CDATA[
<p> This detector looks for reads of uninitialized fields in constructors.
It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindUnsyncGet" >
    <Details>
<![CDATA[
<p> This detector looks for get and set methods where the get is unsynchronized
while the set is synchronized.  It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.InitializationChain" >
    <Details>
<![CDATA[
<p> This detector looks for potentially circular class initialization
dependencies.  It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.IteratorIdioms" >
    <Details>
<![CDATA[
<p> This iterator looks for problems in how Iterator classes are defined.
It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.LockedFields" disabled="true" >
    <Details>
<![CDATA[
<p> This detector looks for fields that are accessed in an inconsistent manner
with respect to locking.  It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.EqStringTest" >
    <Details>
<![CDATA[
<p> This detector looks for comparisons of String objects using the == or !=
operators.
 It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.MutableLock" >
    <Details>
<![CDATA[
<p> This detector looks for synchronization on objects read from
modified fields.  It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.MutableStaticFields" >
    <Details>
<![CDATA[
<p> This detector looks for static fields that may be modified by
malicious code.  It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.Naming" >
    <Details>
<![CDATA[
<p> This detector looks for suspiciously-named methods.  It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.ReadReturnShouldBeChecked" >
    <Details>
<![CDATA[
<p> This detector looks for calls to InputStream.read() or InputStream.skip() where the
return value is ignored.  It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.SerializableIdiom" >
    <Details>
<![CDATA[
<p> This detector looks for potential problems in the implementation
of Serializable classes.  It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.StartInConstructor" >
    <Details>
<![CDATA[
<p> This detector looks for constructors that start threads.  It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindBadForLoop" >
    <Details>
<![CDATA[
<p> This detector looks for incorrect for loops.
</p>
]]>
    </Details>
  </Detector>
  <Detector class="edu.umd.cs.findbugs.detect.UnreadFields" >
    <Details>
<![CDATA[
<p> This detector looks for fields whose value is never read.  It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.WaitInLoop" >
    <Details>
<![CDATA[
<p> This detector looks for calls to wait() that are not in a loop.
It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.BCPMethodReturnCheck" >
    <Details>
<![CDATA[
<p> This detector looks for calls to methods where the return value
is suspiciously ignored.  It is a slow detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindNullDeref">
    <Details>
<![CDATA[
<p> This detector looks for places where a null pointer exception might
occur.  It also looks for redundant comparisons of reference values against
null.  It is a slow detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindOpenStream">
    <Details>
<![CDATA[
<p> This detector looks for IO stream objects which do not escape the
method and do not appear to be closed on all paths out of the method.
It is a slow detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.PreferZeroLengthArrays">
    <Details>
<![CDATA[
<p> This detector looks for methods that return either arrays or an explicit null reference.
Returning a zero length array is generally preferred in this context to returning a null reference.
It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindUselessControlFlow">
    <Details>
<![CDATA[
<p> This detector looks for control flow statements which have no effect.
It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindUnreleasedLock">
    <Details>
<![CDATA[
<p> This detector looks for JSR-166 (<code>java.util.concurrent</code>)
locks which are acquired, but not released on all paths out of the method.&nbsp;
It is a moderately fast detector.&nbsp; Note that in order to use this
detector, you need to have the <code>java.util.concurrent</code> package
in the auxiliary classpath (or be analyzing the package itself).</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindRefComparison">
    <Details>
<![CDATA[
<p> This detector looks for places where two reference values are compared
with the == or != operator, and the class is of a type (such as <code>java.lang.String</code>)
where comparing reference values is generally an error.  It is a slow detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindMismatchedWaitOrNotify">
    <Details>
<![CDATA[
<p> This detector looks for calls to wait(), notify(), or notifyAll()
which do not appear to be made on an object which is currently locked.&nbsp;
It is a moderately fast detector.&nbsp; <b>This detector is disabled because
it is still under development, and produces too many false positives.</b></p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindEmptySynchronizedBlock" >
    <Details>
<![CDATA[
<p> This detector looks for empty synchronized blocks.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindInconsistentSync2" >
    <Details>
<![CDATA[
<p> This detector looks for fields that are accessed in an inconsistent manner
with respect to locking.  It is a slow detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindLocalSelfAssignment2">
    <Details>
<![CDATA[
<p> This detector looks for self assignments of local variables.
It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.IncompatMask">
    <Details>
<![CDATA[
<p> This detector looks for suspicious bitwise logical expressions.
It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.LazyInit">
    <Details>
<![CDATA[
<p> This detector looks for lazy field initialization where the
field is not volatile.  It is a moderately fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindJSR166LockMonitorenter">
    <Details>
<![CDATA[
<p> This detector looks for ordinary synchronization performed
on JSR166 locks.  It is a moderately fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindUncalledPrivateMethods">
    <Details>
<![CDATA[
<p> This detector looks for private methods that are never called.
It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.StringConcatenation">
    <Details>
<![CDATA[
<p> This detector looks for String concatenation in loops using +.
It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.InefficientToArray">
    <Details>
<![CDATA[
<p> This detector looks for code that converts Collections to arrays
using the toArray() method that takes a prototype array, passing
an array argument which is zero-length.
It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.InvalidJUnitTest">
    <Details>
<![CDATA[
<p> This detector looks for JUnit tests that are malformed.
It is a fast detector.</p>
]]>
    </Details>
  </Detector>
  
  <Detector class="edu.umd.cs.findbugs.detect.BadlyOverriddenAdapter">
    <Details>
<![CDATA[
<p> This detector looks for code that extends an Adapter class and overrides a Listener
method with the wrong signature. It is a fast detector.</p>
]]>
    </Details>
  </Detector>
  
  <Detector class="edu.umd.cs.findbugs.detect.BadResultSetAccess">
    <Details>
<![CDATA[
<p> This detector looks for calls to getXXX or setXXX methods of a result set where the
field index is 0. As ResultSet fields start at index 1, this is always a mistake.
It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.SuperfluousInstanceOf">
    <Details>
<![CDATA[
<p> This detector looks for type checks using the instanceof operator where the determination
can be done statically. It is a fast detector.</p>
]]>
    </Details>
  </Detector>
  
  <Detector class="edu.umd.cs.findbugs.detect.BadAppletConstructor">
    <Details>
<![CDATA[
<p>
This detector looks for Applet constructors that call methods in the parent
Applet that rely on the Applet stub. Since this stub isn't initialized until just 
before the init() method, these methods will fail in the constructor. It is a fast detector.
</p>
]]>
    </Details>
  </Detector>
  
  <Detector class="edu.umd.cs.findbugs.detect.UseObjectEquals">
    <Details>
<![CDATA[
<p>
This detector looks calls to equals(java.lang.Object) on arrays, or final classes that do not
override the equals method in the Object class. This means that equals semantics is the same as
==, and probably a mistake.
</p>
]]>    
    </Details>
  </Detector>
  <Detector class="edu.umd.cs.findbugs.detect.SuspiciousThreadInterrupted">
    <Details>
<![CDATA[
<p>
This detector looks for calls to Thread.interrupted() from a non static context. If it is called from
Thread.currentThread().interrupted(), then it is just a useless exercise, just use Thread.interrupted().
However if it is called on an arbitrary thread object, it is most probably an error, as interrupted()
is always called on the current thread.
</p>
]]>    
    </Details>
  </Detector>

<Detector class="edu.umd.cs.findbugs.detect.FindSqlInjection">
<Details>
<![CDATA[
<p>
This detector uses data flow analysis to look for invocations of execute methods
on SQL statements in switch something other than a constant string is passed as an argument.
</p>
]]>
    </Details>
  </Detector>

<Detector class="edu.umd.cs.findbugs.detect.FindDeadLocalStores">
<Details>
<![CDATA[
<p>
This detector looks for assignments to local variables that
are never subsequently read. It is a moderately fast detector.
</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindMaskedFields">
    <Details>
<![CDATA[
<p> This detector looks for class level fields that are masked by
local fields defined in methods.
It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.WrongMapIterator">
    <Details>
<![CDATA[
<p> This detector looks for accessing the value of a Map entry, using a key that was retrieved from
a keySet iterator. It is a fast detector.</p>
]]>
   </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.InstantiateStaticClass">
    <Details>
<![CDATA[
<p> This detector looks for code that creates objects based on classes that only define static methods.
It is a fast detector.</p>
]]>
   </Details>
  </Detector>
  
  <Detector class="edu.umd.cs.findbugs.detect.RuntimeExceptionCapture">
	  <Details>
<![CDATA[
<p> This detector looks for catch clauses that catch Exception,
when no code in the block throws Exception. </p>
]]>
	  </Details>
  </Detector>
  
  <Detector class="edu.umd.cs.findbugs.detect.FindFloatEquality">
      <Details>
<![CDATA[
<p> Looks for floating point equality expressions. A fast detector. </p>
]]>
      </Details>
  </Detector>  
  
  <Detector class="edu.umd.cs.findbugs.detect.FindUnsatisfiedObligation">
    <Details>
<![CDATA[
<p>This detector looks for I/O streams and database resources that
are not cleaned up on all paths out of a method.  This is a slow detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.UnnecessaryMath">
    <Details>
<![CDATA[
<p>This detector looks for code that calls java.lang.Math static methods on constant values,
where the resultant value is a statically known constant. It is faster, and sometimes more 
accurate, to use the constant instead.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindCircularDependencies">
    <Details>
<![CDATA[
<p>This detector looks circular dependencies among classes. It is a fast detector.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.RedundantInterfaces">
    <Details>
<![CDATA[
<p>This detector looks for classes that declare they implement the same interface
as a super class. This is redundant, if a superclass implements an interface, so does
the subclass.</p>
]]>
    </Details>
  </Detector>
  
  <Detector class="edu.umd.cs.findbugs.detect.MultithreadedInstanceAccess">
    <Details>
<![CDATA[
<p>This detector looks for potential problems in implementing the Struts framework.
It is a fast detector.</p>
]]>
    </Details>
  </Detector>
  
  <Detector class="edu.umd.cs.findbugs.detect.PublicSemaphores">
    <Details>
<![CDATA[
<p>This detector looks for public classes that synchronize and use wait(), notify() or notifyAll()
on <b>this</b>. This exposes a synchronization implementation as a public artifact of the class.
Clients of the class may use an instance of the class as it's own synchronizing object, and cause
havoc to the base implementation.
It is a fast detector.</p>
]]>
    </Details>
  </Detector>
  
  <Detector class="edu.umd.cs.findbugs.detect.MethodReturnCheck">
    <Details>
<![CDATA[
<p> This detector looks for calls to methods where the return value
is suspiciously ignored.  It is a fast detector.</p>
]]>
    </Details>
  </Detector>
  
  <Detector class="edu.umd.cs.findbugs.detect.IDivResultCastToDouble">
    <Details>
<![CDATA[
<p>
This detector looks for places where the result of integer division is
cast to double. Often, what was meant was to cast the integer operands
to double and then perform the division.  It is a fast detector.
</p>
]]>
    </Details>
  </Detector>
  <Detector class="edu.umd.cs.findbugs.detect.FindBadCast">
    <Details>
<![CDATA[
<p>
This detector looks for bad casts of object references.
</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindBadCast2">
    <Details>
<![CDATA[
<p>
This detector looks for bad casts of object references using data flow analysis.
</p>
]]>
    </Details>
  </Detector>
  
  <Detector class="edu.umd.cs.findbugs.detect.FindNonSerializableStoreIntoSession">
    <Details>
<![CDATA[
<p>
This detector looks for stores of non serializable objects into Http sessions.
</p>
]]>
    </Details>
  </Detector>
  
  <Detector class="edu.umd.cs.findbugs.detect.BadSyntaxForRegularExpression">
    <Details>
<![CDATA[
<p> This detector looks for regular expressions that have invalid syntax.  </p>
]]>
    </Details>
  </Detector>
  <Detector class="edu.umd.cs.findbugs.detect.FindPuzzlers">
    <Details>
<![CDATA[
<p> This detector problems looks for miscellaneous small errors
mentioned by Joshua Bloch and Neal Gafter in
their work on Programming Puzzlers.
  </p>
]]>
    </Details>
  </Detector>
  
  <Detector class="edu.umd.cs.findbugs.detect.FindSleepWithLockHeld">
	<Details>
		<![CDATA[
		<p>
			This detector looks for calls to Thread.sleep() made with
			a lock held.  It is a slow detector.
		</p>
		]]>
	</Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.DuplicateBranches">
    <Details>
<![CDATA[
<p> This detector looks for if else statements that have the
same code for the two branches, thus rendering the test useless. </p>
]]>
    </Details>
  </Detector>
  
  <Detector class="edu.umd.cs.findbugs.detect.FindBugsSummaryStats">
    <Details>
<![CDATA[
<p> This detector just collects summary statistics information about the analysis process. </p>
]]>
    </Details>
  </Detector>
  
  <!--
  **********************************************************************
  BugPatterns
  **********************************************************************
   -->

  <BugPattern type="SW_SWING_METHODS_INVOKED_IN_SWING_THREAD">
    <ShortDescription>Certain swing methods should only be invoked from the Swing event thread</ShortDescription>
    <LongDescription>Call to swing method in {1} needs to be performed in Swing event thread</LongDescription>
    <Details>
<![CDATA[
<p>(<a href="http://java.sun.com/developer/JDCTechTips/2003/tt1208.html#1">From JDC Tech Tip</a>): The Swing methods
show(), setVisible(), and pack() will create the associated peer for the frame. 
With the creation of the peer, the system creates the event dispatch thread. 
This makes things problematic because the event dispatch thread could be notifying 
listeners while pack and validate are still processing. This situation could result in 
two threads going through the Swing component-based GUI -- it's a serious flaw that 
could result in deadlocks or other related threading issues. A pack call causes 
components to be realized. As they are being realized (that is, not necessarily 
visible), they could trigger listener notification on the event dispatch thread.</p>

]]>
    </Details>
  </BugPattern>


  <BugPattern type="IL_INFINITE_RECURSIVE_LOOP">
    <ShortDescription>An apparent infinite recursive loop.</ShortDescription>
    <LongDescription>There is an apparent infinite recursive loop in {1}.</LongDescription>
    <Details>
<![CDATA[
<p>This method unconditionally invokes itself. This would seem to indicate
an infinite recursive loop that will result in a stack overflow.</p>
]]>
    </Details>
  </BugPattern>


  <BugPattern type="IL_CONTAINER_ADDED_TO_ITSELF">
    <ShortDescription>A container is added to itself.</ShortDescription>
    <LongDescription>A container is added to itself in {1}.</LongDescription>
    <Details>
<![CDATA[
<p>A container is added to itself. As a result, computing the hashCode of this
set will throw a StackOverflowException.
</p>
]]>
    </Details>
  </BugPattern>




  <BugPattern type="VO_VOLATILE_REFERENCE_TO_ARRAY">
    <ShortDescription>A volatile reference to an array doesn't treat the array elements as volatile</ShortDescription>
    <LongDescription>{1} is a volatile reference to an array; the array elements are non-volatile.</LongDescription>
    <Details>
<![CDATA[
<p>This declares a volatile reference to an array, which might not be what
you want. With a volatile reference to an array, reads and writes of
the reference to the array are treated as volatile, but the array elements
are non-volatile. To get volatile array elements, you will need to use
one of the atomic array classes in java.util.concurrent (provided
in Java 5.0).</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="UI_INHERITANCE_UNSAFE_GETRESOURCE">
    <ShortDescription>Usage of GetResource may be unsafe if class is extended</ShortDescription>
    <LongDescription>Usage of GetResource in {1} may be unsafe if class is extended</LongDescription>
    <Details>
<![CDATA[
<p>Calling <code>this.getClass().getResource(...)</code> could give
results other than expected if this class is extended by a class in 
another package.</p>
]]>
    </Details>
  </BugPattern>


  <BugPattern type="TESTING">
    <ShortDescription>Testing</ShortDescription>
    <LongDescription>Test warning generated in {1}</LongDescription>
    <Details>
<![CDATA[
<p>This bug pattern is only generated by new, incompletely implemented
bug detectors.</p>
]]>
    </Details>
  </BugPattern>


  <BugPattern type="AM_CREATES_EMPTY_ZIP_FILE_ENTRY">
    <ShortDescription>Creates an empty zip file entry</ShortDescription>
    <LongDescription>Empty zip file entry created in {1}</LongDescription>
    <Details>
<![CDATA[
<p>The code calls <code>putNextEntry()</code>, immediately
followed by a call to <code>closeEntry()</code>. This results
in an empty ZipFile entry. The contents of the entry
should be written to the ZipFile between the calls to 
<code>putNextEntry()</code> and
<code>closeEntry()</code>.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="AM_CREATES_EMPTY_JAR_FILE_ENTRY">
    <ShortDescription>Creates an empty jar file entry</ShortDescription>
    <LongDescription>Empty jar file entry created in {1}</LongDescription>
    <Details>
<![CDATA[
<p>The code calls <code>putNextEntry()</code>, immediately
followed by a call to <code>closeEntry()</code>. This results
in an empty JarFile entry. The contents of the entry
should be written to the JarFile between the calls to 
<code>putNextEntry()</code> and
<code>closeEntry()</code>.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="IMSE_DONT_CATCH_IMSE">
    <ShortDescription>Dubious catching of IllegalMonitorStateException</ShortDescription>
    <LongDescription>Dubious catching of IllegalMonitorStateException in {1}</LongDescription>
    <Details>
<![CDATA[
<p>IllegalMonitorStateException is generally only
	thrown in case of a design flaw in your code (calling wait or
	notify on an object you do not hold a lock on).</p>
]]>
    </Details>
  </BugPattern>


  <BugPattern type="FL_MATH_USING_FLOAT_PRECISION">
    <ShortDescription>Method performs math using floating point precision</ShortDescription>
    <LongDescription>{1} performs math using floating point precision</LongDescription>
    <Details>
<![CDATA[
<p>
	The method performs math operations using floating point precision.
	Floating point precision is very imprecise. For example,
	16777216.0f + 1.0f = 16777216.0f. Consider using double math instead.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="CN_IDIOM">
    <ShortDescription>Class implements Cloneable but does not define or use clone method</ShortDescription>
    <LongDescription>Class {0} implements Cloneable but does not define or use clone method</LongDescription>
    <Details>
<![CDATA[
<p>
	Class implements Cloneable but does not define or
	use the clone method.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="CN_IDIOM_NO_SUPER_CALL">
    <ShortDescription>clone method does not call super.clone()</ShortDescription>
    <LongDescription>clone method {1} does not call super.clone()</LongDescription>
    <Details>
<![CDATA[
<p> This class defines a clone() method that does not call super.clone(),
and is not final.
If this class ("<i>A</i>") is extended by a subclass ("<i>B</i>"),
and the subclass <i>B</i> calls super.clone(), then it is likely that
<i>B</i>'s clone() method will return an object of type <i>A</i>,
which violates the standard contract for clone().</p>

<p> If all clone() methods call super.clone(), then they are guaranteed
to use Object.clone(), which always returns an object of the correct type.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="DE_MIGHT_DROP">
    <ShortDescription>Method might drop exception</ShortDescription>
    <LongDescription>{1} might drop {3}</LongDescription>
    <Details>
<![CDATA[
  <p> This method might drop an exception.&nbsp; In general, exceptions
  should be handled or reported in some way, or they should be thrown
  out of the method.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="DE_MIGHT_IGNORE">
    <ShortDescription>Method might ignore exception</ShortDescription>
    <LongDescription>{1} might ignore {3}</LongDescription>
    <Details>
<![CDATA[
  <p> This method might ignore an exception.&nbsp; In general, exceptions
  should be handled or reported in some way, or they should be thrown
  out of the method.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="DM_EXIT">
    <ShortDescription>Method invokes System.exit(...)</ShortDescription>
    <LongDescription>{1} invokes System.exit(...), which shuts down the entire virtual machine</LongDescription>
    <Details>
<![CDATA[
  <p> Invoking System.exit shuts down the entire Java virtual machine. This
	should only been done when it is appropriate. Such calls make it 
	hard or impossible for your code to be invoked by other code.
	Consider throwing a RuntimeException instead.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="DM_RUN_FINALIZERS_ON_EXIT">
    <ShortDescription>Method invokes runFinalizersOnExit, one of the most dangerous methods in the Java libraries.  </ShortDescription>
    <LongDescription>{1} invokes runFinalizersOnExit, one of the most dangerous methods in the Java libraries.  </LongDescription>
    <Details>
<![CDATA[
  <p> <em>Never call System.runFinalizersOnExit
or Runtime.runFinalizersOnExit for any reason: they are among the most
dangerous methods in the Java libraries.</em> -- Joshua Bloch</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="DM_STRING_CTOR">
    <ShortDescription>Method invokes dubious new String(String) constructor; just use the argument</ShortDescription>
    <LongDescription>{1} invokes dubious new String(String) constructor; just use the argument</LongDescription>
    <Details>
<![CDATA[
  <p> Using the <code>java.lang.String(String)</code> constructor wastes memory
  because the object so constructed will be functionally indistinguishable
  from the <code>String</code> passed as a parameter.&nbsp; Just use the
  argument <code>String</code> directly.</p>
]]>
    </Details>
  </BugPattern>


  <BugPattern type="DM_STRING_VOID_CTOR">
    <ShortDescription>Method invokes dubious new String() constructor; just use ""</ShortDescription>
    <LongDescription>{1} invokes dubious new String() constructor; just use ""</LongDescription>
    <Details>
<![CDATA[
  <p> Creating a new <code>java.lang.String</code> object using the
  no-argument constructor wastes memory because the object so created will
  be functionally indistinguishable from the empty string constant
  <code>""</code>.&nbsp; Java guarantees that identical string constants
  will be represented by the same <code>String</code> object.&nbsp; Therefore,
  you should just use the empty string constant directly.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="DM_STRING_TOSTRING">
    <ShortDescription>Method invokes toString() method on a String; just use the String</ShortDescription>
    <LongDescription>Method {1} invokes toString() method on a String; just use the String</LongDescription>
    <Details>
<![CDATA[
  <p> Calling <code>String.toString()</code> is just a redundant operation.
  Just use the String.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="DM_GC">
    <ShortDescription>Explicit garbage collection; extremely dubious except in benchmarking code</ShortDescription>
    <LongDescription>{1} forces garbage collection; extremely dubious except in benchmarking code</LongDescription>
    <Details>
<![CDATA[
  <p> Code explicitly invokes garbage collection.
  Except for specific use in benchmarking, this is very dubious.</p>
  <p>In the past, situations where people have explicitly invoked 
  the garbage collector in routines such as close or finalize methods
  has led to huge performance black holes. Garbage collection 
	can be expensive. Any situation that forces hundreds or thousands
	of garbage collections will bring the machine to a crawl.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="DM_BOOLEAN_CTOR">
    <ShortDescription>Method invokes dubious Boolean constructor; use Boolean.valueOf(...) instead</ShortDescription>
    <LongDescription>{1} invokes dubious Boolean constructor; use Boolean.valueOf(...) instead</LongDescription>
    <Details>
<![CDATA[
  <p> Creating new instances of <code>java.lang.Boolean</code> wastes
  memory, since <code>Boolean</code> objects are immutable and there are
  only two useful values of this type.&nbsp; Use the <code>Boolean.valueOf()</code>
  method to create <code>Boolean</code> objects instead.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="DM_STRING_EMPTY_EQUALS">
    <ShortDescription>Method invokes dubious String.equals(""); use String.length() == 0 instead</ShortDescription>
    <LongDescription>Method {1} invokes dubious String.equals(""); use String.length() == 0 instead</LongDescription>
    <Details>
<![CDATA[
  <p> An object is compared to the empty String object using the equals() method here.
      Checking that the String object's length is zero may be faster, and removes String constants from the class file.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="DM_CONVERT_CASE">
    <ShortDescription>Method invokes dubious String.toUpperCase() or String.toLowerCase; use the Locale parameterized version instead</ShortDescription>
    <LongDescription>Method {1} invokes dubious String.toUpperCase() or String.toLowerCase; use the Locale parameterized version instead</LongDescription>
    <Details>
<![CDATA[
  <p> A String is being converted to upper or lowercase, using the platform's default encoding. This may
      result in improper conversions when used with international characters. Use the </p>
      <table><tr><td>String.toUpperCase( Locale l )</td></tr><tr><td>String.toLowerCase( Locale l )</td></tr></table>
      <p>versions instead.</p>
]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="DM_BOXED_PRIMITIVE_TOSTRING">
    <ShortDescription>Method allocates a boxed primitive just to call toString</ShortDescription>
    <LongDescription>Method {1} allocates a boxed primitive just to call toString</LongDescription>
    <Details>
<![CDATA[
  <p>A boxed primitive is allocated just to call toString(). It is more effective to just use the static
  form of toString which takes the primitive value. So,</p>
  <table>
     <tr><th>Replace...</th><th>With this...</th></tr>
     <tr><td>new Integer(1).toString()</td><td>Integer.toString(1)</td></tr>
     <tr><td>new Long(1).toString()</td><td>Long.toString(1)</td></tr>
     <tr><td>new Float(1.0).toString()</td><td>Float.toString(1.0)</td></tr>
     <tr><td>new Double(1.0).toString()</td><td>Double.toString(1.0)</td></tr>
     <tr><td>new Byte(1).toString()</td><td>Byte.toString(1)</td></tr>
     <tr><td>new Short(1).toString()</td><td>Short.toString(1)</td></tr>
     <tr><td>new Boolean(true).toString()</td><td>Boolean.toString(true)</td></tr>
  </table>
]]>
    </Details>
  </BugPattern>


  <BugPattern type="DM_NEW_FOR_GETCLASS">
    <ShortDescription>Method allocates an object, only to get the class object</ShortDescription>
    <LongDescription>Method {1} allocates an object, only to get the class object</LongDescription>
    <Details>
<![CDATA[
  <p>This method allocates an object just to call getClass() on it, in order to 
  retrieve the Class object for it. It is simpler to just access the .class property of the class.</p>
]]>
    </Details>
  </BugPattern>  

  <BugPattern type="DM_MONITOR_WAIT_ON_CONDITION">
	<ShortDescription>Monitor wait() called on Condition</ShortDescription>
	<LongDescription>Monitor wait() called on a Condition in {1}</LongDescription>
	<Details>
		<![CDATA[
		<p>
		This method calls <code>wait()</code> on a
		<code>java.util.concurrent.locks.Condition</code> object.&nbsp;
		Waiting for a <code>Condition</code> should be done using one of the <code>await()</code>
		methods defined by the <code>Condition</code> interface.
		</p>
		]]>
	</Details>
  </BugPattern>

  <BugPattern type="RV_01_TO_INT">
    <ShortDescription>Random value from 0 to 1 is coerced to the integer 0</ShortDescription>
    <LongDescription>Method {1} uses generates a random value from 0 to 1 and then coerces that value to the integer 0</LongDescription>
    <Details>
<![CDATA[
  <p>A random value from 0 to 1 is being coerced to the integer value 0. You probably
want to multiple the random value by something else before coercing it to an integer, or use use the Random.nextInt(n) method.
</p>
]]>
    </Details>
  </BugPattern>  

  <BugPattern type="DM_NEXTINT_VIA_NEXTDOUBLE">
    <ShortDescription>Use the nextInt method of Random rather than nextDouble to generate a random integer</ShortDescription>
    <LongDescription>Method {1} uses the nextDouble method of Random to generate a random integer; using nextInt is more efficient</LongDescription>
    <Details>
<![CDATA[
  <p>If r is a java.util.Random, you can generate a random number from 0 to n-1
using r.nextInt(n) Rather than using (int)(r.nextDouble() * n).
</p>
]]>
    </Details>
  </BugPattern>  



  <BugPattern type="SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">
    <ShortDescription>Nonconstant string passed to execute method on an SQL statement</ShortDescription>
    <LongDescription>Method {1} passes a nonconstant String to an execute method on an SQL statement</LongDescription>
    <Details>
<![CDATA[
  <p>The method invokes the execute method on an SQL statement with a String that seems
to be dynamically generated. Consider using 
a prepared statement instead. It is more efficient and less vulnerable to
SQL injection attacks.
</p>
]]>
    </Details>
  </BugPattern>  

  <BugPattern type="DM_USELESS_THREAD">
    <ShortDescription>A thread was created using the default empty run method</ShortDescription>
    <LongDescription>Method {1} creates a thread using the default empty run method</LongDescription>
    <Details>
<![CDATA[
  <p>This method creates a thread without specifying a run method either by deriving from the Thread class, or 
  by passing a Runnable object. This thread, then, does nothing but waste time.
</p>
]]>
    </Details>
  </BugPattern>  
  
  <BugPattern type="DC_DOUBLECHECK">
    <ShortDescription>Possible double check of field</ShortDescription>
    <LongDescription>Possible doublecheck on {2} in {1}</LongDescription>
    <Details>
<![CDATA[
  <p> This method may contain an instance of double-checked locking.&nbsp;
  This idiom is not correct according to the semantics of the Java memory
  model.&nbsp; For more information, see the web page
  <a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html"
  >http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a>.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="FI_PUBLIC_SHOULD_BE_PROTECTED">
    <ShortDescription>Finalizer should be protected, not public</ShortDescription>
    <LongDescription>{1} is public; should be protected</LongDescription>
    <Details>
<![CDATA[
  <p> A class's <code>finalize()</code> method should have protected access,
   not public.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="FI_EMPTY">
    <ShortDescription>Empty finalizer should be deleted</ShortDescription>
    <LongDescription>{1} is empty and should be deleted</LongDescription>
    <Details>
<![CDATA[
  <p> Empty <code>finalize()</code> methods are useless, so they should
  be deleted.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="FI_NULLIFY_SUPER">
    <ShortDescription>Finalizer nullifies superclass finalizer</ShortDescription>
    <LongDescription>{1} is nullifying {2}.finalize(); is this intended?</LongDescription>
    <Details>
<![CDATA[
  <p> This empty <code>finalize()</code> method explicitly negates the
  effect of any finalizer defined by its superclass.&nbsp; Any finalizer
  actions defined for the superclass will not be performed.&nbsp;
  Unless this is intended, delete this method.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="FI_USELESS">
    <ShortDescription>Finalizer does nothing but call superclass finalizer</ShortDescription>
    <LongDescription>{1} does nothing except call super.finalize(); delete it</LongDescription>
    <Details>
<![CDATA[
  <p> The only thing this <code>finalize()</code> method does is call
  the superclass's <code>finalize()</code> method, making it
  redundant.&nbsp; Delete it.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="FI_MISSING_SUPER_CALL">
    <ShortDescription>Finalizer does not call superclass finalizer</ShortDescription>
    <LongDescription>{1} missing call to super.finalize(), so {2}.finalize() doesn't get called</LongDescription>
    <Details>
<![CDATA[
  <p> This <code>finalize()</code> method does not make a call to its
  superclass's <code>finalize()</code> method.&nbsp; So, any finalizer
  actions defined for the superclass will not be performed.&nbsp;
  Add a call to <code>super.finalize()</code>.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="FI_EXPLICIT_INVOCATION">
    <ShortDescription>Explicit invocation of finalizer</ShortDescription>
    <LongDescription>{1} explicitly invokes {2}</LongDescription>
    <Details>
<![CDATA[
  <p> This method contains an explicit invocation of the <code>finalize()</code>
  method on an object.&nbsp; Because finalizer methods are supposed to be
  executed once, and only by the VM, this is a bad idea.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="EQ_SELF_USE_OBJECT">
    <ShortDescription>Covariant equals() method defined, Object.equals(Object) inherited</ShortDescription>
    <LongDescription>{0} defines equals({0}) method and uses Object.equals(Object)</LongDescription>
    <Details>
<![CDATA[
  <p> This class defines a covariant version of the <code>equals()</code>
  method, but calls the normal <code>equals(Object)</code> method
  defined in the base <code>java.lang.Object</code> class.&nbsp;
  The class should probably define a non-covariant version of <code>equals()</code>.&nbsp;
  (I.e., a method with the signature <code>boolean equals(java.lang.Object)</code>.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="EQ_SELF_NO_OBJECT">
    <ShortDescription>Covariant equals() method defined</ShortDescription>
    <LongDescription>{0} defines equals({0}) method but not equals(Object)</LongDescription>
    <Details>
<![CDATA[
  <p> This class defines a covariant version of <code>equals()</code>.&nbsp;
  To correctly override the <code>equals()</code> method in
  <code>java.lang.Object</code>, the parameter of <code>equals()</code>
  must have type <code>java.lang.Object</code>.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="CO_SELF_NO_OBJECT">
    <ShortDescription>Covariant compareTo() method defined</ShortDescription>
    <LongDescription>{0} defines compareTo({0}) method but not compareTo(Object)</LongDescription>
    <Details>
<![CDATA[
  <p> This class defines a covariant version of <code>compareTo()</code>.&nbsp;
  To correctly override the <code>compareTo()</code> method in the
  <code>Comparable</code> interface, the parameter of <code>compareTo()</code>
  must have type <code>java.lang.Object</code>.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="HE_HASHCODE_USE_OBJECT_EQUALS">
    <ShortDescription>Class defines hashCode() and uses Object.equals()</ShortDescription>
    <LongDescription>{0} defines hashCode and uses Object.equals()</LongDescription>
    <Details>
<![CDATA[
  <p> This class defines a <code>hashCode()</code> method but inherits its
  <code>equals()</code> method from <code>java.lang.Object</code>
  (which defines equality by comparing object references).&nbsp; Although
  this will probably satisfy the contract that equal objects must have
  equal hashcodes, it is probably not what was intended by overriding
  the <code>hashCode()</code> method.&nbsp; (Overriding <code>hashCode()</code>
  implies that the object's identity is based on criteria more complicated
  than simple reference equality.)</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="HE_HASHCODE_NO_EQUALS">
    <ShortDescription>Class defines hashCode() but not equals()</ShortDescription>
    <LongDescription>{0} defines hashCode but not equals</LongDescription>
    <Details>
<![CDATA[
  <p> This class defines a <code>hashCode()</code> method but not an
  <code>equals()</code> method.&nbsp; Therefore, the class may
  violate the invariant that equal objects must have equal hashcodes.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="HE_EQUALS_USE_HASHCODE">
    <ShortDescription>Class defines equals() and uses Object.hashCode()</ShortDescription>
    <LongDescription>{0} defines equals and uses Object.hashCode()</LongDescription>
    <Details>
<![CDATA[
  <p> This class overrides <code>equals(Object)</code>, but does not
  override <code>hashCode()</code>, and inherits the implementation of
  <code>hashCode()</code> from <code>java.lang.Object</code> (which returns
  the identity hash code, an arbitrary value assigned to the object
  by the VM).&nbsp; Therefore, the class is very likely to violate the
  invariant that equal objects must have equal hashcodes.</p>

  <p>If you don't want to define a hashCode method, and/or don't
	believe the object will ever be put into a HashMap/Hashtable,
	define the <code>hashCode()</code> method
	to throw <code>UnsupportedOperationException</code>.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="HE_INHERITS_EQUALS_USE_HASHCODE">
    <ShortDescription>Class inherits equals() and uses Object.hashCode()</ShortDescription>
    <LongDescription>{0} inherits equals and uses Object.hashCode()</LongDescription>
    <Details>
<![CDATA[
  <p> This class inherits <code>equals(Object)</code> from an abstract
  superclass, and <code>hashCode()</code> from 
from <code>java.lang.Object</code> (which returns
  the identity hash code, an arbitrary value assigned to the object
  by the VM).&nbsp; Therefore, the class is very likely to violate the
  invariant that equal objects must have equal hashcodes.</p>

  <p>If you don't want to define a hashCode method, and/or don't
	believe the object will ever be put into a HashMap/Hashtable,
	define the <code>hashCode()</code> method
	to throw <code>UnsupportedOperationException</code>.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="HE_EQUALS_NO_HASHCODE">
    <ShortDescription>Class defines equals() but not hashCode()</ShortDescription>
    <LongDescription>{0} defines equals but not hashCode</LongDescription>
    <Details>
<![CDATA[
  <p> This class overrides <code>equals(Object)</code>, but does not
  override <code>hashCode()</code>.&nbsp; Therefore, the class may violate the
  invariant that equal objects must have equal hashcodes.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="EQ_ABSTRACT_SELF">
    <ShortDescription>Abstract class defines covariant equals() method</ShortDescription>
    <LongDescription>Abstract {0} defines equals({0}) method</LongDescription>
    <Details>
<![CDATA[
  <p> This class defines a covariant version of <code>equals()</code>.&nbsp;
  To correctly override the <code>equals()</code> method in
  <code>java.lang.Object</code>, the parameter of <code>equals()</code>
  must have type <code>java.lang.Object</code>.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="ES_COMPARING_STRINGS_WITH_EQ">
    <ShortDescription>Comparison of String objects using == or !=</ShortDescription>
    <LongDescription>Comparison of String objects using == or != in {1} </LongDescription>
    <Details>
<![CDATA[
  <p>This code compares <code>java.lang.String</code> objects for reference
equality using the == or != operators.
Unless both strings are either constants in a source file, or have been
interned using the <code>String.intern()</code> method, the same string
value may be represented by two different String objects. Consider
using the <code>equals(Object)</code> method instead.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="CO_ABSTRACT_SELF">
    <ShortDescription>Abstract class defines covariant compareTo() method</ShortDescription>
    <LongDescription>Abstract {0} defines compareTo({0}) method</LongDescription>
    <Details>
<![CDATA[
  <p> This class defines a covariant version of <code>compareTo()</code>.&nbsp;
  To correctly override the <code>compareTo()</code> method in the
  <code>Comparable</code> interface, the parameter of <code>compareTo()</code>
  must have type <code>java.lang.Object</code>.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="IS2_INCONSISTENT_SYNC">
    <ShortDescription>Inconsistent synchronization</ShortDescription>
    <LongDescription>Inconsistent synchronization of {1}; locked {2}% of time</LongDescription>
    <Details>
<![CDATA[
  <p> The fields of this class appear to be accessed inconsistently with respect
  to synchronization.&nbsp; This bug report indicates that the bug pattern detector
  judged that
  <ol>
  <li> The class contains a mix of locked and unlocked accesses,</li>
  <li> At least one locked access was performed by one of the class's own methods, and</li>
  <li> The number of unsynchronized field accesses (reads and writes) was no more than
       one third of all accesses, with writes being weighed twice as high as reads</li>
  </ol>
  </p>

  <p> A typical bug matching this bug pattern is forgetting to synchronize
  one of the methods in a class that is intended to be thread-safe.</p>

  <p> You can select the nodes labeled "Unsynchronized access" to show the
  code locations where the detector believed that a field was accessed
  without synchronization.</p>

  <p> Note that there are various sources of inaccuracy in this detector;
  for example, the detector cannot statically detect all situations in which
  a lock is held.&nbsp; Also, even when the detector is accurate in
  distinguishing locked vs. unlocked accesses, the code in question may still
  be correct.</p>

  <p> This description refers to the "IS2" version of the pattern detector,
  which has more accurate ways of detecting locked vs. unlocked accesses
  than the older "IS" detector.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="NN_NAKED_NOTIFY">
    <ShortDescription>Naked notify in method</ShortDescription>
    <LongDescription>Naked notify in {1}</LongDescription>
    <Details>
<![CDATA[
  <p> A call to <code>notify()</code> or <code>notifyAll()</code>
  was made without any (apparent) accompanying
  modification to mutable object state.&nbsp; In general, calling a notify
  method on a monitor is done because some condition another thread is
  waiting for has become true.&nbsp; However, for the condition to be meaningful,
  it must involve a heap object that is visible to both threads.</p>

  <p> This bug does not necessarily indicate an error, since the change to
  mutable object state may have taken place in a method which then called
  the method containing the notification.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="MS_EXPOSE_REP">
    <ShortDescription>Public static method may expose internal representation by returning array</ShortDescription>
    <LongDescription>public static {1} may expose internal representation by returning {2}</LongDescription>
    <Details>
<![CDATA[
  <p> A public static method returns a reference to
	an array that is part of the static state of the class. 
	Any code that calls this method can freely modify
	the underlying array.
	One fix is to return a copy of the array.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="EI_EXPOSE_REP">
    <ShortDescription>Method may expose internal representation by returning reference to mutable object</ShortDescription>
    <LongDescription>{1} may expose internal representation by returning {2}</LongDescription>
    <Details>
<![CDATA[
  <p> Returning a reference to a mutable object value stored in one of the object's fields
  exposes the internal representation of the object.&nbsp; 
	If instances
	are accessed by untrusted code, and unchecked changes to
	the mutable object would compromise security or other
	important properties, you will need to do something different.
  Returning a new copy of the object is better approach in many situations.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="EI_EXPOSE_REP2">
    <ShortDescription>Method may expose internal representation by incorporating reference to mutable object</ShortDescription>
    <LongDescription>{1} may expose internal representation by storing an externally mutable object into {2}</LongDescription>
    <Details>
<![CDATA[
  <p> This code stores a reference to an externally mutable object into the
  internal representation of the object.&nbsp; 
	If instances
	are accessed by untrusted code, and unchecked changes to
	the mutable object would compromise security or other
	important properties, you will need to do something different.
  Storing a copy of the object is better approach in many situations.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="EI_EXPOSE_STATIC_REP2">
    <ShortDescription>Method may expose internal static state by storing a mutable object into a static field</ShortDescription>
    <LongDescription>{1} may expose internal static state by storing a mutable object into a static field {2}</LongDescription>
    <Details>
<![CDATA[
  <p> This code stores a reference to an externally mutable object into a static
	field. 
	If unchecked changes to
	the mutable object would compromise security or other
	important properties, you will need to do something different.
  Storing a copy of the object is better approach in many situations.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="RU_INVOKE_RUN">
    <ShortDescription>Invokes run on a thread (did you mean to start it instead?)</ShortDescription>
    <LongDescription>{1} explicitly invokes run on a thread (did you mean to start it instead?)</LongDescription>
    <Details>
<![CDATA[
  <p> This method explicitly invokes <code>run()</code> on an object.&nbsp;
  In general, classes implement the <code>Runnable</code> interface because
  they are going to have their <code>run()</code> method invoked in a new thread,
  in which case <code>Thread.start()</code> is the right method to call.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="SP_SPIN_ON_FIELD">
    <ShortDescription>Method spins on field</ShortDescription>
    <LongDescription>Spinning on {3} in {1}</LongDescription>
    <Details>
<![CDATA[
  <p> This method spins in a loop which reads a field.&nbsp; The compiler
  may legally hoist the read out of the loop, turning the code into an
  infinite loop.&nbsp; The class should be changed so it uses proper
  synchronization (including wait and notify calls).</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="NS_NON_SHORT_CIRCUIT">
    <ShortDescription>Questionable use of non-short-circuit logic</ShortDescription>
    <LongDescription>Questionable use of non-short-circuit logic in {1}</LongDescription>
    <Details>
<![CDATA[
  <p> This code seems to be using non-short-circuit logic (e.g., &amp;
or |) 
rather than short-circuit logic (&amp;&amp; or ||).
Non-short-circuit logic causes both sides of the expression
to be evaluated even when the result can be inferred from
knowing the left-hand side. This can be less efficient and
can result in errors if the left-hand side guards cases
when evaluating the right-hand side can generate an error.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="TLW_TWO_LOCK_WAIT">
    <ShortDescription>Wait with two locks held</ShortDescription>
    <LongDescription>wait() with two locks held in {1}</LongDescription>
    <Details>
<![CDATA[
  <p> Waiting on a monitor while two locks are held may cause
  deadlock.
	&nbsp; 
	Performing a wait only releases the lock on the object
	being waited on, not any other locks.
	&nbsp; 
This not necessarily a bug, but is worth examining
  closely.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="UW_UNCOND_WAIT">
    <ShortDescription>Unconditional wait in method</ShortDescription>
    <LongDescription>Unconditional wait in {1}</LongDescription>
    <Details>
<![CDATA[
  <p> This method contains a call to <code>java.lang.Object.wait()</code> which
  is not guarded by conditional control flow.&nbsp; If the condition that
  the method intends to wait for has already happened, the thread could
  wait indefinitely.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="UR_UNINIT_READ">
    <ShortDescription>Uninitialized read of field in constructor</ShortDescription>
    <LongDescription>Uninitialized read of {2} in {1}</LongDescription>
    <Details>
<![CDATA[
  <p> This constructor reads a field which has not yet been assigned a value.&nbsp;
  This is often caused when the programmer mistakenly uses the field instead
  of one of the constructor's parameters.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="UG_SYNC_SET_UNSYNC_GET">
    <ShortDescription>Unsynchronized get method, synchronized set method</ShortDescription>
    <LongDescription>{1} is unsynchronized, {2} is synchronized</LongDescription>
    <Details>
<![CDATA[
  <p> This class contains similarly-named get and set
  methods where the set method is synchronized and the get method is not.&nbsp;
  This may result in incorrect behavior at runtime, as callers of the get
  method will not necessarily see a consistent state for the object.&nbsp;
  The get method should be made synchronized.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="IC_INIT_CIRCULARITY">
    <ShortDescription>Initialization circularity</ShortDescription>
    <LongDescription>Initialization circularity between {0} and {1}</LongDescription>
    <Details>
<![CDATA[
  <p> A circularity was detected in the static initializers of the two
  classes referenced by the bug instance.&nbsp; Many kinds of unexpected
  behavior may arise from such circularity.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="IT_NO_SUCH_ELEMENT">
    <ShortDescription>Iterator next() method can't throw NoSuchElement exception</ShortDescription>
    <LongDescription>{1} can't throw NoSuchElement exception</LongDescription>
    <Details>
<![CDATA[
  <p> This class implements the <code>java.util.Iterator</code> interface.&nbsp;
  However, its <code>next()</code> method is not capable of throwing
  <code>java.util.NoSuchElementException</code>.&nbsp; The <code>next()</code>
  method should be changed so it throws <code>NoSuchElementException</code>
  if is called when there are no more elements to return.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="ESync_EMPTY_SYNC">
    <ShortDescription>Empty synchronized block</ShortDescription>
    <LongDescription>Empty synchronized block in {1}</LongDescription>
    <Details>
<![CDATA[
  <p> The code contains an empty synchronized block:</p>
<pre>
synchronized() {}
</pre>
<p>Empty synchronized blocks are far more subtle and hard to use correctly
than most people recognize, and empty synchronized blocks
are almost never a better solution
than less contrived solutions. 
</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="IS_INCONSISTENT_SYNC">
    <ShortDescription>Inconsistent synchronization</ShortDescription>
    <LongDescription>Inconsistent synchronization of {1}; locked {2}% of the time</LongDescription>
    <Details>
<![CDATA[
  <p> The fields of this class appear to be accessed inconsistently with respect
  to synchronization.&nbsp; This bug report indicates that the bug pattern detector
  judged that
  <ol>
  <li> The class contains a mix of locked and unlocked accesses,</li>
  <li> At least one locked access was performed by one of the class's own methods, and</li>
  <li> The number of unsynchronized field accesses (reads and writes) was no more than
       one third of all accesses, with writes being weighed twice as high as reads</li>
  </ol>
  </p>

  <p> A typical bug matching this bug pattern is forgetting to synchronize
  one of the methods in a class that is intended to be thread-safe.</p>

  <p> Note that there are various sources of inaccuracy in this detector;
  for example, the detector cannot statically detect all situations in which
  a lock is held.&nbsp; Also, even when the detector is accurate in
  distinguishing locked vs. unlocked accesses, the code in question may still
  be correct.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="ML_SYNC_ON_UPDATED_FIELD">
    <ShortDescription>Method synchronizes on an updated field</ShortDescription>
    <LongDescription>{1} synchronizes on updated field {2}</LongDescription>
    <Details>
<![CDATA[
  <p> This method synchronizes on an object 
	references from a mutable field.
	This is unlikely to have useful semantics, since different
threads may be synchronizing on different objects.</p>
]]>  
    </Details>
  </BugPattern>
  <BugPattern type="MS_OOI_PKGPROTECT">
    <ShortDescription>Field should be moved out of an interface and made package protected</ShortDescription>
    <LongDescription>{1} should be moved out of an interface and made package protected</LongDescription>
    <Details>
<![CDATA[
<p>
 A final static field that is 
defined in an interface references a mutable
	object such as an array or hashtable.
	This mutable object could 
	be changed by malicious code or
        by accident from another package.
	To solve this, the field needs to be moved to a class
	and made package protected 
	to avoid
        this vulnerability.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="MS_FINAL_PKGPROTECT">
    <ShortDescription>Field should be both final and package protected</ShortDescription>
    <LongDescription>{1} should be both final and package protected</LongDescription>
    <Details>
<![CDATA[
 <p>
	A mutable static field could be changed by malicious code or
        by accident from another package.
        The field could be made package protected and/or made final 
	to avoid
        this vulnerability.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="MS_SHOULD_BE_FINAL">
    <ShortDescription>Field isn't final but should be</ShortDescription>
    <LongDescription>{1} isn't final but should be</LongDescription>
    <Details>
<![CDATA[
	<p>
 A mutable static field could be changed by malicious code or
        by accident from another package.
        The field could be made final to avoid
        this vulnerability.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="MS_PKGPROTECT">
    <ShortDescription>Field should be package protected</ShortDescription>
    <LongDescription>{1} should be package protected</LongDescription>
    <Details>
<![CDATA[
  <p> A mutable static field could be changed by malicious code or
	by accident.
	The field could be made package protected to avoid
	this vulnerability.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="MS_MUTABLE_HASHTABLE">
    <ShortDescription>Field is a mutable Hashtable</ShortDescription>
    <LongDescription>{1} is a mutable Hashtable</LongDescription>
    <Details>
<![CDATA[
 <p>A final static field references a Hashtable
	and can be accessed by malicious code or
        by accident from another package.
	This code can freely modify the contents of the Hashtable.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="MS_MUTABLE_ARRAY">
    <ShortDescription>Field is a mutable array</ShortDescription>
    <LongDescription>{1} is a mutable array</LongDescription>
    <Details>
<![CDATA[
<p> A final static field references an array
	and can be accessed by malicious code or
        by accident from another package.
	This code can freely modify the contents of the array.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="MS_CANNOT_BE_FINAL">
    <ShortDescription>Field isn't final and can't be protected from malicious code</ShortDescription>
    <LongDescription>{1} isn't final and can't be protected from malicious code </LongDescription>
    <Details>
<![CDATA[
  <p> 
 A mutable static field could be changed by malicious code or
        by accident from another package.
	Unfortunately, the way the field is used doesn't allow
	any easy fix to this problem.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NM_CLASS_NAMING_CONVENTION">
    <ShortDescription>Class names should start with an upper case letter</ShortDescription>
    <LongDescription>The class name {0} doesn't start with an upper case letter</LongDescription>
    <Details>
<![CDATA[
  <p> Class names should be nouns, in mixed case with the first letter of each internal word capitalized. Try to keep your class names simple and descriptive. Use whole words-avoid acronyms and abbreviations (unless the abbreviation is much more widely used than the long form, such as URL or HTML).
</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NM_METHOD_NAMING_CONVENTION">
    <ShortDescription>Method names should start with an lower case letter</ShortDescription>
    <LongDescription>The method name {1} doesn't start with an lower case letter</LongDescription>
    <Details>
<![CDATA[
  <p> 
Methods should be verbs, in mixed case with the first letter lowercase, with the first letter of each internal word capitalized.
</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NM_FIELD_NAMING_CONVENTION">
    <ShortDescription>Field names should start with an lower case letter</ShortDescription>
    <LongDescription>The field name {1} doesn't start with an lower case letter</LongDescription>
    <Details>
<![CDATA[
  <p> 
Names of fields that are not final should be in mixed case with a lowercase first letter and the first letters of subsequent words capitalized. 
</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NM_VERY_CONFUSING">
    <ShortDescription>Very confusing method names</ShortDescription>
    <LongDescription>VERY confusing to have methods {1} and {3}</LongDescription>
    <Details>
<![CDATA[
  <p> The referenced methods have names that differ only by capitalization.</p>
]]>
    </Details>
  </BugPattern>


  <BugPattern type="NM_CONFUSING">
    <ShortDescription>Confusing method names</ShortDescription>
    <LongDescription>Confusing to have methods {1} and {3}</LongDescription>
    <Details>
<![CDATA[
  <p> The referenced methods have names that differ only by capitalization.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="NM_METHOD_CONSTRUCTOR_CONFUSION">
    <ShortDescription>Apparent method/constructor confusion</ShortDescription>
    <LongDescription>Method {1} was probably intended to be a constructor</LongDescription>
    <Details>
<![CDATA[
  <p> This regular method has the same name as the class it is defined in. It is likely that this was intended to be a constructor.
      If it was intended to be a constructor, remove the declaration of a return value.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="NM_LCASE_HASHCODE">
    <ShortDescription>Class defines hashcode(); should it be hashCode()?</ShortDescription>
    <LongDescription>Class {0} defines hashcode(); should it be hashCode()?</LongDescription>
    <Details>
<![CDATA[
  <p> This class defines a method called <code>hashcode()</code>.&nbsp; This method
  does not override the <code>hashCode()</code> method in <code>java.lang.Object</code>,
  which is probably what was intended.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="NM_LCASE_TOSTRING">
    <ShortDescription>Class defines tostring(); should it be toString()?</ShortDescription>
    <LongDescription>Class {0} defines tostring(); should it be toString()?</LongDescription>
    <Details>
<![CDATA[
  <p> This class defines a method called <code>tostring()</code>.&nbsp; This method
  does not override the <code>toString()</code> method in <code>java.lang.Object</code>,
  which is probably what was intended.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NM_BAD_EQUAL">
    <ShortDescription>Class defines equal(); should it be equals()?</ShortDescription>
    <LongDescription>Class {0} defines equal(); should it be equals()?</LongDescription>
    <Details>
<![CDATA[
<p> This class defines a method <code>equal(Object)</code>.&nbsp; This method does
not override the <code>equals(Object)</code> method in <code>java.lang.Object</code>,
which is probably what was intended.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NM_CLASS_NOT_EXCEPTION">
    <ShortDescription>Class is not derived from an Exception, even though it is named as such</ShortDescription>
    <LongDescription>Class {0} is not derived from an Exception, even though it is named as such</LongDescription>
    <Details>
<![CDATA[
<p> This class is not derived from another exception, but ends with 'Exception'. This will
be confusing to users of this class.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="RR_NOT_CHECKED">
    <ShortDescription>Method ignores results of InputStream.read()</ShortDescription>
    <LongDescription>{1} ignores result of {2}</LongDescription>
    <Details>
<![CDATA[
  <p> This method ignores the return value of one of the variants of
  <code>java.io.InputStream.read()</code> which can return multiple bytes.&nbsp;
  If the return value is not checked, the caller will not be able to correctly
  handle the case where fewer bytes were read than the caller requested.&nbsp;
  This is a particularly insidious kind of bug, because in many programs,
  reads from input streams usually do read the full amount of data requested,
  causing the program to fail only sporadically.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="SR_NOT_CHECKED">
    <ShortDescription>Method ignores results of InputStream.skip()</ShortDescription>
    <LongDescription>{1} ignores result of {2}</LongDescription>
    <Details>
<![CDATA[
  <p> This method ignores the return value of
  <code>java.io.InputStream.skip()</code> which can skip multiple bytes.&nbsp;
  If the return value is not checked, the caller will not be able to correctly
  handle the case where fewer bytes were skipped than the caller requested.&nbsp;
  This is a particularly insidious kind of bug, because in many programs,
  skips from input streams usually do skip the full amount of data requested,
  causing the program to fail only sporadically. With Buffered streams, however,
  skip() will only skip data in the buffer, and will routinely fail to skip the
  requested number of bytes.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION">
    <ShortDescription>Class is Externalizable but doesn't define a void constructor</ShortDescription>
    <LongDescription>{0} is Externalizable but doesn't define a void constructor</LongDescription>
    <Details>
<![CDATA[
  <p> This class implements the <code>Externalizable</code> interface, but does
  not define a void constructor. When Externalizable objects are deserialized,
	they first need to be constructed by invoking the void
	constructor. Since this class does not have one,
	serialization and deserialization will fail at runtime.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="SE_NO_SUITABLE_CONSTRUCTOR">
    <ShortDescription>Class is Serializable but its superclass doesn't define a void constructor</ShortDescription>
    <LongDescription>{0} is Serializable  but its superclass doesn't define an accessible void constructor</LongDescription>
    <Details>
<![CDATA[
  <p> This class implements the <code>Serializable</code> interface
	and its superclass does not. When such an object is deserialized,
	the fields of the superclass need to be initialized by
	invoking the void constructor of the superclass.
	Since the superclass does not have one,
	serialization and deserialization will fail at runtime.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SE_NO_SERIALVERSIONID">
    <ShortDescription>Class is Serializable, but doesn't define serialVersionUID</ShortDescription>
    <LongDescription>{0} is Serializable; consider declaring a serialVersionUID</LongDescription>
    <Details>
<![CDATA[
  <p> This class implements the <code>Serializable</code> interface, but does
  not define a <code>serialVersionUID</code> field.&nbsp; 
  A change as simple as adding a reference to a .class object 
	 will add synthetic fields to the class,
	which will unfortunately change the implicit
	serialVersionUID (e.g., adding a reference to <code>String.class</code>
	will generate a static field <code>class$java$lang$String</code>).
   Also, different source code to bytecode compilers may use different 
   naming conventions for synthetic variables generated for 
   references to class objects or inner classes.
   To ensure interoperability of Serializable across versions,
	consider adding an explicit serialVersionUID.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SF_SWITCH_FALLTHROUGH">
  	<ShortDescription>Switch statement found where one case falls thru to the next case</ShortDescription>
  	<LongDescription>Switch statement found in {1} where one case falls thru to the next case</LongDescription>
    <Details>
<![CDATA[
  <p> This method contains a switch statement where one case branch will fall thru to the next case.
  Usually you need to end this case with a break or return.</p>
]]>
    </Details>  
  </BugPattern>

  <BugPattern type="WS_WRITEOBJECT_SYNC">
    <ShortDescription>Class's writeObject() method is synchronized but nothing else is</ShortDescription>
    <LongDescription>{0}'s writeObject method is synchronized but nothing else is</LongDescription>
    <Details>
<![CDATA[
  <p> This class has a <code>writeObject()</code> method which is synchronized;
  however, no other method of the class is synchronized.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="RS_READOBJECT_SYNC">
    <ShortDescription>Class's readObject() method is synchronized</ShortDescription>
    <LongDescription>{0}'s readObject method is synchronized</LongDescription>
    <Details>
<![CDATA[
  <p> This serializable class defines a <code>readObject()</code> which is
  synchronized.&nbsp; By definition, an object created by deserialization
  is only reachable by one thread, and thus there is no need for
  <code>readObject()</code> to be synchronized.&nbsp; If the <code>readObject()</code>
  method itself is causing the object to become visible to another thread,
  that is an example of very dubious coding style.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SE_NONSTATIC_SERIALVERSIONID">
    <ShortDescription>serialVersionUID isn't static</ShortDescription>
    <LongDescription>{1} isn't static</LongDescription>
    <Details>
<![CDATA[
  <p> This class defines a <code>serialVersionUID</code> field that is not static.&nbsp;
  The field should be made static
	if it is intended to specify
	the version UID for purposes of serialization.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SE_NONFINAL_SERIALVERSIONID">
    <ShortDescription>serialVersionUID isn't final</ShortDescription>
    <LongDescription>{1} isn't final</LongDescription>
    <Details>
<![CDATA[
  <p> This class defines a <code>serialVersionUID</code> field that is not final.&nbsp;
  The field should be made final 
	if it is intended to specify
	the version UID for purposes of serialization.</p>
]]>
    </Details>
  </BugPattern>


  <BugPattern type="SE_NONLONG_SERIALVERSIONID">
    <ShortDescription>serialVersionUID isn't long</ShortDescription>
    <LongDescription>{1} isn't long</LongDescription>
    <Details>
<![CDATA[
  <p> This class defines a <code>serialVersionUID</code> field that is not long.&nbsp;
  The field should be made long
	if it is intended to specify
	the version UID for purposes of serialization.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SE_BAD_FIELD">
    <ShortDescription>Non-transient non-serializable instance field in serializable class</ShortDescription>
    <LongDescription>Class {0} defines non-transient non-serializable instance field {1}</LongDescription>
    <Details>
<![CDATA[
<p> This Serializable class defines a non-primitive instance field which is neither transient,
Serializable, or <code>java.lang.Object</code>, and does not appear to implement
the <code>Externalizable</code> interface or the
<code>readObject()</code> and <code>writeObject()</code> methods.&nbsp;
Objects of this class will not be deserialized correctly if a non-Serializable
object is stored in this field.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SC_START_IN_CTOR">
    <ShortDescription>Constructor invokes Thread.start()</ShortDescription>
    <LongDescription>{1} invokes {2}</LongDescription>
    <Details>
<![CDATA[
  <p> The constructor starts a thread. This is likely to be wrong if
	the class is ever extended/subclassed, since the thread will be started
	before the subclass constructor is started.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="SS_SHOULD_BE_STATIC">
    <ShortDescription>Unread field: should this field be static?</ShortDescription>
    <LongDescription>Unread field: {1}; should this field be static?</LongDescription>
    <Details>
<![CDATA[
  <p> This class contains an instance final field that
	is initialized to a compile-time static value.
	Consider making the field static.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="UUF_UNUSED_FIELD">
    <ShortDescription>Unused field</ShortDescription>
    <LongDescription>Unused field: {1}</LongDescription>
    <Details>
<![CDATA[
  <p> This field is never used.&nbsp; Consider removing it from the class.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="URF_UNREAD_FIELD">
    <ShortDescription>Unread field</ShortDescription>
    <LongDescription>Unread field: {1}</LongDescription>
    <Details>
<![CDATA[
  <p> This field is never read.&nbsp; Consider removing it from the class.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="QF_QUESTIONABLE_FOR_LOOP">
    <ShortDescription>Complicated, subtle or wrong increment in for-loop </ShortDescription>
    <LongDescription>Complicated, subtle or wrong increment in for-loop {1} </LongDescription>
    <Details>
<![CDATA[
	<p>Are you sure this for loop is incrementing the correct variable?
	It appears that another variable is being initialized and checked
	by the for loop. 
</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="UWF_UNWRITTEN_FIELD">
    <ShortDescription>Unwritten field</ShortDescription>
    <LongDescription>Unwritten field: {1}</LongDescription>
    <Details>
<![CDATA[
  <p> This field is never written.&nbsp; All reads of it will return the default
value. Check for errors (should it have been initialized?), or remove it if it is useless.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD">
    <ShortDescription>Write to static field from instance method</ShortDescription>
    <LongDescription>Write to static field {2} from instance method {1}</LongDescription>
    <Details>
<![CDATA[
  <p> This instance method writes to a static field. This is tricky to get
correct if multiple instances are being manipulated, 
and generally bad practice.
</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NP_IMMEDIATE_DEREFERENCE_OF_READLINE">
    <ShortDescription>Immediate dereference of the result of readLine()</ShortDescription>
    <LongDescription>Immediate dereference of the result of readLine() in {1}</LongDescription>
    <Details>
<![CDATA[
  <p> The result of invoking readLine() is immediately dereferenced. If there are no more lines of text
to read, readLine() will return null and dereferencing that will generate a null pointer exception.
</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NP_UNWRITTEN_FIELD">
    <ShortDescription>Read of unwritten field</ShortDescription>
    <LongDescription>Read of unwritten field in {1}</LongDescription>
    <Details>
<![CDATA[
  <p> The program is deferencing a field that does not seem to ever be
written to. Deferencing this value will generate a null pointer exception.
</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SIC_INNER_SHOULD_BE_STATIC">
    <ShortDescription>Should be a static inner class</ShortDescription>
    <LongDescription>Should {0} be a _static_ inner class?</LongDescription>
    <Details>
<![CDATA[
  <p> This class is an inner class, but does not use its embedded reference
  to the object which created it.&nbsp; This reference makes the instances
  of the class larger, and may keep the reference to the creator object
  alive longer than necessary.&nbsp; If possible, the class should be
	be made static.
</p>
]]>
    </Details>
  </BugPattern>



  <BugPattern type="NP_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR">
    <ShortDescription>Read of field not initialized in constructor</ShortDescription>
    <LongDescription>Read of field not initialized in constructor at {1}</LongDescription>
    <Details>
<![CDATA[
  <p> This is a read of a field is never initialized within any constructor, and is therefore could be null after
the object is initialized. This might be a coding error, or else the class containing the field
is written in a way that depends upon methods being called in some specific order (a little bit dodgy,
but not necessarily wrong).
</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR">
    <ShortDescription>Field not initialized in constructor</ShortDescription>
    <LongDescription>Field not initialized in constructor: {1}</LongDescription>
    <Details>
<![CDATA[
  <p> This field is never initialized within any constructor, and is therefore could be null after
the object is initialized. 
This is a either an error or a questionable design, since
it means a null pointer exception will be generated if that field is dereferenced
before being initialized.  
</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SIC_INNER_SHOULD_BE_STATIC_ANON">
    <ShortDescription>Could be refactored into a named static inner class</ShortDescription>
    <LongDescription>The class {0} could be refactored into a named _static_ inner class</LongDescription>
    <Details>
<![CDATA[
  <p> This class is an inner class, but does not use its embedded reference
  to the object which created it.&nbsp; This reference makes the instances
  of the class larger, and may keep the reference to the creator object
  alive longer than necessary.&nbsp; If possible, the class should be
  made into a <em>static</em> inner class. Since anonymous inner
classes cannot be marked as static, doing this will requiring refactoring
the inner class so that it is a named inner class.</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS">
    <ShortDescription>Could be refactored into a static inner class</ShortDescription>
    <LongDescription>The class {0} could be refactored into a _static_ inner class</LongDescription>
    <Details>
<![CDATA[
  <p> This class is an inner class, but does not use its embedded reference
  to the object which created it except during construction of the 
inner object.&nbsp; This reference makes the instances
  of the class larger, and may keep the reference to the creator object
  alive longer than necessary.&nbsp; If possible, the class should be
  made into a <em>static</em> inner class. Since the reference to the
	outer object is required during construction of the inner instance,
	the inner class will need to be refactored so as to 
	pass  a reference to the outer instance to the constructor
	for the inner class.</p>
]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="WA_NOT_IN_LOOP">
    <ShortDescription>Wait not in loop in method</ShortDescription>
    <LongDescription>Wait not in loop in {1}</LongDescription>
    <Details>
<![CDATA[
  <p> This method contains a call to <code>java.lang.Object.wait()</code> 
  which is not in a loop.&nbsp; If the monitor is used for multiple conditions,
  the condition the caller intended to wait for might not be the one
  that actually occurred.</p>
]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="WA_AWAIT_NOT_IN_LOOP">
    <ShortDescription>Condition.await() not in loop in method</ShortDescription>
    <LongDescription>Condition.await() not in loop in {1}</LongDescription>
    <Details>
<![CDATA[
  <p> This method contains a call to <code>java.util.concurrent.await()</code> 
   (or variants)
  which is not in a loop.&nbsp; If the object is used for multiple conditions,
  the condition the caller intended to wait for might not be the one
  that actually occurred.</p>
]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="NO_NOTIFY_NOT_NOTIFYALL">
    <ShortDescription>Using notify() rather than notifyAll() in method</ShortDescription>
    <LongDescription>Using notify rather than notifyAll in {1}</LongDescription>
    <Details>
<![CDATA[
  <p> This method calls <code>notify()</code> rather than <code>notifyAll()</code>.&nbsp;
  Java monitors are often used for multiple conditions.&nbsp; Calling <code>notify()</code>
  only wakes up one thread, meaning that the thread woken up might not be the
  one waiting for the condition that the caller just satisfied.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="RV_CHECK_FOR_POSITIVE_INDEXOF">
    <ShortDescription>Method checks to see if result of String.indexOf is positive</ShortDescription>
    <LongDescription>{1} checks to see if result of String.indexOf is positive</LongDescription>
    <Details>
<![CDATA[
   <p> The method invokes String.indexOf and checks to see if the result is positive or non-positive.
	It is much more typical to check to see if the result is negative or non-negative. It is
	positive only if the substring checked for occurs at some place other than at the beginning of
	the String.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="RV_DONT_JUST_NULL_CHECK_READLINE">
    <ShortDescription>Method discards result of readLine after checking if it is nonnull</ShortDescription>
    <LongDescription>{1} discards result of readLine after checking if it is nonnull</LongDescription>
    <Details>
<![CDATA[
   <p> The value returned by readLine is discarded after checking to see if the return
value is non-null. In almost all situations, if the result is non-null, you will want
to use that non-null value. Calling readLine again will give you a different line.</p>
]]>
    </Details>
  </BugPattern>


  <BugPattern type="RV_RETURN_VALUE_IGNORED">
    <ShortDescription>Method ignores return value</ShortDescription>
    <LongDescription>{1} ignores return value of {2}</LongDescription>
    <Details>
<![CDATA[
   <p> The return value of this method should be checked. One common
cause of this warning is to invoke a method on an immutable object,
thinking that it updates the object. For example, in the following code 
fragment,</p>
<blockquote>
<pre>
String dateString = getHeaderField(name);
dateString.trim();
</pre>
</blockquote>
<p>the programs seems to be thinking that the trim function will update 
the String referenced by dateString. But since Strings are immutable, the trim
function returns a new String value, which is being ignored here. The code 
should be corrected to: </p>
<blockquote>
<pre>
String dateString = getHeaderField(name);
dateString = dateString.trim();
</pre>
</blockquote>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NP_ALWAYS_NULL">
    <ShortDescription>Null pointer dereference in method</ShortDescription>
    <LongDescription>Null pointer dereference in {1}</LongDescription>
    <Details>
<![CDATA[
<p> A null pointer is dereferenced here.&nbsp; This will lead to a 
<code>NullPointerException</code> when the code is executed.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NP_ALWAYS_NULL_EXCEPTION">
    <ShortDescription>Null pointer dereference in method on exception path</ShortDescription>
    <LongDescription>Null pointer dereference in {1} on exception path</LongDescription>
    <Details>
<![CDATA[
<p> A pointer which is null on an exception path is dereferenced here.&nbsp;
This will lead to a <code>NullPointerException</code> when the code is executed.&nbsp;
Note that because FindBugs currently does not prune infeasible exception paths,
this may be a false warning.</p>

<p> Also note that FindBugs considers the default case of a switch statement to
be an exception path, since the default case is often infeasible.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NP_NULL_ON_SOME_PATH">
    <ShortDescription>Possible null pointer dereference in method</ShortDescription>
    <LongDescription>Possible null pointer dereference in {1}</LongDescription>
    <Details>
<![CDATA[
<p> A reference value dereferenced here might be null at runtime.&nbsp;
This may lead to a <code>NullPointerException</code> when the code is executed.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NP_NULL_ON_SOME_PATH_EXCEPTION">
    <ShortDescription>Possible null pointer dereference in method on exception path</ShortDescription>
    <LongDescription>Possible null pointer dereference in {1} on exception path</LongDescription>
    <Details>
<![CDATA[
<p> A reference value which is null on some exception control path is
dereferenced here.&nbsp; This may lead to a <code>NullPointerException</code>
when the code is executed.&nbsp;
Note that because FindBugs currently does not prune infeasible exception paths,
this may be a false warning.</p>

<p> Also note that FindBugs considers the default case of a switch statement to
be an exception path, since the default case is often infeasible.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SI_INSTANCE_BEFORE_FINALS_ASSIGNED">
    <ShortDescription>Static initializer for class creates instance before all static final fields assigned</ShortDescription>
    <LongDescription>Static initializer for {0} creates instance before all static final fields assigned</LongDescription>
    <Details>
<![CDATA[
<p> The class's static initializer creates an instance of the class
before all of the static final fields are assigned.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="OS_OPEN_STREAM">
    <ShortDescription>Method may fail to close stream</ShortDescription>
    <LongDescription>{1} may fail to close stream</LongDescription>
    <Details>
<![CDATA[
<p> The method creates an IO stream object, does not assign it to any
fields, pass it to other methods, or return it, and does not appear to close
the stream on all paths out of the method.&nbsp; This may result in
a file descriptor leak.&nbsp; It is generally a good
idea to use a <code>finally</code> block to ensure that streams are
closed.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="OS_OPEN_STREAM_EXCEPTION_PATH">
    <ShortDescription>Method may fail to close stream on exception</ShortDescription>
    <LongDescription>{1} may fail to close stream on exception</LongDescription>
    <Details>
<![CDATA[
<p> The method creates an IO stream object, does not assign it to any
fields, pass it to other methods, or return it, and does not appear to close
it on all possible exception paths out of the method.&nbsp;
This may result in a file descriptor leak.&nbsp; It is generally a good
idea to use a <code>finally</code> block to ensure that streams are
closed.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="PZLA_PREFER_ZERO_LENGTH_ARRAYS">
    <ShortDescription>Consider returning a zero length array rather than null</ShortDescription>
    <LongDescription>Should {1} return a zero length array rather than null?</LongDescription>
    <Details>
<![CDATA[
<p> It is often a better design to
return a length zero array rather than a null reference to indicate that there
are no results (i.e., an empty list of results).
This way, no explicit check for null is needed by clients of the method.</p>

<p>On the other hand, using null to indicate 
"there is no answer to this question", then it is probably appropriate. 
For example, <code>File.listFiles()</code> returns an empty list
if given a directory containing no files, and returns null if the file
is not a directory.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="UCF_USELESS_CONTROL_FLOW">
    <ShortDescription>Useless control flow in method</ShortDescription>
    <LongDescription>Useless control flow in {1}</LongDescription>
    <Details>
<![CDATA[
<p> This method contains a useless control flow statement.&nbsp;
Often, this is caused by inadvertently using an empty statement as the
body of an <code>if</code> statement, e.g.:</p>
<pre>
    if (argv.length == 1);
        System.out.println("Hello, " + argv[0]);
</pre>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="RCN_REDUNDANT_COMPARISON_TO_NULL">
    <ShortDescription>Redundant comparison to null</ShortDescription>
    <LongDescription>Redundant comparison to null in {1}</LongDescription>
    <Details>
<![CDATA[
<p> This method contains a redundant comparison of a reference value
to null. Two types of redundant comparison are reported:
</p>
<ul>
<li> Both values compared are definitely null</li>
<li> One value is definitely null and the other is definitely not null</li>
</ul>

<p> This particular warning represents two specific kinds of
redundant comparisons:
</p>
<ol>
<li> A value was dereferenced, and later explicitly compared to null:
     this often indicates an error in the method</li>
<li> A literal null value was explicitly compared to null:
     this may indicate that the method was modified without
     complete understanding of the invariants of the method</li>
</ol>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="RCN_REDUNDANT_CHECKED_NULL_COMPARISON">
    <ShortDescription>Redundant comparison to null of previously checked value</ShortDescription>
    <LongDescription>Redundant comparison to null of previously checked value in {1}</LongDescription>
    <Details>
<![CDATA[
<p> This method contains a redundant comparison of a reference value
to null. Two types of redundant comparison are reported:
<ul>
<li> Both values compared are definitely null</li>
<li> One value is definitely null and the other is definitely not null</li>
</ul>
</p>

<p> This particular warning generally indicates that a
value known not to be null was checked against null.
While the check is not necessary, it may simply be a case
of defensive programming.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="UL_UNRELEASED_LOCK">
    <ShortDescription>Method does not release lock on all paths</ShortDescription>
    <LongDescription>{1} does not release lock on all paths</LongDescription>
    <Details>
<![CDATA[
<p> This method acquires a JSR-166 (<code>java.util.concurrent</code>) lock,
but does not release it on all paths out of the method.  In general, the correct idiom
for using a JSR-166 lock is:
</p>
<pre>
    Lock l = ...;
    l.lock();
    try {
        // do something
    } finally {
        l.unlock();
    }
</pre>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="UL_UNRELEASED_LOCK_EXCEPTION_PATH">
    <ShortDescription>Method does not release lock on all exception paths</ShortDescription>
    <LongDescription>{1} does not release lock on all exception paths</LongDescription>
    <Details>
<![CDATA[
<p> This method acquires a JSR-166 (<code>java.util.concurrent</code>) lock,
but does not release it on all exception paths out of the method.  In general, the correct idiom
for using a JSR-166 lock is:
</p>
<pre>
    Lock l = ...;
    l.lock();
    try {
        // do something
    } finally {
        l.unlock();
    }
</pre>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="RC_REF_COMPARISON">
    <ShortDescription>Suspicious reference comparison</ShortDescription>
    <LongDescription>Suspicious comparison of {3} references in {1}</LongDescription>
    <Details>
<![CDATA[
<p> This method compares two reference values using the == or != operator,
where the correct way to compare instances of this type is generally
with the equals() method.  Examples of classes which should generally
not be compared by reference are java.lang.Integer, java.lang.Float, etc.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="EC_UNRELATED_TYPES">
    <ShortDescription>Call to equals() comparing different types</ShortDescription>
    <LongDescription>Call to equals() comparing different types in {1}</LongDescription>
    <Details>
<![CDATA[
<p> This method calls equals(Object) on two references of different
types.  According to the contract of equals(), objects of different
classes should always compare as unequal; therefore, it is likely
that the result of this comparison will always be false at runtime.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="EC_UNRELATED_INTERFACES">
    <ShortDescription>Call to equals() comparing different interface types</ShortDescription>
    <LongDescription>Call to equals() comparing different interface types in {1}</LongDescription>
    <Details>
<![CDATA[
<p> This method calls equals(Object) on two references of unrelated
interface types (neither is a subtype of the other).  According to
the contract of equals(), objects of different classes should always
compare as unequal. Note that it is possible that
the program contains classes that implement both interfaces,
so the comparison may be valid.  However, it is worth
inspecting closely.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="EC_NULL_ARG">
    <ShortDescription>Call to equals() with null argument</ShortDescription>
    <LongDescription>Call to equals() with null argument in {1}</LongDescription>
    <Details>
<![CDATA[
<p> This method calls equals(Object), passing a null value as
the argument. According to the contract of the equals() method,
this call should always return <code>false</code>.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="MWN_MISMATCHED_WAIT">
    <ShortDescription>Mismatched wait()</ShortDescription>
    <LongDescription>Mismatched wait() in {1}</LongDescription>
    <Details>
<![CDATA[
<p> This method calls Object.wait() without obviously holding a lock
on the object.&nbsp;  Calling wait() without a lock held will result in
an <code>IllegalMonitorStateException</code> being thrown.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="MWN_MISMATCHED_NOTIFY">
    <ShortDescription>Mismatched notify()</ShortDescription>
    <LongDescription>Mismatched notify() in {1}</LongDescription>
    <Details>
<![CDATA[
<p> This method calls Object.notify() or Object.notifyAll() without obviously holding a lock
on the object.&nbsp;  Calling notify() or notifyAll() without a lock held will result in
an <code>IllegalMonitorStateException</code> being thrown.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SA_LOCAL_SELF_ASSIGNMENT">
    <ShortDescription>Self assignment of local variable</ShortDescription>
    <LongDescription>Self assignment of local variable in {1}</LongDescription>
    <Details>
<![CDATA[
<p> This method contains a self assignment of a local variable; e.g.</p>
<pre>
  public void foo() {
    int x = 3;
    x = x;
  }
</pre>
<p>
Such assignments are useless, and may indicate a logic error or typo.
</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SA_FIELD_SELF_ASSIGNMENT">
    <ShortDescription>Self assignment of field</ShortDescription>
    <LongDescription>Self assignment of field {2} in {1}</LongDescription>
    <Details>
<![CDATA[
<p> This method contains a self assignment of a field; e.g.
</p>
<pre>
  int x;
  public void foo() {
    x = x;
  }
</pre>
<p>Such assignments are useless, and may indicate a logic error or typo.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="BIT_AND">
    <ShortDescription>Incompatible bit masks</ShortDescription>
    <LongDescription>Incompatible bit masks yield a constant result in {1}</LongDescription>
    <Details>
<![CDATA[
<p> This method compares an expression of the form (a &amp; C) to D,
which will always compare unequal
due to the specific values of constants C and D.
This may indicate a logic error or typo.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="BIT_AND_ZZ">
    <ShortDescription>Incompatible bit masks</ShortDescription>
    <LongDescription>Incompatible bit masks yield a constant result in {1}</LongDescription>
    <Details>
<![CDATA[
<p> This method compares an expression of the form (a &amp; 0) to 0,
which will always compare equal.
This may indicate a logic error or typo.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="BIT_IOR">
    <ShortDescription>Incompatible bit masks</ShortDescription>
    <LongDescription>Incompatible bit masks yield a constant result in {1}</LongDescription>
    <Details>
<![CDATA[
<p> This method compares an expression of the form (a | C) to D.
which will always compare unequal
due to the specific values of constants C and D.
This may indicate a logic error or typo.</p>

<p> Typically, this bug occurs because the code wants to perform
a membership test in a bit set, but uses the bitwise OR
operator ("|") instead of bitwise AND ("&amp;").</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="LI_LAZY_INIT_INSTANCE">
    <ShortDescription>Incorrect lazy initialization of instance field</ShortDescription>
    <LongDescription>Incorrect lazy initialization of instance field {2} in {1}</LongDescription>
    <Details>
<![CDATA[
<p> This method contains an unsynchronized lazy initialization of a non-volatile field.
Because the compiler or processor may reorder instructions,
threads are not guaranteed to see a completely initialized object,
<em>if the method can be called by multiple threads</em>.
You can make the field volatile to correct the problem.
For more information, see the
<a href="http://www.cs.umd.edu/~pugh/java/memoryModel/">Java Memory Model web site</a>.
</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="LI_LAZY_INIT_STATIC">
    <ShortDescription>Incorrect lazy initialization of static field</ShortDescription>
    <LongDescription>Incorrect lazy initialization of static field {2} in {1}</LongDescription>
    <Details>
<![CDATA[
<p> This method contains an unsynchronized lazy initialization of a non-volatile static field.
Because the compiler or processor may reorder instructions,
threads are not guaranteed to see a completely initialized object,
<em>if the method can be called by multiple threads</em>.
You can make the field volatile to correct the problem.
For more information, see the
<a href="http://www.cs.umd.edu/~pugh/java/memoryModel/">Java Memory Model web site</a>.
</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="JLM_JSR166_LOCK_MONITORENTER">
    <ShortDescription>Synchronization performed on java.util.concurrent Lock in method</ShortDescription>
    <LongDescription>Synchronization performed on java.util.concurrent Lock in method {1}</LongDescription>
<Details>
<![CDATA[
<p> This method performs synchronization on an implementation of
<code>java.util.concurrent.locks.Lock</code>.  You should use
the <code>lock()</code> and <code>unlock()</code> methods instead.
</p>
]]>
</Details>
  </BugPattern>

  <BugPattern type="UPM_UNCALLED_PRIVATE_METHOD">
    <ShortDescription>Private method is never called</ShortDescription>
    <LongDescription>Private method {1} is never called</LongDescription>
<Details>
<![CDATA[
<p> This private method is never called. Although it is
possible that the method will be invoked through reflection,
it is more likely that the method is never used, and should be
removed.
</p>
]]>
</Details>
  </BugPattern>

  <BugPattern type="ODR_OPEN_DATABASE_RESOURCE">
    <ShortDescription>Method may fail to close database resource</ShortDescription>
    <LongDescription>{1} may fail to close database resource</LongDescription>
    <Details>
<![CDATA[
<p> The method creates a database resource (such as a database connection
or row set), does not assign it to any
fields, pass it to other methods, or return it, and does not appear to close
the object on all paths out of the method.&nbsp; Failure to
close database resources on all paths out of a method may
result in poor performance, and could cause the application to
have problems communicating with the database.
</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH">
    <ShortDescription>Method may fail to close database resource on exception</ShortDescription>
    <LongDescription>{1} may fail to close database resource on exception</LongDescription>
    <Details>
<![CDATA[
<p> The method creates a database resource (such as a database connection
or row set), does not assign it to any
fields, pass it to other methods, or return it, and does not appear to close
the object on all exception paths out of the method.&nbsp; Failure to
close database resources on all paths out of a method may
result in poor performance, and could cause the application to
have problems communicating with the database.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SBSC_USE_STRINGBUFFER_CONCATENATION">
    <ShortDescription>Method concatenates strings using + in a loop</ShortDescription>
    <LongDescription>Method {1} concatenates strings using + in a loop</LongDescription>
    <Details>
<![CDATA[
<p> The method seems to be building a String using concatenation in a loop.
In each iteration, the String is converted to a StringBuffer/StringBuilder, 
	appended to, and converted back to a String.
	This can lead to a cost quadratic in the number of iterations,
	as the growing string is recopied in each iteration. </p>
	
<p>Better performance can be obtained by using 
a StringBuffer (or StringBuilder in Java 1.5) explicitly.</p>

<p> For example:</p>
<pre>
  // This is bad
  String s = "";
  for (int i = 0; i &lt; field.length; ++i) {
    s = s + field[i];
  }

  // This is better
  StringBuffer buf = new StringBuffer();
  for (int i = 0; i &lt; field.length; ++i) {
    buf.append(field[i]);
  }
  String s = buf.toString();
</pre>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="ITA_INEFFICIENT_TO_ARRAY">
    <ShortDescription>Method uses toArray() with zero-length array argument</ShortDescription>
    <LongDescription>Method {1} uses Collection.toArray() with zero-length array argument</LongDescription>
    <Details>
<![CDATA[
<p> This method uses the toArray() method of a collection derived class, and passes
in a zero-length prototype array argument.  It is more efficient to use 
<pre>myCollection.toArray(new Foo[myCollection.size()])</pre>
If the array passed in is big enough to store all of the
elements of the collection, then it is populated and returned
directly. This avoids the need to create a second array
(by reflection) to return as the result.</p>
]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="IJU_SETUP_NO_SUPER">
    <ShortDescription>TestCase implements setUp but doesn't call super.setUp()</ShortDescription>
    <LongDescription>TestCase {0} implements setUp but doesn't call super.setUp()</LongDescription>
    <Details>
<![CDATA[
<p> Class is a JUnit TestCase and implements the setUp method. The setUp method should call
super.setUp(), but doesn't.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="IJU_TEARDOWN_NO_SUPER">
    <ShortDescription>TestCase implements tearDown but doesn't call super.tearDown()</ShortDescription>
    <LongDescription>TestCase {0} implements tearDown but doesn't call super.tearDown()</LongDescription>
    <Details>
<![CDATA[
<p> Class is a JUnit TestCase and implements the tearDown method. The tearDown method should call
super.tearDown(), but doesn't.</p>
]]>
    </Details>
  </BugPattern>  
  
  <BugPattern type="IJU_SUITE_NOT_STATIC">
    <ShortDescription>TestCase implements a suite method, but this method is not static and should be</ShortDescription>
    <LongDescription>TestCase {0} implements a suite method, but this method is not static and should be</LongDescription>
    <Details>
<![CDATA[
<p> Class is a JUnit TestCase and implements the suite() method.
 The suite method should be declared as being static, but isn't.</p>
]]>
    </Details>
  </BugPattern>  
  
  <BugPattern type="BOA_BADLY_OVERRIDDEN_ADAPTER">
    <ShortDescription>Class overrides a method implemented in super class Adapter wrongly</ShortDescription>
    <LongDescription>Class {0} overrides a method {1} implemented in super class Adapter wrongly</LongDescription>
    <Details>
<![CDATA[
<p> This method overrides a method found in a parent class, where that class is an Adapter that implements
a listener defined in the java.awt.event or javax.swing.event package. As a result, this method will not 
get called when the event occurs.</p>
]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="BRSA_BAD_RESULTSET_ACCESS">
    <ShortDescription>Method attempts to access a result set field with index 0</ShortDescription>
    <LongDescription>Method {1} attempts to access a result set field with index 0</LongDescription>
    <Details>
<![CDATA[
<p> A call to getXXX or updateXXX methods of a result set was made where the
field index is 0. As ResultSet fields start at index 1, this is always a mistake.</p>
]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="SIO_SUPERFLUOUS_INSTANCEOF">
    <ShortDescription>Unnecessary type check done using instanceof operator</ShortDescription>
    <LongDescription>Method {1} does an unnecessary type check using instanceof operator when it can be determined statically</LongDescription>
    <Details>
<![CDATA[
<p> Type check performed using the instanceof operator where it can be statically determined whether the object
is of the type requested. </p>
]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="BAC_BAD_APPLET_CONSTRUCTOR">
    <ShortDescription>Bad Applet Constructor relies on uninitialized AppletStub</ShortDescription>
    <LongDescription>Bad Applet Constructor relies on uninitialized AppletStub</LongDescription>
    <Details>
<![CDATA[
<p>
This constructor calls methods in the parent Applet that rely on the AppletStub. Since the AppletStub
isn't initialized until the init() method of this applet is called, these methods will not perform
correctly.
</p>
]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="EC_BAD_ARRAY_COMPARE">
    <ShortDescription>Invocation of equals() on an array, which is equivalent to ==</ShortDescription>
    <LongDescription>{1} invokes equals() on an array, which is equivalent to ==</LongDescription>
    <Details>
<![CDATA[
<p>
This method invokes the .equals(Object o) method on an array. Since arrays do not override the equals
method of Object, calling equals on an array is the same as comparing their addresses. To compare the 
contents of the arrays, use java.util.Arrays.equals(Object[], Object[]).
</p>
]]>    
    </Details>
  </BugPattern>

  <BugPattern type="UOE_USE_OBJECT_EQUALS">
    <ShortDescription>Calls to equals on a final class that doesn't override Object's version</ShortDescription>
    <LongDescription>Calls to equals on a final class that doesn't override Object's version</LongDescription>
    <Details>
<![CDATA[
<p>
This method invokes the .equals(Object o) method on a final class that doesn't override the equals method
in the Object class, effectively making the equals method test for sameness, like ==. It is good to use
the .equals method, but you should consider adding an .equals method in this class.
</p>
<p>[Bill Pugh]: Sorry, but I strongly disagree that this should be a warning, and I think your code
is just fine. Users of your code shouldn't care how you've implemented equals(), and they should never
depend on == to compare instances, since that bypasses the libraries ability to control how objects
are compared.
]]>    
    </Details>
  </BugPattern>
  
  <BugPattern type="STI_INTERRUPTED_ON_CURRENTTHREAD">
    <ShortDescription>Unneeded use of currentThread() call, to call interrupted() </ShortDescription>
    <LongDescription>Method {1} makes an unneeded call to currentThread() just to call interrupted()</LongDescription>
    <Details>
<![CDATA[
<p>
This method invokes the Thread.currentThread() call, just to call the interrupted() method. As interrupted() is a 
static method, is more simple and clear to use Thread.interrupted().
</p>
]]>    
    </Details>
  </BugPattern>

  <BugPattern type="STI_INTERRUPTED_ON_UNKNOWNTHREAD">
    <ShortDescription>Static Thread.interrupted() method is mistakenly attempted to be called on an arbitrary Thread object</ShortDescription>
    <LongDescription>Method {1} makes a call to the static Thread.interrupted() method, mistakenly attempting to call it on an arbitrary Thread object</LongDescription>
    <Details>
<![CDATA[
<p>
This method invokes the Thread.interrupted() method on a Thread object that appears to be a Thread object that is
not the current thread. As the interrupted() method is static, the interrupted method will be called on a different 
object than the one the author intended.
</p>
]]>    
    </Details>
  </BugPattern>

  <BugPattern type="IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN">
    <ShortDescription>A parameter is dead upon entry to a method but 
	overwritten</ShortDescription>
    <LongDescription>A parameter to {1} is dead upon entry but overwritten</LongDescription>
    <Details>
<![CDATA[
<p>
The initial value of this parameter is ignored, and the parameter
is overwritten here. This often indicates a mistaken belief that
the write to the parameter will be conveyed back to
the caller.
</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="DLS_DEAD_LOCAL_STORE">
    <ShortDescription>Dead store to local variable</ShortDescription>
    <LongDescription>Dead store to local variable in method {1}</LongDescription>
    <Details>
<![CDATA[
<p>
This instruction assigns a value to a local variable,
but the value is not read by any subsequent instruction.
Often, this indicates an error, because the value computed 
is never used.
</p>
<p>
Note that Sun's javac compiler often generates dead stores for
final local variables.  Because FindBugs is a bytecode-based tool,
there is no easy way to eliminate these false positives.
</p>
]]>
    </Details>
  </BugPattern>

	<BugPattern type="MF_METHOD_MASKS_FIELD">
    <ShortDescription>Method defines a variable that obscures a field</ShortDescription>
    <LongDescription>Method {1} defines a variable that obscures field {2}</LongDescription>
    <Details>
<![CDATA[
<p> This method defines a local variable with the same name as a field
in this class or a superclass.  This may cause the method to
read an uninitialized value from the field, leave the field uninitialized,
or both.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="MF_CLASS_MASKS_FIELD">
    <ShortDescription>Class defines field that obscures a superclass field</ShortDescription>
    <LongDescription>Class {0} defines field that obscures superclass field {1}</LongDescription>
    <Details>
<![CDATA[
<p> This class defines a field with the same name as a visible
instance field in a superclass.  This is confusing, and
may indicate an error if methods update or access one of
the fields when they wanted the other.</p>
]]>
    </Details>
  </BugPattern>

    <BugPattern type="WMI_WRONG_MAP_ITERATOR">
        <ShortDescription>Inefficient use of keySet iterator instead of entrySet iterator</ShortDescription>
        <LongDescription>Method {1} makes inefficient use of keySet iterator instead of entrySet iterator</LongDescription>
        <Details>
<![CDATA[
<p> This method accesses the value of a Map entry, using a key that was retrieved from
a keySet iterator. It is more efficient to use an iterator on the entrySet of the map, to avoid the 
Map.get(key) lookup.</p>
]]>
        </Details>
    </BugPattern>
  
    <BugPattern type="ISC_INSTANTIATE_STATIC_CLASS">
        <ShortDescription>Needless instantiation of class that only supplies static methods</ShortDescription>
        <LongDescription>Method {1} needlessly instantiates a class that only supplies static methods</LongDescription>
        <Details>
<![CDATA[
<p> This class allocates an object that is based on a class that only supplies static methods. This object
does not need to be created, just access the static methods directly using the class name as a qualifier.</p>
]]>
        </Details>
    </BugPattern>

	<BugPattern type="REC_CATCH_EXCEPTION">
	  <ShortDescription>java.lang.Exception is caught when Exception is not thrown</ShortDescription>
	  <LongDescription>Method {1} catches Exception, but Exception is not thrown in the try block and RuntimeException is not explicitly caught</LongDescription>
	  <Details>
  <![CDATA[
  <p>
  This method uses a try-catch block that catches Exception objects, but Exception is not
  thrown within the try block, and RuntimeException is not explicitly caught.  It is a common bug pattern to
  say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception
  each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well,
  masking potential bugs.
  </p>
  ]]>
	  </Details>
	</BugPattern>

    <BugPattern type="FE_FLOATING_POINT_EQUALITY">
	  <ShortDescription>Test for floating point equality.</ShortDescription>
	  <LongDescription>Test for floating point equality in {1}.</LongDescription>
	  <Details>
	<![CDATA[
    <p>
    This operation compares two floating point values for equality.
    Because floating point calculations may involve rounding, 
	calculated float and double values may not be accurate. 
    For values that must be precise, such as monetary values, 
	consider using a fixed-precision type such as BigDecimal.
    For values that need not be precise, consider comparing for equality
    within some range, for example: 
    <code>if ( Math.abs(x - y) < .0000001 )</code>.
	See the Java Language Specification, section 4.2.4.
    </p>
    ]]>
  	  </Details>
    </BugPattern>
    
  <BugPattern type="UM_UNNECESSARY_MATH">
    <ShortDescription>Method calls static Math class method on a constant value</ShortDescription>
    <LongDescription>Method calls static Math class method on a constant value</LongDescription>
    <Details>
<![CDATA[
<p> This method uses a static method from java.lang.Math on a constant value. This method's 
result in this case, can be determined statically, and is faster and sometimes more accurate to
just use the constant. Methods detected are:
</p>
<table>
<tr><th>Method</th><th>Parameter</th></tr>
<tr>abs<td></td><td>-any-</td></tr>
<tr>acos<td></td><td>0.0 or 1.0</td></tr>
<tr>asin<td></td><td>0.0 or 1.0</td></tr>
<tr>atan<td></td><td>0.0 or 1.0</td></tr>
<tr>atan2<td></td><td>0.0</td></tr>
<tr>cbrt<td></td><td>0.0 or 1.0</td></tr>
<tr>ceil<td></td><td>-any-</td></tr>
<tr>cos<td></td><td>0.0</td></tr>
<tr>cosh<td></td><td>0.0</td></tr>
<tr>exp<td></td><td>0.0 or 1.0</td></tr>
<tr>expm1<td></td><td>0.0</td></tr>
<tr>floor<td></td><td>-any-</td></tr>
<tr>log<td></td><td>0.0 or 1.0</td></tr>
<tr>log10<td></td><td>0.0 or 1.0</td></tr>
<tr>rint<td></td><td>-any-</td></tr>
<tr>round<td></td><td>-any-</td></tr>
<tr>sin<td></td><td>0.0</td></tr>
<tr>sinh<td></td><td>0.0</td></tr>
<tr>sqrt<td></td><td>0.0 or 1.0</td></tr>
<tr>tan<td></td><td>0.0</td></tr>
<tr>tanh<td></td><td>0.0</td></tr>
<tr>toDegrees<td></td><td>0.0 or 1.0</td></tr>
<tr>toRadians<td></td><td>0.0</td></tr>
</table>
]]>
    </Details>
  </BugPattern>
  
    <BugPattern type="CD_CIRCULAR_DEPENDENCY">
	  <ShortDescription>Test for circular dependencies among classes.</ShortDescription>
	  <LongDescription>Class {0} has a circular dependency with other classes.</LongDescription>
	  <Details>
	<![CDATA[
    <p>
    This class has a circular dependency with other classes. This makes building these classes
    difficult, as each is dependent on the other to build correctly. Consider using interfaces
    to break the hard dependency.
    </p>
    ]]>
  	  </Details>
    </BugPattern>
    
    <BugPattern type="RI_REDUNDANT_INTERFACES">
	  <ShortDescription>Class implements same interface as superclass.</ShortDescription>
	  <LongDescription>Class {0} implements same interface as superclass.</LongDescription>
	  <Details>
	<![CDATA[
    <p>
    This class declares that it implements an interface that is also implemented by a superclass.
    This is redundant, once a superclass implements an interface, all subclasses by default also
    implement this interface. It may point out that the inheritance hierarchy has changed since
    this class was created, and consideration should be taken into account for the ownership of 
    the interface's implementation.
    </p>
    ]]>
  	  </Details>
    </BugPattern>
    
    <BugPattern type="MTIA_SUSPECT_STRUTS_INSTANCE_FIELD">
	  <ShortDescription>Class extends Struts Action class and uses instance variables.</ShortDescription>
	  <LongDescription>Class {0} extends Struts Action class and uses instance variables.</LongDescription>
	  <Details>
	<![CDATA[
    <p>
    This class extends from a Struts Action class, and uses a instance member variable. Since only
    one instance of a struts Action class is created by the Struts framework, and used in a 
    multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider
    only using method local variables.
    </p>
    ]]>
      </Details>
    </BugPattern>

    <BugPattern type="MTIA_SUSPECT_SERVLET_INSTANCE_FIELD">
	  <ShortDescription>Class extends Servlet class and uses instance variables.</ShortDescription>
	  <LongDescription>Class {0} extends Servlet class and uses instance variables.</LongDescription>
	  <Details>
	<![CDATA[
    <p>
    This class extends from a Servlet class, and uses a instance member variable. Since only
    one instance of a Servlet class is created by the j2ee framework, and used in a 
    multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider
    only using method local variables.
    </p>
    ]]>
      </Details>
    </BugPattern>

    <BugPattern type="PS_PUBLIC_SEMAPHORES">
	  <ShortDescription>Class exposes synchronization and semaphores in its public interface.</ShortDescription>
	  <LongDescription>Class {0} exposes synchronization and semaphores in its public interface.</LongDescription>
	  <Details>
	<![CDATA[
    <p>
    This class uses synchronization along with wait(), notify() or notifyAll() on itself (the this
    reference). Client classes that use this class, may, in addition, use an instance of this class
    as a synchronizing object. Because two classes are using the same object for synchronization, 
    Multithread correctness is suspect. You should not synchronize nor call semaphore methods on 
    a public reference. Consider using a internal private member variable to control synchronization.
    </p>
    ]]>
      </Details>
    </BugPattern>
    
  <BugPattern type="ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL">
    <ShortDescription>Integer value cast to double and then passed to Math.ceil</ShortDescription>
    <LongDescription>Integer value cast to double and then passed to Math.ceil in {1}</LongDescription>
    <Details>
<![CDATA[
<p>
This code converts an integer value to a double precision
floating point number and then 
passing the result to the Math.ceil() function, which rounds a double to
the next higher integer value. This operation should always be a no-op,
since the converting an integer to a double should give a number with no fractional part.
It is likely that the operation that generated the value to be passed
to Math.ceil was intended to be performed using double precision
floating point arithmetic.
</p>

]]>
    </Details>
  </BugPattern>
   
  <BugPattern type="ICAST_IDIV_CAST_TO_DOUBLE">
    <ShortDescription>Integer division result cast to double</ShortDescription>
    <LongDescription>Integer division result cast to double in {1}</LongDescription>
    <Details>
<![CDATA[
<p>
This code casts the result of an integer division operation to double.
Doing division on integers loses precision.  The fact that the result
was cast to double suggests that this precision should have been retained.
What was probably meant was to cast one or both of the operands to
double <em>before</em> performing the division.  Here is an example:
</p>
<blockquote>
<pre>
int x = 2;
int y = 5;
// Wrong: yields result 0.0
double value1 =  x / y;

// Right: yields result 0.4
double value2 =  x / (double) y;
</pre>
</blockquote>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION">
    <ShortDescription>Store of non serializable object into HttpSession</ShortDescription>
    <LongDescription>Store of non serializable {3} into HttpSession in {1}</LongDescription>
    <Details>
<![CDATA[
<p>
This code seems to be storing a non-serializable object into an HttpSession.
If this session is passivated or migrated, an error will result.
</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="BC_BAD_CAST_TO_ABSTRACT_COLLECTION">
    <ShortDescription>Questionable cast to abstract collection </ShortDescription>
    <LongDescription>Questionable cast from Collection to abstract class {4} in {1}</LongDescription>
    <Details>
<![CDATA[
<p>
This code casts a Collection to an abstract collection (such as a Collection).
Ensure that you are guaranteed that the object is of the type
you are casting to. If all you need is to be able
to iterate through a collection, you don't need to cast it to a Set or List.
</p>
]]>
    </Details>
  </BugPattern>



  <BugPattern type="BC_IMPOSSIBLE_CAST">
    <ShortDescription>Impossible cast</ShortDescription>
    <LongDescription>Impossible cast from {3} to class {4} in {1}</LongDescription>
    <Details>
<![CDATA[
<p>
This cast will always throw a ClassCastException.
</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="BC_IMPOSSIBLE_INSTANCEOF">
    <ShortDescription>instanceof will always return false</ShortDescription>
    <LongDescription>instanceof will always return false in {1}, since a {3} can't be a {4}</LongDescription>
    <Details>
<![CDATA[
<p>
This instanceof test will always return false. Although this is safe, make sure it isn't
an indication of some misunderstanding or some other logic error.
</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="BC_VACUOUS_INSTANCEOF">
    <ShortDescription>instanceof will always return true</ShortDescription>
    <LongDescription>instanceof will always return true in {1}, since all {3} are instances of {4}</LongDescription>
    <Details>
<![CDATA[
<p>
This instanceof test will always return true. Although this is safe, make sure it isn't
an indication of some misunderstanding or some other logic error.
</p>
]]>
    </Details>
  </BugPattern>



  <BugPattern type="BC_UNCONFIRMED_CAST">
    <ShortDescription>Unchecked/unconfirmed cast</ShortDescription>
    <LongDescription>Unchecked/unconfirmed cast from {3} to class {4} in {1}</LongDescription>
    <Details>
<![CDATA[
<p>
This cast is unchecked, and not all instances of the type casted from can be cast to
the type it is being cast to. Ensure that your program logic ensures that this
cast will not fail.
</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="BC_BAD_CAST_TO_CONCRETE_COLLECTION">
    <ShortDescription>Questionable cast to concrete collection</ShortDescription>
    <LongDescription>Questionable cast from {3} to concrete class {4} in {1}</LongDescription>
    <Details>
<![CDATA[
<p>
This code casts an abstract collection (such as a Collection, List, or Set)
to a specific concrete implementation (such as an ArrayList or HashSet).
This might not be correct, and it may make your code fragile, since
it makes it harder to switch to other concrete implementations at a future 
point. Unless you have a particular reason to do so, just use the abstract
collection class.
</p>
]]>
    </Details>
  </BugPattern>
   
  <BugPattern type="RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION">
    <ShortDescription>Invalid syntax for regular expression</ShortDescription>
    <LongDescription>Invalid syntax for regular expression in {1}</LongDescription>
    <Details>
<![CDATA[
<p>
The code here uses a regular expression that is invalid according to the syntax
for regular expressions. This statement throw a PatternSyntaxException when
executed.
</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="DLS_OVERWRITTEN_INCREMENT">
    <ShortDescription>Overwritten increment</ShortDescription>
    <LongDescription>Overwritten increment in {1}</LongDescription>
    <Details>
<![CDATA[
<p>
The code performs an increment operation (e.g., <code>i++</code>) and then
immediately overwrites it. For example, <code>i = i++</code> immediately
overwrites the incremented value with the original value.
</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT">
    <ShortDescription>Unsigned right shift cast to short/byte</ShortDescription>
    <LongDescription>Unsigned right shift cast to short/byte in {1}</LongDescription>
    <Details>
<![CDATA[
<p>
The code performs an unsigned right shift, whose result is then 
cast to a short or byte, which discards the upper bits of the result.
Since the upper bits are discarded, there may be no difference between
a signed and unsigned right shift (depending upon the size of the shift).
</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="ICAST_BAD_SHIFT_AMOUNT">
    <ShortDescription>Integer shift by an amount not in the range 0..31</ShortDescription>
    <LongDescription>Integer shift by {2} in {1}</LongDescription>
    <Details>
<![CDATA[
<p>
The code performs an integer shift by a constant amount outside
the range 0..31.
The effect of this is to use the lower 5 bits of the integer
value to decide how much to shift by. This probably isn't want was expected,
and it at least confusing.
</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="IM_MULTIPLYING_RESULT_OF_IREM">
    <ShortDescription>Integer multiply of result of integer remainder</ShortDescription>
    <LongDescription>Integer multiple of result of integer remainder in {1}</LongDescription>
    <Details>
<![CDATA[
<p>
The code multiplies the result of an integer remaining by an integer constant.
Be sure you don't have your operator precedence confused. For example
i % 60 * 1000 is (i % 60) * 1000, not i % (60 * 1000).
</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="PZ_BAD_MONTH">
    <ShortDescription>Passes a constant value for a month outside of the expected range of 0..11</ShortDescription>
    <LongDescription>{1} passes a bad month value of {2} to {3}</LongDescription>
    <Details>
<![CDATA[
<p>
This code passes a constant month 
value outside the expected range of 0..11 to a method.
</p>
]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="SWL_SLEEP_WITH_LOCK_HELD">
	<ShortDescription>Method calls Thread.sleep() with a lock held</ShortDescription>
	<LongDescription>{1} calls Thread.sleep() with a lock held</LongDescription>
	<Details>
		<![CDATA[
		<p>
		This method calls Thread.sleep() with a lock held.  This may result
		in very poor performance and scalability, or a deadlock, since other threads may
		be waiting to acquire the lock.  It is a much better idea to call
		wait() on the lock, which releases the lock and allows other threads
		to run.
		</p>
		]]>
	</Details>
  </BugPattern>
 
  <BugPattern type="DB_DUPLICATE_BRANCHES">
	<ShortDescription>Method uses the same code for two branches</ShortDescription>
	<LongDescription>Method {1} uses the same code for two branches</LongDescription>
	<Details>
		<![CDATA[
		<p>
		This method uses the same code to implement two branches of an if else statement.
		</p>
		]]>
	</Details>
  </BugPattern>
  
  <!--
  **********************************************************************
   BugCodes
  **********************************************************************
   -->

  <BugCode abbrev="IL" >Infinite Loop</BugCode>
  <BugCode abbrev="VO" >Use of volatile</BugCode>
  <BugCode abbrev="UI" >Unsafe inheritance</BugCode>
  <BugCode abbrev="FL" >Use of floating point precision</BugCode>
  <BugCode abbrev="TEST" >Testing prototype and incomplete bug pattern</BugCode>
  <BugCode abbrev="IMSE" >Dubious catching of IllegalMonitorStateException</BugCode>
  <BugCode abbrev="CN" >Bad implementation of cloneable idiom</BugCode>
  <BugCode abbrev="FI" >Incorrect use of finalizers</BugCode>
  <BugCode abbrev="ES" >Checking String equality using == or !=</BugCode>
  <BugCode abbrev="ML" >Synchronization on updated field (Mutable Lock)</BugCode>
  <BugCode abbrev="UG" >Unsynchronized get method, synchronized set method</BugCode>
  <BugCode abbrev="IC" >Initialization circularity</BugCode>
  <BugCode abbrev="SI" >Suspicious static initializer</BugCode>
  <BugCode abbrev="IS" >Inconsistent synchronization</BugCode>
  <BugCode abbrev="IS2" >Inconsistent synchronization</BugCode>
  <BugCode abbrev="Eq" >Covariant equals()</BugCode>
  <BugCode abbrev="Co" >Covariant compareTo()</BugCode>
  <BugCode abbrev="HE" >Equal objects must have equal hashcodes</BugCode>
  <BugCode abbrev="AM" >API misuse</BugCode>
  <BugCode abbrev="Dm" >Dubious method used</BugCode>
  <BugCode abbrev="UR" >Uninitialized read of field in constructor</BugCode>
  <BugCode abbrev="RR" >Method ignores results of InputStream.read()</BugCode>
  <BugCode abbrev="NN" >Naked notify in method</BugCode>
  <BugCode abbrev="UW" >Unconditional wait in method</BugCode>
  <BugCode abbrev="SP" >Method spins on field</BugCode>
  <BugCode abbrev="DC" >Possible double check of field</BugCode>
  <BugCode abbrev="Wa" >Wait not in loop in method</BugCode>
  <BugCode abbrev="No" >Using notify() rather than notifyAll() in method</BugCode>
  <BugCode abbrev="DE" >Dropped or ignored exception</BugCode>
  <BugCode abbrev="Ru" >Method invokes run()</BugCode>
  <BugCode abbrev="It" >Incorrect definition of Iterator</BugCode>
  <BugCode abbrev="SnVI" >Serializable class with no Version ID</BugCode>
  <BugCode abbrev="Se" >Incorrect definition of Serializable class</BugCode>
  <BugCode abbrev="WS" >Class's writeObject() method is synchronized but nothing else is</BugCode>
  <BugCode abbrev="RS" >Class's readObject() method is synchronized</BugCode>
  <BugCode abbrev="SC" >Constructor invokes Thread.start()</BugCode>
  <BugCode abbrev="MS" >Mutable static field</BugCode>
  <BugCode abbrev="EI" >Method returning array may expose internal representation</BugCode>
  <BugCode abbrev="Nm" >Confusing method name(s)</BugCode>
  <BugCode abbrev="SS" >Unread field should be static?</BugCode>
  <BugCode abbrev="UuF" >Unused field</BugCode>
  <BugCode abbrev="UrF" >Unread field</BugCode>
  <BugCode abbrev="UwF" >Unwritten field</BugCode>
  <BugCode abbrev="SIC" >Inner class could be made static</BugCode>
  <BugCode abbrev="TLW" >Wait with two locks held</BugCode>
  <BugCode abbrev="RV" >Return value of method is ignored</BugCode>
  <BugCode abbrev="NP" >Null pointer dereference</BugCode>
  <BugCode abbrev="OS">Stream not closed on all paths</BugCode>
  <BugCode abbrev="PZLA" >Prefer zero length arrays to null to indicate no results</BugCode>
  <BugCode abbrev="UCF">Useless control flow</BugCode>
  <BugCode abbrev="RCN">Redundant comparison to null</BugCode>
  <BugCode abbrev="UL">Lock not released on all paths</BugCode>
  <BugCode abbrev="RC">Suspicious reference comparison</BugCode>
  <BugCode abbrev="EC">Suspicious equals() comparison</BugCode>
  <BugCode abbrev="MWN">Mismatched wait() or notify()</BugCode>
  <BugCode abbrev="SA">Useless self-assignment</BugCode>
  <BugCode abbrev="BIT">Suspicious bitwise logical expression</BugCode>
  <BugCode abbrev="LI">Unsynchronized Lazy Initialization</BugCode>
  <BugCode abbrev="JLM">Synchronization on JSR166 Lock</BugCode>
  <BugCode abbrev="UPM">Private method is never called</BugCode>
  <BugCode abbrev="EI2">Storing reference to mutable object</BugCode>
  <BugCode abbrev="NS">Suspicious use of non-short-circuit boolean operator</BugCode>
  <BugCode abbrev="ODR">Database resource not closed on all paths</BugCode>
  <BugCode abbrev="SBSC">String concatenation in loop using + operator</BugCode>
  <BugCode abbrev="ITA">Inefficient use of collection.toArray(new Foo[0])</BugCode>
  <BugCode abbrev="SW">Swing coding rules</BugCode>
  <BugCode abbrev="IJU">Improperly implemented JUnit TestCase</BugCode>
  <BugCode abbrev="BOA">Badly Overridden Adapter</BugCode>
  <BugCode abbrev="SF">Switch case falls thru</BugCode>
  <BugCode abbrev="BRSA">Bad ResultSet access</BugCode>
  <BugCode abbrev="SIO">Superfluous instanceof</BugCode>
  <BugCode abbrev="BAC">Bad Applet Constructor</BugCode>
  <BugCode abbrev="UOE">Use Object Equals</BugCode>
  <BugCode abbrev="STI">Suspicious Thread Interrupted</BugCode>
  <BugCode abbrev="DLS">Dead local store</BugCode>
  <BugCode abbrev="IP">Ignored parameter</BugCode>
  <BugCode abbrev="MF">Masked Field</BugCode>
  <BugCode abbrev="WMI">Wrong Map Iterator</BugCode>
  <BugCode abbrev="ISC">Instantiated Static Class</BugCode>
  <BugCode abbrev="REC">RuntimeException capture</BugCode>
  <BugCode abbrev="FE">Test for floating point equality</BugCode>
  <BugCode abbrev="UM">Unnecessary Math on constants</BugCode>
  <BugCode abbrev="CD">Circular Dependencies</BugCode>
  <BugCode abbrev="RI">Redundant Interfaces</BugCode>
  <BugCode abbrev="MTIA">Multithreaded Instance Access</BugCode>
  <BugCode abbrev="PS">Public Semaphores</BugCode>
  <BugCode abbrev="ICAST">Casting from integer values</BugCode>
  <BugCode abbrev="RE">Regular expressions</BugCode>
  <BugCode abbrev="SQL">SQL Injection</BugCode>
  <BugCode abbrev="ESync">Empty Synchronized blocks</BugCode>
  <BugCode abbrev="QF">Questionable for loops</BugCode>
  <BugCode abbrev="BC">Bad casts of object references</BugCode>
  <BugCode abbrev="IM">Questionable integer math</BugCode>
  <BugCode abbrev="ST">Misuse of static fields</BugCode>
  <BugCode abbrev="PZ">Bug inspired by Josh Bloch's and Neal Gafter's Programming Puzzlers</BugCode>
  <BugCode abbrev="SWL">Sleep with lock held</BugCode>
  <BugCode abbrev="J2EE">J2EE error</BugCode>
  <BugCode abbrev="DB">Duplicate Branches</BugCode>
</MessageCollection>
