<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- French translation provided by David Cotton :) -->
<MessageCollection xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:noNamespaceSchemaLocation="messagecollection.xsd">

  <!--
  **********************************************************************
  Plugin information
  **********************************************************************
  -->
  <Plugin>
    <ShortDescription>Plugin par défaut de FindBugs</ShortDescription>
    <Details>
<![CDATA[
<p>Ce plugin contient tous les détecteurs standards de FindBugs.</p>
]]>
    </Details>
  </Plugin>

  <!--
  **********************************************************************
  Detectors
  **********************************************************************
   -->

  <Detector class="edu.umd.cs.findbugs.detect.NoteSuppressedWarnings">
    <Details>
<![CDATA[
<p>Supprime les alarmes marquées par l'annotation edu.umd.cs.findbugs.annotations.NoteSuppressWarnings.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.NoteCheckReturnValue">
    <Details>
<![CDATA[
<p>Recherche les annotations demandant la vérification de la valeur renvoyée par une méthode.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.InheritanceUnsafeGetResource">
    <Details>
<![CDATA[
<p>Détecte les utilisations de this.getClass().getResource(...), qui peuvent donner des résultats inattendus si la classe est étendue par une classe d'un autre paquetage.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.InfiniteRecursiveLoop">
    <Details>
<![CDATA[
<p>Détecte les boucles récursives infinies.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.VolatileUsage">
    <Details>
<![CDATA[
<p>Détecte l'utilisation erronée de champs volatiles.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.EmptyZipFileEntry">
    <Details>
<![CDATA[
<p>Détecte la création d'entrées vides dans un fichier Zip.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.TestingGround">
    <Details>
<![CDATA[
<p>Ce détecteur est uniquement un point d'entrée pour tester de nouveaux détecteurs. Normalement, ce détecteur ne fait rien.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.SwitchFallthrough">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les ordres switch dont un cas déborde sur le suivant. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindFieldSelfAssignment">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les champs qui s'alimentent avec leur propre valeur. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindNonShortCircuit">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les utilisations suspectes des opérateurs booléens binaires (| et &amp; au lieu de || et &amp;&amp;).</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.DontCatchIllegalMonitorStateException">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les blocs try-catch qui interceptent une IllegalMonitorStateException.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindFloatMath">
    <Details>
<![CDATA[
<p>Ce détecteur repère les utilisations d'opérations mathématiques en simple précision (float).</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.CloneIdiom">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les erreurs dans l'implémentation de l'idiome des classes Cloneable.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.DroppedException">
    <Details>
<![CDATA[
<p>Ce détecteur détecte le code qui intercepte une exception sans la gérer. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>
  <Detector class="edu.umd.cs.findbugs.detect.DumbMethods">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les appels de méthodes inutiles, telle que le constructeur sans argument de String. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindDoubleCheck" >
    <Details>
<![CDATA[
<p>Ce détecteur recherche les contrôles de verrou par double vérification. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindFinalizeInvocations" >
    <Details>
<![CDATA[
<p>Ce détecteur repère les appels à finalize() et autres méthodes liées aux finaliseurs. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindHEmismatch" >
    <Details>
<![CDATA[
<p>Ce détecteur repère les problèmes dans la définition des méthodes hashCode() et equals(). C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindNakedNotify" >
    <Details>
<![CDATA[
<p>Ce détecteur recherche les appels à notify() qui ne semblent pas changer l'état d'un objet modifiable. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindReturnRef" >
    <Details>
<![CDATA[
<p>Ce détecteur repère les méthodes qui renvoient des données statiques modifiables. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindRunInvocations" >
    <Details>
<![CDATA[
<p>Ce détecteur détecte les appels à Thread.run(). C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindSpinLoop" >
    <Details>
<![CDATA[
<p>Ce détecteur recherche les boucles qui tournent à vide en lisant un champ. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindTwoLockWait" >
    <Details>
<![CDATA[
<p>Ce détecteur recherche les appels à wait() avec deux (ou plus) verrous en suspens. C'est un détecteur lent.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindUnconditionalWait" >
    <Details>
<![CDATA[
<p>Ce détecteur recherche les appels à wait() qui ne sont pas dans une condition ou une boucle. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindUninitializedGet" >
    <Details>
<![CDATA[
<p>Ce détecteur repère les lectures de champs non initialisés dans les constructeurs. C'est un constructeur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindUnsyncGet" >
    <Details>
<![CDATA[
<p>Ce détecteur recherche les méthodes getXXX et setXXX dont le getXXX n'est pas synchronisé alors que le setXXX l'est. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.InitializationChain" >
    <Details>
<![CDATA[
<p>Ce détecteur recherche les dépendances circulaires potentielles dans l'initialisation des classes. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.IteratorIdioms" >
    <Details>
<![CDATA[
<p>Ce détecteur recherche les problèmes dans la définition des classes Iterator. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.LockedFields" disabled="true" >
    <Details>
<![CDATA[
<p>Ce détecteur recherche les champs accédés de façon inconsistante par rapport aux verrous. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.EqStringTest" >
    <Details>
<![CDATA[
<p>Ce détecteur repère les comparaisons d'objets String utilisant les opérateurs == ou !=. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.MutableLock" >
    <Details>
<![CDATA[
<p>Ce détecteur recherche les synchronisations en lecture sur des champs modifiables. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.MutableStaticFields" >
    <Details>
<![CDATA[
<p>Ce détecteur repère les champs statiques qui pourraient être modifiés par du code malveillant. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.Naming" >
    <Details>
<![CDATA[
<p>Ce détecteur recherche les méthodes au nom suspect. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.ReadReturnShouldBeChecked" >
    <Details>
<![CDATA[
<p>Ce détecteur recherche les appels à InputStream.read() ou InputStream.skip() qui ignorent la valeur renvoyée. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.SerializableIdiom" >
    <Details>
<![CDATA[
<p>Ce détecteur recherche les problèmes potentiels dans l'implémentation des classes Serializable. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.StartInConstructor" >
    <Details>
<![CDATA[
<p>Ce détecteur repère les constructeurs qui lancent des threads. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.UnreadFields" >
    <Details>
<![CDATA[
<p>Ce détecteur recherche les champs dont la valeur n'est jamais lue. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.WaitInLoop" >
    <Details>
<![CDATA[
<p>Ce détecteur détecte les appels à wait() qui ne sont pas dans une boucle. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.BCPMethodReturnCheck" >
    <Details>
<![CDATA[
<p>Ce détecteur recherche les appels de méthodes qui ignorent la valeur de retour de façon suspecte. C'est un détecteur lent.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindNullDeref">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les endroits où une NullPointerException pourrait être déclenchée. Il recherche également les comparaisons redondantes de références avec null. C'est un détecteur modérément rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindOpenStream">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les objets contenant un flux IO qui ne semble pas être fermé dans tous les chemins d'exécution possibles. C'est un détecteur modérément rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.PreferZeroLengthArrays">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les méthodes qui renvoient soit un tableau, soit une référence explicite à null. Renvoyer un tableau de longueur nulle est généralement préférable dans ce cas au renvoi d'une référence à null. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindUselessControlFlow">
    <Details>
<![CDATA[
<p>Ce détecteur repère les pavés de contrôle du flux d'exécution qui n'ont aucun effet. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindUnreleasedLock">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les verrous type JSR-166 (java.util.concurrent) qui sont acquis mais non libérés dans tous les chemins d'exécution possible d'une méthode. C'est un détecteur modérément rapide. Notez que pour utiliser ce détecteur vous devez avoir le paquetage java.util.concurrent dans le classpath (ou être en train d'analyser le paquetage lui-même).</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindRefComparison">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les endroits où deux valeurs sont comparées par référence avec l'opérateur == ou !=, et que la classe est d'un type (java.lang.String par exemple) tel que comparer les valeurs par références est généralement une erreur. C'est un détecteur modérément rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindMismatchedWaitOrNotify">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les appels à wait(), notify() ou notifyAll() qui ne semblent pas être effectués sur un objet verrouillé. C'est un détecteur modérément rapide. <b>Ce détecteur est désactivé parce qu'il est toujours en cours de développement et produit trop de fausses alarmes.</b></p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindInconsistentSync2" >
    <Details>
<![CDATA[
<p>Ce détecteur détecte les champs utilisés de manière inconsistante du point de vue des verrous. C'est un détecteur lent.</p>
]]>
    </Details>
  </Detector>

 <Detector class="edu.umd.cs.findbugs.detect.FindLocalSelfAssignment2">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les variables locales qui s'auto-alimentent. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.IncompatMask">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les expressions logiques binaires suspectes. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.LazyInit">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les initialisations paresseuses appliquées à des champs non volatiles. C'est un détecteur modérément rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindJSR166LockMonitorenter">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les synchronisations ordinaires appliquées à des verrous type JSR166. C'est un détecteur modérément rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindUncalledPrivateMethods">
    <Details>
<![CDATA[
<p>Ce détecteur repère les méthodes privées qui ne sont jamais appelées. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.StringConcatenation">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les boucles contenant des concaténations de String utilisant +. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.InefficientToArray">
    <Details>
<![CDATA[
<p>Ce détecteur recherche le code qui transforme des Collections en tableaux en passant un tableau de longueur nulle à la méthode toArray(). C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.InvalidJUnitTest">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les tests JUnit mal formés. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.BadlyOverriddenAdapter">
    <Details>
<![CDATA[
<p>Ce détecteur recherche le code qui étend une classe Adapter et surcharge une méthode Listener avec une signature erronée. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.BadResultSetAccess">
    <Details>
<![CDATA[
<p>Ce détecteur repère les appels aux méthodes getXXX ou setXXX d'un ResultSet avec un champ index à 0. Les indexes des champs ResultSet commençant à 1, c'est toujours une erreur. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.SuperfluousInstanceOf">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les tests de type effectués avec l'opérateur instanceof alors qu'une détermination statique serait possible. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.BadAppletConstructor">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les constructeurs d'applet invoquant des méthodes de l'applet mère non encore initialisées par init(). Ces appels feraient échouer le constructeur. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.UseObjectEquals">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les appels à equals(java.lang.Object) sur des tableaux ou des classes finales qui ne surchargent pas la méthode equals de la classe Object. Celà signifie que la sémantique de equals est la même que ==, ce qui est probablement une erreur.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.SuspiciousThreadInterrupted">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les appels à Thread.interrupted() à partir d'un contexte non statique. Si l'appel provient de Thread.currentThread().interrupted(), l'exercice est inutile et il suffit d'utiliser Thread.interrupted(). Si l'appel provient d'un objet thread quelconque, c'est probablement une erreur puisque interrupted() est toujours appelé sur le thread en cours.</p>
]]>
    </Details>
  </Detector>

<Detector class="edu.umd.cs.findbugs.detect.FindSqlInjection">
<Details>
<![CDATA[
<p>
Ce détecteur utilise l'analyse de flôt de données pour rechercher les invocations
de méthodes execute sur des commandes SQL (statement) dans lesquelles
l'argument passé n'est pas une chaîne constante.
</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindDeadLocalStores">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les assignations de variables locales qui ne sont jamais lues. En raison de la façon dont les variables locales finales sont générées dans le bytecode, des faux positifs sont fréquemment détectés, ce qui explique pourquoi ce détecteur est souvent désactivé. C'est un détecteur moyennement rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindMaskedFields">
    <Details>
<![CDATA[
<p>Ce détecteur repère les champs du niveau classe qui sont masqués par des champs locaux dans les méthodes. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

<Detector class="edu.umd.cs.findbugs.detect.WrongMapIterator">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les accès à la valeur d'une entrée Map en utilisant une clé récupérée à partir d'un itérateur sur keySet. C'est un détecteur rapide.</p>
]]>
   </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.InstantiateStaticClass">
    <Details>
<![CDATA[
<p>Ce détecteur recherche le code qui crée des objets basés sur des classes qui ne définissent que des méthodes statiques. C'est un détecteur rapide.</p>
]]>
   </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.RuntimeExceptionCapture">
     <Details>
<![CDATA[
<p>Ce détecteur recherche les clauses catch qui interceptent Exception, alors qu'aucun code dans le bloc ne déclenche Exception.</p>
]]>
     </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindFloatEquality">
      <Details>
<![CDATA[
<p>Recherche les tests d'égalité en virgule flottante. C'est un détecteur rapide.</p>
]]>
      </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindUnsatisfiedObligation">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les flux I/O et les resources de bases de données qui ne sont pas correctement clos dans tous les chemins d'éxécution de la méthode. C'est un détecteur lent.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.UnnecessaryMath">
    <Details>
<![CDATA[
<p>Ce détecteur recherche le code qui appelle les méthodes statiques java.lang.Math sur des valeurs constantes, dont le résultat est connu et constant. Il est plus rapide et parfois plus précis d'utiliser le résultat constant à la place.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindCircularDependencies">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les dépendances circulaires entre les classes. C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.RedundantInterfaces">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les classes qui déclarent implémenter la même interface qu'une de leur super-classes. C'est redondant, puisque si la super-classe implémente l'interface, toutes les sous-classes l'implémentent.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.MultithreadedInstanceAccess">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les problèmes potentiels avec l'emploi des cadres de travail Struts ou j2ee (Servlet).
C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.PublicSemaphores">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les classes publiques qui synchronisent et utilisent wait(), notify() ou notifyAll()
avec la référence this. Ceci expose l'implémentation de la synchronisation comme un artefact
public de la classe. Les objets utilisant une instance de cette classe pourraient l'utiliser également
comme leur propre objet de synchronisation et provoquer le chaos dans l'implémentation de base.
C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.MethodReturnCheck">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les appels vers les méthodes où la valeur de retour
est ignorée de façon suspicieuse.
C'est un détecteur rapide.</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.IDivResultCastToDouble">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les endroits où le résultat de la division de deux entiers
est transtypée en nombre flottant à double précision. Souvent, l'intention initiale
était de transtyper les opérandes avant de procéder à la division.
C'est un détecteur rapide.</p>
</p>
]]>
    </Details>
  </Detector>
  <Detector class="edu.umd.cs.findbugs.detect.FindBadCast">
    <Details>
<![CDATA[
<p>
Ce détecteur recherche les transtypages incorrects.
</p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.BadSyntaxForRegularExpression">
    <Details>
<![CDATA[
<p>Ce détecteur recherche les expressions régulières à la syntaxe invalide.</p>
]]>
    </Details>
  </Detector>
  <Detector class="edu.umd.cs.findbugs.detect.FindPuzzlers">
    <Details>
<![CDATA[
<p>Ce détecteur recherche divers problèmes mineurs mentionnés par Joshua Bloch et Neal Gafter
dans leur travail sur Programming Puzzlers.
  </p>
]]>
    </Details>
  </Detector>

  <Detector class="edu.umd.cs.findbugs.detect.FindBugsSummaryStats">
    <Details>
<![CDATA[
<p>Ce détecteur rassemble juste des statistiques sur le processus d'analyse.</p>
]]>
    </Details>
  </Detector>

  <!--
  **********************************************************************
  BugPatterns
  **********************************************************************
   -->

  <BugPattern type="SW_SWING_METHODS_INVOKED_IN_SWING_THREAD">
    <ShortDescription>Certaines méthodes Swing devraient être invoquées uniquement à partir du thread de gestion des événements Swing</ShortDescription>
    <LongDescription>L'appel à la méthode Swing dans {1} doit être effectué dans le thread de gestion des événements Swing</LongDescription>
    <Details>
<![CDATA[
<p>(<a href="http://java.sun.com/developer/JDCTechTips/2003/tt1208.html#1">Dixit JDC Tech Tip</a>): The Swing methods
show(), setVisible(), and pack() will create the associated peer for the frame. With the creation of the peer, the system creates the event dispatch thread. This makes things problematic because the event dispatch thread could be notifying listeners while pack and validate are still processing. This situation could result in two threads going through the Swing component-based GUI -- it's a serious flaw that could result in deadlocks or other related threading issues. A pack call causes components to be realized. As they are being realized (that is, not necessarily visible), they could trigger listener notification on the event dispatch thread.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="IL_INFINITE_RECURSIVE_LOOP">
    <ShortDescription>Boucle récursive infinie</ShortDescription>
    <LongDescription>Il y a une boucle récursive infinie apparente dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode s'appelle elle-même sans condition. Celà semble indiquer une boucle récursive infinie qui se terminera sur un débordement de la pile.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="VO_VOLATILE_REFERENCE_TO_ARRAY">
    <ShortDescription>Une référence volatile à un tableau ne traite pas les éléments du tableau comme volatiles</ShortDescription>
    <LongDescription>{1} est une référence volatile à un tableau ; les éléments du tableau ne sont pas volatiles.</LongDescription>
    <Details>
<![CDATA[
<p>Ceci déclare une référence volatile à un tableau, ce qui n'est peut-être pas ce que vous voulez. Avec une référence volatile à un tableau, les lectures et écritures de la référence au tableau sont traitées comme volatiles, mais les éléments ne sont pas volatiles. Pour obtenir des éléments volatiles, vous devez utiliser l'une des classes de tableaux atomiques de java.util.concurrent (inclus dans Java 5.0).</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="UI_INHERITANCE_UNSAFE_GETRESOURCE">
    <ShortDescription>L'utilisation de GetResource peut-être instable si la classe est étendue</ShortDescription>
    <LongDescription>L'utilisation de GetResource dans {1} peut-être instable si la classe est étendue</LongDescription>
    <Details>
<![CDATA[
<p>Appeler this.getClass().getResource(...) peut rendre des résultats différents de ceux attendus si la classe est étendue par une classe d'un autre paquetage.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="TESTING">
    <ShortDescription>Test</ShortDescription>
    <LongDescription>Alarme déclenchée dans les tests de {1}</LongDescription>
    <Details>
<![CDATA[
<p>Cette alarme n'est générée que par les nouveaux détecteurs de bogues, à l'implémentation incomplète.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="AM_CREATES_EMPTY_ZIP_FILE_ENTRY">
    <ShortDescription>Crée une entrée de fichier Zip vide</ShortDescription>
    <LongDescription>Entrée de fichier Zip vide créée dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>Le code appelle putNextEntry(), immédiatement suivi d'un appel à closeEntry(). Ceci crée une entrée de fichier Zip vide. Le contenu des entrées devrait être écrit dans le fichier Zip entre les appels à
putNextEntry() et closeEntry().</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="AM_CREATES_EMPTY_JAR_FILE_ENTRY">
    <ShortDescription>Crée une entrée de fichier Jar vide</ShortDescription>
    <LongDescription>Entrée de fichier Jar vide créée dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>Le code appelle putNextEntry(), immédiatement suivi d'un appel à closeEntry(). Ceci crée une entrée de fichier Jar vide. Le contenu des entrées devrait être écrit dans le fichier Jar entre les appels à
putNextEntry() et closeEntry().</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="IMSE_DONT_CATCH_IMSE">
    <ShortDescription>Interception douteuse d'une IllegalMonitorStateException</ShortDescription>
    <LongDescription>Interception douteuse d'une IllegalMonitorStateException dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>IllegalMonitorStateException n'est généralement déclenchée que dans le cas d'une faille dans la conception du code (appeler wait() ou notify() sur un objet dont on ne possède pas le verrou).</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="FL_MATH_USING_FLOAT_PRECISION">
    <ShortDescription>La méthode effectue des calculs en simple précision (float)</ShortDescription>
    <LongDescription>{1} effectue des calculs en simple précision (float)</LongDescription>
    <Details>
<![CDATA[
<p>La méthode effectue des opérations mathématiques en simple précision (float). Les float peuvent être très imprécis. Par exemple, 16777216.0f + 1.0f = 16777216.0f. Envisagez d'utiliser la double précision à la place.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="CN_IDIOM">
    <ShortDescription>La classe implémente Cloneable mais ne définit et n'utilise pas la méthode clone()</ShortDescription>
    <LongDescription>La classe {0} implémente Cloneable mais ne définit et n'utilise pas la méthode clone()</LongDescription>
    <Details>
<![CDATA[
<p>La classe implémente Cloneable sans définir ou utiliser la méthode clone().</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="CN_IDIOM_NO_SUPER_CALL">
    <ShortDescription>La méthode clone() n'appelle pas super.clone()</ShortDescription>
    <LongDescription>La méthode clone() {1} n'appelle pas super.clone()</LongDescription>
    <Details>
<![CDATA[
<p>Cette classe définit une méthode clone() qui n'appelle pas super.clone(),
et n'est pas finale. Si cette classe ("<i>A</i>") est étendue par une classe fille ("<i>B</i>"),
et que la classe fille <i>B</i> appelle super.clone(), alors il est probable que la méthode clone() de <i>B</i> retournera un objet de type <i>A</i>, ce qui viole le contrat standard de clone().</p>
<p>Si toutes les méthodes clone() appellent super.clone(), elles ont alors la garantie d'utiliser Object.clone(), qui retourne toujours un objet du type correct.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="DE_MIGHT_DROP">
    <ShortDescription>La méthode peut déclencher une exception</ShortDescription>
    <LongDescription>{1} peut déclencher {3}</LongDescription>
    <Details>
<![CDATA[
  <p>Cette méthode peut déclencher une exception. En général, les exceptions doivent être gérées ou transmises hors de la méthode.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="DE_MIGHT_IGNORE">
    <ShortDescription>La méthode peut ignorer une exception</ShortDescription>
    <LongDescription>{1} peut ignorer {3}</LongDescription>
    <Details>
<![CDATA[
  <p>Cette méthode peut ignorer une exception. En général, les exceptions doivent être gérées ou transmises hors de la méthode.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="DM_EXIT">
    <ShortDescription>La méthode invoque System.exit(...)</ShortDescription>
    <LongDescription>{1} invoque System.exit(...), qui stoppe toute la JVM</LongDescription>
    <Details>
<![CDATA[
  <p>Invoquer System.exit() arrête toute la JVM. Celà ne doit être fait que lorsque c'est nécessaire. De tels appels rendent difficile ou impossible l'invocation de votre code par d'autre code. Envisagez de déclencher une RuntimeException à la place.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="DM_STRING_CTOR">
    <ShortDescription>La méthode invoque le constructeur inutile String(String) ; utilisez juste l'argument</ShortDescription>
    <LongDescription>{1} invoque le constructeur inutile String(String) ; utilisez juste l'argument</LongDescription>
    <Details>
<![CDATA[
  <p>Utiliser le constructeur java.lang.String(String) gaspille de la mémoire puisque l'objet ainsi construit serait fonctionnellement identique à la chaîne passée en paramètre. Utilisez juste la chaîne en argument directement.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="DM_STRING_VOID_CTOR">
    <ShortDescription>La méthode invoque le constructeur inutile String() ; utilisez juste ""</ShortDescription>
    <LongDescription>{1} invoque le constructeur inutile String() ; utilisez juste ""</LongDescription>
    <Details>
<![CDATA[
  <p>Créer un nouveau objet java.lang.String en utilisant le constructeur sans argument gaspille de la mémoire parce que l'objet ainsi créé serait fonctionnellement identique à la constante de chaîne vide "". Java garantie que les chaînes constantes identiques seront représentées par le même objet String. C'est pourquoi vous devriez directement utiliser la constante de chaîne vide.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="DM_STRING_TOSTRING">
    <ShortDescription>La méthode appel toString() sur un objet String ; utilisez directement l'objet String</ShortDescription>
    <LongDescription>La méthode {1} appel toString() sur un objet String ; utilisez directement l'objet String</LongDescription>
    <Details>
<![CDATA[
  <p>Appeler String.toString() est juste une opération redondante. Utilisez directement l'objet String.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="DM_GC">
    <ShortDescription>Ramasse-miettes explicite ; extrêmement douteux sauf dans du code de banc d'essai</ShortDescription>
    <LongDescription>{1} force le déclenchement du ramasse-miettes ; extrêmement douteux sauf dans du code de banc d'essai</LongDescription>
    <Details>
<![CDATA[
  <p>Le code appelle explicitement le ramasse-miettes. Mis à part l'emploi spécifique dans un banc d'essai, c'est très douteux.</p>
  <p>Dans le passé, les cas où des personnes ont explicitement invoqué le ramasse-miettes dans des méthodes telles que close() ou finalize() ont creusé des gouffres dans les performances. Le ramasse-miettes peut-être très coûteux. Toute situation qui force des centaines ou des milliers de ramasse-miettes mettra à genoux une machine.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="DM_BOOLEAN_CTOR">
    <ShortDescription>La méthode invoque le constructeur inutile Boolean() ; utilisez Boolean.valueOf(...) à la place</ShortDescription>
    <LongDescription>{1} invoque le constructeur inutile Boolean() ; utilisez Boolean.valueOf(...) à la place</LongDescription>
    <Details>
<![CDATA[
  <p>Créer de nouvelles instances de java.lang.Boolean gaspille la mémoire puisque les objets Boolean sont immuables et qu'il n'y a que deux valeurs utiles de ce type. Utilisez à la place la méthode Boolean.valueOf() pour créer des objets Boolean.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="DM_STRING_EMPTY_EQUALS">
    <ShortDescription>La méthode invoque String.equals("") ; utilisez String.length() == 0 à la place</ShortDescription>
    <LongDescription>La méthode {1} invoque String.equals("") ; utilisez String.length() == 0 à la place</LongDescription>
    <Details>
<![CDATA[
  <p>Un objet est ici comparé à l'objet String vide au moyen de la méthode equals(). Vérifier que l'objet String à une longueur de zéro peut-être plus rapide, et retire des constantes String du fichier de la classe.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="DM_CONVERT_CASE">
    <ShortDescription>La méthode appelle les String.toUpperCase() ou String.toLowerCase ; utilisez plutôt la version paramètrée par une Locale</ShortDescription>
    <LongDescription>La méthode {1} invoque String.toUpperCase() ou String.toLowerCase ; utilisez plutôt la version acceptant une Locale</LongDescription>
    <Details>
<![CDATA[
<p>Une chaîne est mise en majuscules ou minuscules en fonction de jeu de caractères par défaut de la machine. Ceci peut entraîner des conversions erronées sur les caractères internationaux. Utilisez String.toUpperCase(Locale l) ou String.toLowerCase(Locale l) à la place.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="DM_BOXED_PRIMITIVE_TOSTRING">
    <ShortDescription>Méthode allouant une primitive boxed pour appeler toString</ShortDescription>
    <LongDescription>La méthode {1} alloue une primitive boxed juste pour appeler toString</LongDescription>
    <Details>
<![CDATA[
  <p>Une primitive boxed est allouée juste pour appeler toString(). Il est plus efficace de simplement utiliser la forme statique de toString qui accepte la valeur primitive. Donc,</p>
  <table>
     <tr><th>Remplacer...</th><th>Avec...</th></tr>
     <tr><td>new Integer(1).toString()</td><td>Integer.toString(1)</td></tr>
     <tr><td>new Long(1).toString()</td><td>Long.toString(1)</td></tr>
     <tr><td>new Float(1.0).toString()</td><td>Float.toString(1.0)</td></tr>
     <tr><td>new Double(1.0).toString()</td><td>Double.toString(1.0)</td></tr>
     <tr><td>new Byte(1).toString()</td><td>Byte.toString(1)</td></tr>
     <tr><td>new Short(1).toString()</td><td>Short.toString(1)</td></tr>
     <tr><td>Boolean.valueOf(true).toString()</td><td>Boolean.toString(true)</td></tr>
  </table>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="DM_NEW_FOR_GETCLASS">
    <ShortDescription>Méthode allouant un objet juste pour obtenir la classe</ShortDescription>
    <LongDescription>La méthode {1} alloue un objet juste pour obtenir la classe correspondante</LongDescription>
    <Details>
<![CDATA[
  <p>Cette méthode alloue un objet juste pour appeler sa méthode getClass() afin d'obtenir l'objet Class correspondant. Il est plus simple d'accèder directement à la propriété .class de la classe.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="DM_NEXTINT_VIA_NEXTDOUBLE">
    <ShortDescription>Utiliser la méthode nextInt de Random plutôt que nextDouble pour générer un entier aléatoire</ShortDescription>
    <LongDescription>La méthode {1} utilise la méthode nextDouble de Random pour générer un entier aléatoire : utiliser nextInt est plus efficace</LongDescription>
    <Details>
<![CDATA[
  <p>Si r est un java.util.Random, vous pouvez générer un nombre aléatoire entre 0 et n-1 en utilisant r.nextInt(n) plutôt que (int)(r.nextDouble() * n).</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">
    <ShortDescription>Une chaîne non constante est passée à la méthode execute d'une commande SQL</ShortDescription>
    <LongDescription>La méthode {1} passe une chaîne non constante à la méthode execute d'une commande SQL (statement)</LongDescription>
    <Details>
<![CDATA[
  <p>Cette méthode invoque la méthode execute d'une commande SQL (statement) avec une chaîne
  qui semble générée dynamiquement. Préférer la préparation de la commande avec
  un PreparedStatement, c'est plus efficace et bien moins vulnérable aux attaques
  par injection SQL (insertion de code SQL malveillant au sein d'une requête).
</p>
]]>
    </Details>
  </BugPattern>


  <BugPattern type="DM_USELESS_THREAD">
    <ShortDescription>Thread créé avec la méthode run vide par défaut</ShortDescription>
    <LongDescription>La méthode {1} crée un thread utilisant la méthode run vide par défaut</LongDescription>
    <Details>
<![CDATA[
  <p>Cette méthode crée un thread sans spécifier de méthode run, soit par dérivation de la classe Thread, soit en transmettant un objet Runnable. Ce thread ne fait donc rien sauf perdre du temps.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="DC_DOUBLECHECK">
    <ShortDescription>Possible double vérification d'un champ</ShortDescription>
    <LongDescription>Possible double vérification sur {2} dans {1}</LongDescription>
    <Details>
<![CDATA[
  <p>Cette méthode contient peut-être une instance de verrou par double vérification. Cet idiome n'est pas correct vis-à-vis de la sémantique du modèle de mémoire Java. Pour plus d'informations, cf. la page <a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html"
  >http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a>.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="FI_PUBLIC_SHOULD_BE_PROTECTED">
    <ShortDescription>Un finaliseur devrait être protégé, pas public</ShortDescription>
    <LongDescription>{1} est public ; il devrait être protégé</LongDescription>
    <Details>
<![CDATA[
  <p>La méthode finalize() d'une classe devrait avoir un accès protected,
pas public.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="FI_EMPTY">
    <ShortDescription>Un finaliseur vide devrait être supprimé</ShortDescription>
    <LongDescription>{1} est vide et devrait être supprimé</LongDescription>
    <Details>
<![CDATA[
  <p>Les méthodes finalize() vides sont inutiles, donc elles devraient être supprimées.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="FI_NULLIFY_SUPER">
    <ShortDescription>Un finaliseur rend inutile celui de sa super-classe</ShortDescription>
    <LongDescription>{1} rend inutile {2}.finalize() ; est-ce voulu ?</LongDescription>
    <Details>
<![CDATA[
  <p>Cette méthode finalize() vide rend explicitement inutile tout finaliseur défini dans les super-classes. Toute action définie dans un finaliseur d'une superclasse sera ignorée. A moins que celà ne soit voulu, supprimer cette méthode.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="FI_USELESS">
    <ShortDescription>Le finaliseur ne fait rien sauf appeler celui de la super-classe</ShortDescription>
    <LongDescription>{1} ne fait rien d'autre qu'appeler super.finalize() ; supprimez le</LongDescription>
    <Details>
<![CDATA[
  <p>La seule chose que cette méthode finalize() fait est d'appeler la méthode finalize() de la super-classe, ce qui la rend redondante. Supprimez la.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="FI_MISSING_SUPER_CALL">
    <ShortDescription>Le finaliseur n'appelle pas le finaliseur de la super-classe</ShortDescription>
    <LongDescription>{1} oublie d'appeler super.finalize(), donc {2}.finalize() n'est jamais appelé</LongDescription>
    <Details>
<![CDATA[
  <p>Cette méthode finalize() n'appelle pas la méthode finalize() de sa classe mère ; donc toutes les actions définies au niveau de la classe mère seront ignorées. Ajoutez un appel à super.finalize().</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="FI_EXPLICIT_INVOCATION">
    <ShortDescription>Invocation explicite d'un finaliseur</ShortDescription>
    <LongDescription>{1} invoque explicitement {2}</LongDescription>
    <Details>
<![CDATA[
  <p>Cette méthode contient un appel explicite à la méthode finalize() d'un objet. Les méthodes finalize() étant sensées n'être appelées qu'une fois, et uniquement par la JVM, c'est une mauvaise idée.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="EQ_SELF_USE_OBJECT">
    <ShortDescription>Définition d'une méthode equals() covariante, Object.equals(Object) est hérité</ShortDescription>
    <LongDescription>{0} définit une méthode equals({0}) et utilise Object.equals(Object)</LongDescription>
    <Details>
<![CDATA[
  <p>Cette classe définit une version covariante de la méthode equals(), mais appelle la méthode normale equals(Object) définie dans la classe de base java.lang.Object. La classe devrait probablement définir une version non covariante de equals(). (C'est-à-dire une méthode avec la signature boolean equals(java.lang.Object).</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="EQ_SELF_NO_OBJECT">
    <ShortDescription>Définition d'une méthode equals() covariante</ShortDescription>
    <LongDescription>{0} définit la méthode equals({0}) mais pas equals(Object)</LongDescription>
    <Details>
<![CDATA[
  <p>Cette classe définit une version covariante de equals(). Pour surcharger correctement la méthode equals() de java.lang.Object, le paramètre de equals() doit être du type java.lang.Object.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="CO_SELF_NO_OBJECT">
    <ShortDescription>Définition d'une méthode compareTo() covariante</ShortDescription>
    <LongDescription>{0} définit une méthode compareTo({0}) mais pas compareTo(Object)</LongDescription>
    <Details>
<![CDATA[
  <p>Cette classe définit une version covariante de compareTo(). Pour correctement surcharger la méthode compareTo() de l'interface Comparable, le paramètre de compareTo() doit être du type java.lang.Object.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="HE_HASHCODE_USE_OBJECT_EQUALS">
    <ShortDescription>La classe définit hashCode() et utilise Object.equals()</ShortDescription>
    <LongDescription>{0} définit hashCode() et utilise Object.equals()</LongDescription>
    <Details>
<![CDATA[
  <p>Cette classe définit une méthode hashCode() mais hérite la méthode equals() de java.lang.Object (qui définit l'égalité par comparaison des références des objets). Bien que celà satisfasse certainement le contrat indiquant que les objets égaux doivent avoir des codes de hachage égaux, ce n'est certainement pas ce qui était voulu lors de la surcharge de la méthode hashCode() (Surcharger hashCode()
implique que l'identité des objets soit basée sur des critères plus compliqués qu'une simple égalités des références.)</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="HE_HASHCODE_NO_EQUALS">
    <ShortDescription>La classe définit hashCode() mais pas equals()</ShortDescription>
    <LongDescription>{0} définit hashCode() mais pas equals()</LongDescription>
    <Details>
<![CDATA[
  <p>Cette classe définit une méthode hashCode() mais pas de méthode equals(). C'est pourquoi cette classe peut violer le contrat indiquant que des objets identiques doivent avoir des codes de hachage identiques.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="HE_EQUALS_USE_HASHCODE">
    <ShortDescription>La classe définit equals() et utilise Object.hashCode()</ShortDescription>
    <LongDescription>{0} définit equals() et utilise Object.hashCode()</LongDescription>
    <Details>
<![CDATA[
  <p>Cette classe surcharge equals(Object), pas hashCode(), et hérite de l'implémentation de hashCode() issue de java.lang.Object (qui renvoie le code de hachage d'identité, une valeur arbitraire assignée à l'objet par la JVM). C'est pourquoi la classe a des chances de violer le contrat impliquant que des objets égaux doivent avoir des codes de hachage identiques.</p>
  <p>Si vous ne souhaitez pas définir une méthode hashCode() et/ou ne croyez pas que l'objet soit un jour mis dans des HashMap/Hashtable, définissez une méthode hashCode() qui déclenche une UnsupportedOperationException.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="HE_INHERITS_EQUALS_USE_HASHCODE">
    <ShortDescription>La classe hérite de equals() et utilise Object.hashCode()</ShortDescription>
    <LongDescription>{0} hérite de equals() et utilise de Object.hashCode()</LongDescription>
    <Details>
<![CDATA[
  <p>Cette classe hérite de la méthode equals()(Object) d'une super-classe abstraite, et de la méthode hashCode() de l'objet java.lang.Object (qui renvoi le code de hachage d'identité, une valeur arbitraire assignée à l'objet par la JVM). C'est pourquoi la classe viole probablement le contrat indiquant que des objets égaux doivent avoir des codes de hachage identiques.</p>
  <p>Si vous ne souhaitez pas définir une méthode hashCode() et/ou ne pensez pas que l'objet puisse un jour être mis dans des HashMap/Hashtable, définissez une méthode hashCode() déclenchant une UnsupportedOperationException.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="HE_EQUALS_NO_HASHCODE">
    <ShortDescription>La classe définit equals() mais pas hashCode()</ShortDescription>
    <LongDescription>{0} définit equals() mais pas hashCode()</LongDescription>
    <Details>
<![CDATA[
  <p>Cette classe surcharge equals(Object), mais pas hashCode(). C'est pourquoi la classe peut violer le contrat indiquant des objets égaux doivent avoir des codes de hachage identiques.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="EQ_ABSTRACT_SELF">
    <ShortDescription>Une classe abstraite définit une méthode equals() covariante</ShortDescription>
    <LongDescription>La classe abstraite {0} définit une méthode equals({0})</LongDescription>
    <Details>
<![CDATA[
  <p>Cette classe définit une version covariante de la méthode equals(). Pour surcharge correctement la méthode equals() de java.lang.Object, le paramètre de equals() doit être du type java.lang.Object.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="ES_COMPARING_STRINGS_WITH_EQ">
    <ShortDescription>Comparaison d'objets String utilisant == ou !=</ShortDescription>
    <LongDescription>Comparaison d'objets String utilisant == ou != dans {1} </LongDescription>
    <Details>
<![CDATA[
  <p>Ce code compare des objets java.lang.String au moyen de l'égalité par référence des opérateurs == ou !=. A moins que les deux chaînes ne soient des constantes dans le fichier source ou aient été internalisées au moyen de la méthode String.intern(), deux chaînes identiques peuvent être représentées par deux objets String différents. Envisagez d'utiliser la méthode equals(Object) à la place.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="CO_ABSTRACT_SELF">
    <ShortDescription>Une classe abstraite définit une méthode compareTo() covariante</ShortDescription>
    <LongDescription>La classe abstraite {0} définit une méthode compareTo({0})</LongDescription>
    <Details>
<![CDATA[
  <p>Cette classe définit une version covariante de compareTo(). Pour surcharger correctement la méthode compareTo() de l'interface Comparable, le paramètre de compareTo() doit être du type java.lang.Object.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="IS2_INCONSISTENT_SYNC">
    <ShortDescription>Synchronisation incohérente</ShortDescription>
    <LongDescription>Synchronisation incohérente de {1}; verrouillée à {2}%</LongDescription>
    <Details>
<![CDATA[
  <p>Les champs de cette classe semblent être accédés de façon incohérente vis-à-vis de la synchronisation. Le détecteur de bogue juge que :
  <ol>
  <li>la classe contient un mélange d'accès verrouillés et non verrouillés,</li>
  <li>au moins un des accès verrouillés est effectué par une des propres méthodes de la classe,</li>
  <li>le nombre d'accès (lectures et écritures) non synchronisés ne représente pas plus d'un tiers de tous les accès, avec plus de deux fois plus d'écritures que de lectures.</li>
  </ol>
  </p>
  <p>Un bogue typique déclenchant ce détecteur est l'oubli de la synchronisation sur l'une des méthodes d'une classe qui essaye d'être sûre vis-à-vis des threads.</p>
  <p>Vous pouvez sélectionner les noeuds nommés "Accès non synchronisés" pour avoir la position exacte dans le code où le détecteur pense qu'un champ est accédé sans synchronisation.</p>
  <p>Notez qu'il y a diverses sources d'inexactitude dans ce détecteur ; par exemple, le détecteur ne peut pas repérer statiquement toutes les situations dans lesquelles un verrou est obtenu. En fait, même lorsque le détecteur repère effectivement des accès avec et sans verrou, le code concerné peut quand même être correct.</p>
  <p>Cette description se réfère à la version "IS2" du détecteur, qui est plus précise pour détecter les accès avec et sans verrous que l'ancien détecteur "IS".</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NN_NAKED_NOTIFY">
    <ShortDescription>Appel notify() isolé dans une méthode</ShortDescription>
    <LongDescription>Présence d'un notify() isolé dans {1}</LongDescription>
    <Details>
<![CDATA[
  <p>Un appel à notify() ou notifyAll() est effectué sans aucun changement (apparent) de l'état d'un objet modifiable. En général, appeler une méthode notify() dans un moniteur est effectué parce qu'une condition quelconque attendue par un autre thread est devenue vraie. Dans tous les cas, pour que la condition ait un sens, elle doit porter sur un objet visible des deux threads.</p>
  <p>Ce bogue n'indique pas nécessairement une erreur puisque la modification de l'état de l'objet peut avoir eu lieu dans une méthode qui appelle la méthode contenant la notification.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="MS_EXPOSE_REP">
    <ShortDescription>Une méthode statique publique risque d'exposer une représentation interne en renvoyant un tableau</ShortDescription>
    <LongDescription>La méthode statique publique {1} peut exposer une représentation interne en renvoyant {2}</LongDescription>
    <Details>
<![CDATA[
  <p>Une méthode statique publique renvoit une référence à un tableau faisant partie de l'état statique de la classe.
Tout code appelant cette méthode peut librement modifier le tableau sous-jacent. Une correction possible serait de renvoyer une copie du tableau.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="EI_EXPOSE_REP">
    <ShortDescription>Une méthode peut exposer sa représentation interne en renvoyant une référence à un objet modifiable</ShortDescription>
    <LongDescription>La méthode {1} risque d'exposer sa représentation interne en renvoyant {2}</LongDescription>
    <Details>
<![CDATA[
  <p>Renvoyer une référence à un objet modifiable stocké dans les champs d'un objet expose la représentation interne de l'objet. Si des instances sont accédées par du code non fiable, et que des modifications non vérifiées peuvent compromettre la sécurité ou d'autres propriétés importantes, vous devez faire autre chose. Renvoyer une nouvelle copie de l'objet est une meilleur approche dans de nombreuses situations.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="EI_EXPOSE_REP2">
    <ShortDescription>Une méthode expose sa représentation interne en incorporant une référence à un objet modifiable</ShortDescription>
    <LongDescription>La méthode {1} risque d'exposer sa représentation interne en stockant un objet externe modifiable dans {2}</LongDescription>
    <Details>
<![CDATA[
  <p>Ce code stocke une référence à un objet modifiable dans la représentation interne de l'objet. Si des instances sont accédées par du code non fiable, et que des modifications non vérifiées peuvent compromettre la sécurité ou d'autres propriétés importantes, vous devez faire autre chose. Stocker une copie de l'objet est une meilleur approche dans de nombreuses situations.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="EI_EXPOSE_STATIC_REP2">
    <ShortDescription>Une méthode peut exposer un état interne statique en stockant un objet modifiable dans un champs statique</ShortDescription>
    <LongDescription>La méthode {1} peut exposer un état interne statique en stockant un objet modifiable dans le champs statique {2}</LongDescription>
    <Details>
<![CDATA[
  <p>Ce code stocke une référence à un objet modifiable externe dans un champs statique. Si des modifications non vérifiées de l'objet modifiable peuvent compromettre la sécurité ou d'autres propriétés importantes, vous devez faire autre chose. Stocker une copie de l'objet est souvent une meilleur approche.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="RU_INVOKE_RUN">
    <ShortDescription>Invocation de run() sur un thread (Vouliez-vous plutôt dire start() ?)</ShortDescription>
    <LongDescription>{1} appelle explicitement run() sur un thread (Vouliez-vous plutôt dire start() ?)</LongDescription>
    <Details>
<![CDATA[
  <p>Cette méthode appelle explicitement run() sur un objet. En général, les classes implémentent l'interface Runnable parce qu'elles vont avoir leur méthode run() invoquée dans un nouveau thread, auquel cas Thread.start() est la bonne méthode à appeler.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SP_SPIN_ON_FIELD">
    <ShortDescription>Méthode bouclant sur un champ</ShortDescription>
    <LongDescription>Boucle sur {3} dans {1}</LongDescription>
    <Details>
<![CDATA[
  <p>Cette méthode tourne en rond sur une boucle qui lit un champ. Le compilateur est autorisé à sortir la lecture de la boucle, créant ainsi une boucle infinie. La classe devrait être modifiée afin d'être correctement synchronisée (avec des appels à wait() et notify()).</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NS_NON_SHORT_CIRCUIT">
    <ShortDescription>Utilisation discutable de logique binaire</ShortDescription>
    <LongDescription>Utilisation discutable de logique binaire dans {1}</LongDescription>
    <Details>
<![CDATA[
  <p>Ce code semble utiliser de la logique binaire (Ex. : &amp; ou |) plutôt que les opérateurs booléens (&amp;&amp; ou ||). La logique binaire entraîne l'évaluation systématique de toute l'expression, même quand le résultat pourrait être immédiatement déduit. Ceci est moins performant et peut provoquer des erreurs. La partie gauche de l'expression protège le reste de l'expression de cas d'erreurs.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="TLW_TWO_LOCK_WAIT">
    <ShortDescription>wait() avec deux verrous en attente</ShortDescription>
    <LongDescription>La méthode wait() a deux verrous en attente dans {1}</LongDescription>
    <Details>
<![CDATA[
  <p>Attendre sur on moniteur alors que deux verrous sont détenus peut entraîner un blocage fatal (deadlock). Exécuter un wait() ne libère que le verrou sur l'objet accueillant le wait(), mais aucun autre verrou. Ce n'est pas obligatoirement un bogue, mais il vaut mieux examiner ça en détails.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="UW_UNCOND_WAIT">
    <ShortDescription>Méthode contenant un wait() non conditionné</ShortDescription>
    <LongDescription>La méthode {1} contient un wait() non conditionné</LongDescription>
    <Details>
<![CDATA[
  <p>Cette méthode contient un appel à java.lang.Object.wait() qui n'est pas protégé par une condition. Si la condition que la méthode essaye d'attendre a déjà été remplie, le thread risque d'attendre indéfiniment.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="UR_UNINIT_READ">
    <ShortDescription>Lecture d'un champ non initialisé dans un constructeur</ShortDescription>
    <LongDescription>Lecture du champ {2} non initialisé dans {1}</LongDescription>
    <Details>
<![CDATA[
  <p>Ce constructeur lit un champ qui n'a pas encore été initialisé. Une des causes les plus fréquentes est l'utilisation accidentelle par le développeur du champ au lieu d'un des paramètres du constructeur.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="UG_SYNC_SET_UNSYNC_GET">
    <ShortDescription>Méthode getXXX non synchronisée, méthode setXXX synchronisée</ShortDescription>
    <LongDescription>{1} n'est pas synchronisée alors que {2} l'est</LongDescription>
    <Details>
<![CDATA[
  <p>Cette classe contient des méthodes getXXX et setXXX similaires dont la méthode setXXX est synchronisée tandis que la méthode getXXX ne l'est pas. Ceci peut entraîner un comportement incorrect à l'exécution car l'appelant de la méthode getXXX ne verra pas obligatoirement l'objet dans un état consistant. La méthode getXXX devrait être synchronisée.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="IC_INIT_CIRCULARITY">
    <ShortDescription>Initialisation circulaire</ShortDescription>
    <LongDescription>Initialisation circulaire entre {0} et {1}</LongDescription>
    <Details>
<![CDATA[
  <p>Une initialisation circulaire a été détectée dans les initialisations de variables statiques de deux classes référencées par l'instance en erreur. De nombreuses sortes de comportements inattendus peuvent surgir d'une telle situation.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="IT_NO_SUCH_ELEMENT">
    <ShortDescription>La méthode next() de Iterator ne peut pas déclencher une exception NoSuchElement</ShortDescription>
    <LongDescription>{1} ne peut pas déclencher l'exception NoSuchElement</LongDescription>
    <Details>
<![CDATA[
  <p>Cette classe implémente l'interface java.util.Iterator. Néanmoins, sa méthode next() n'est pas capable de déclencher java.util.NoSuchElementException. La méthode next()
devrait être modifiée pour déclencher NoSuchElementException si elle est appelée alors qu'il n'y a plus d'éléments à renvoyer.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="ESync_EMPTY_SYNC">
    <ShortDescription>Bloc synchronisé vide</ShortDescription>
    <LongDescription>Bloc synchronisé vide dans {1}</LongDescription>
    <Details>
<![CDATA[
  <p> Présence d'un bloc synchronisé vide:</p>
<pre>
synchronized() {}
</pre>
<p>L'utilisation de blocs synchronisés vides est bien plus subtile et dure
à réaliser correctement que bien des gens ne le reconnaissent,
et de plus ne correspond que rarement à la meilleure des solutions.
</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="IS_INCONSISTENT_SYNC">
    <ShortDescription>Synchronisation incohérente</ShortDescription>
    <LongDescription>Synchronisation incohérente de {1}; verrouillée à {2}%</LongDescription>
    <Details>
<![CDATA[
  <p>Les champs de cette classe semblent être accédés de façon incohérente vis-à-vis de la synchronisation. Le détecteur indique que :
  <ol>
  <li>la classe mélange les accès verrouillés et non verrouillés,</li>
  <li>au moins des accès verrouillés est effectué par l'une des propres méthodes de la classe,</li>
  <li>le nombre d'accès non synchronisés à un champ (lectures et écritures) ne dépasse pas un tiers de l'ensemble des accès, les écritures étant deux fois plus présentes que les lectures.</li>
  </ol>
  </p>
  <p>Typiquement, oublier de synchroniser une des méthodes dans une classe essayant d'être sûre vis-à-vis des threads est un bogue signalé par ce détecteur.</p>
  <p>NB : il y a diverses sources d'inexactitude dans ce détecteur ; par exemple, le détecteur ne peut pas déterminer statiquement toutes les situations dans lesquelles un verrou est détenu. Ainsi, même lorsque le détecteur repère effectivement des accès verrouillés / non verrouillés, le code en question peut tout de même être correct.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="ML_SYNC_ON_UPDATED_FIELD">
    <ShortDescription>La méthode se synchronise sur un champ mis à jour</ShortDescription>
    <LongDescription>La méthode {1} se synchronise sur le champ mis à jour {2}</LongDescription>
    <Details>
<![CDATA[
 <p>Cette méthode se synchronise sur le champ modifiable d'une référence objet. Il y a peu de chances que celà ait un sens puisque les différents threads se synchroniserons par rapport à différents objets.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="MS_OOI_PKGPROTECT">
    <ShortDescription>Le champ devrait être sorti de l'interface et mis en package protected</ShortDescription>
    <LongDescription>{1} devrait être sorti de l'interface et mis en package protected</LongDescription>
    <Details>
<![CDATA[
<p>Un champ final static défini dans une interface référence un objet modifiable tel qu'un tableau ou une table de hachage. Cet objet pourrait être modifié par accident ou par du code sournois d'un autre paquetage. Pour résoudre celà et éviter cette vulnérabilité, le champ doit être intégré dans une classe et sa visibilité modifiée en package protected.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="MS_FINAL_PKGPROTECT">
    <ShortDescription>Le champ devrait être à la fois final et package protected</ShortDescription>
    <LongDescription>{1} devrait être à la fois final et package protected</LongDescription>
    <Details>
<![CDATA[
<p>Un champ statique modifiable peut-être changé par accident ou par du code malveillant d'un autre paquetage. Le champ devrait être package protected et/ou final pour éviter cette vulnérabilité.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="MS_SHOULD_BE_FINAL">
    <ShortDescription>Un champ n'est pas final alors qu'il devrait l'être</ShortDescription>
    <LongDescription>{1} n'est pas final mais devrait l'être</LongDescription>
    <Details>
<![CDATA[
<p>Un champ statique modifiable peut-être changé par accident ou par du code malveillant d'un autre paquetage. Le champ devrait être final pour éviter cette vulnérabilité.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="MS_PKGPROTECT">
    <ShortDescription>Un champ devrait être package protected</ShortDescription>
    <LongDescription>{1} devrait être package protected</LongDescription>
    <Details>
<![CDATA[
<p>Un champ statique modifiable peut-être changé par accident ou par du code malveillant d'un autre paquetage. Le champ devrait être package protected pour éviter cette vulnérabilité.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="MS_MUTABLE_HASHTABLE">
    <ShortDescription>Un champ modifiable est une Hashtable</ShortDescription>
    <LongDescription>{1} une Hashtable modifiable</LongDescription>
    <Details>
<![CDATA[
<p>Le champ est une référence final static à une Hashtable et peut-être modifié par accident ou par du code malveillant d'un autre paquetage. Ce code peut librement modifier le contenu de la Hashtable.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="MS_MUTABLE_ARRAY">
    <ShortDescription>Un champ est un tableau modifiable</ShortDescription>
    <LongDescription>{1} est un tableau modifiable</LongDescription>
    <Details>
<![CDATA[
<p>Le champ est une référence final static à un tableau et peut-être modifié par accident ou par du code malveillant d'un autre paquetage. Ce code peut librement modifier le contenu du tableau.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="MS_CANNOT_BE_FINAL">
    <ShortDescription>Un champ n'est pas final et ne peut pas être protégé face à du code malveillant</ShortDescription>
    <LongDescription>{1} n'est pas final et n'est pas protégé face à du code malveillant</LongDescription>
    <Details>
<![CDATA[
<p>Un champ statique modifiable peut-être modifié par accident ou par du code malveillant. Malheureusement, la façon dont ce champ est utilisé ne permet une correction aisée de ce problème.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NM_CLASS_NAMING_CONVENTION">
    <ShortDescription>Nom de classe devant commencer par une majuscule</ShortDescription>
    <LongDescription>Le nom de la classe {0} ne commence pas par une majusucle</LongDescription>
    <Details>
<![CDATA[
  <p>Les noms de classe doivent être en minuscules avec la première lettre de chaque mot en majuscules. Essayez de conserver vos noms de classes simples et explicites. Utilisez des mots entiers et évitez acronymes et abbréviations (à moins que l'abbréviation soit plus largement utilisée que la forme longue, comme "URL" ou "HTML").</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NM_METHOD_NAMING_CONVENTION">
    <ShortDescription>Nom de méthode devant commencer par une minuscule</ShortDescription>
    <LongDescription>Le nom de la méthode {1} ne commence pas par une minuscule</LongDescription>
    <Details>
<![CDATA[
  <p>Les noms de méthodes devraient être des verbes en minuscules, avec la première lettre des mots, après le premier, en majuscules.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NM_FIELD_NAMING_CONVENTION">
    <ShortDescription>Nom de champ devant commencer par une minuscule</ShortDescription>
    <LongDescription>Le nom du champ {1} ne commence pas par une minuscule</LongDescription>
    <Details>
<![CDATA[
  <p>Les noms de champs qui ne sont pas finaux devraient être en minuscules avec la première lettre des mots, après le premier, en majuscule.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NM_VERY_CONFUSING">
    <ShortDescription>Noms de méthodes très ambigus</ShortDescription>
    <LongDescription>Il est très ambigu d'avoir des méthodes {1} et {3}</LongDescription>
    <Details>
<![CDATA[
<p>Les méthodes indiquées ont des noms qui ne diffèrent que par les majuscules.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NM_CONFUSING">
    <ShortDescription>Noms de méthodes ambigus</ShortDescription>
    <LongDescription>Il est ambigu d'avoir des méthodes {1} et {3}</LongDescription>
    <Details>
<![CDATA[
<p>Les méthodes indiquées ont des noms qui ne diffèrent que par les majuscules.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NM_CONFUSING_METHOD_NAME">
    <ShortDescription>Nom de méthode ambigu</ShortDescription>
    <LongDescription>Nom de méthode ambigu : {1}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode a le même nom que la super-classe de la classe dans laquelle elle est définie.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NM_LCASE_HASHCODE">
    <ShortDescription>La classe définit hashcode() ; ne devrait-ce pas être hashCode() ?</ShortDescription>
    <LongDescription>La classe {0} définit hashcode() ; ne devrait-ce pas être hashCode() ?</LongDescription>
    <Details>
<![CDATA[
<p>Cette classe définit une méthode nommée hashcode(). Cette méthode ne surcharge pas la méthode hashCode() de java.lang.Object, surchage qui était sans doute le but visé.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NM_LCASE_TOSTRING">
    <ShortDescription>La classe définit tostring() ; ne devrait-ce pas être toString() ?</ShortDescription>
    <LongDescription>La classe {0} définit tostring() ; ne devrait-ce pas être toString() ?</LongDescription>
    <Details>
<![CDATA[
<p>Cette classe définit une méthode appelée tostring(). Cette méthode ne surcharge pas la méthode toString() de java.lang.Object, surchage qui était sans doute le but visé.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NM_BAD_EQUAL">
    <ShortDescription>La classe définit equal() ; ne devrait-ce pas être equals() ?</ShortDescription>
    <LongDescription>La classe {0} définit equal() ; ne devrait-ce pas être equals() ?</LongDescription>
    <Details>
<![CDATA[
<p>Cette classe définit une méthode equal(Object). Cette méthode ne surcharge pas la méthode equals(Object) de java.lang.Object, surchage qui était sans doute le but visé.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="RR_NOT_CHECKED">
    <ShortDescription>La méthode ignore le résultat de InputStream.read()</ShortDescription>
    <LongDescription>{1} ignore le résultat de {2}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode ignore le code retour d'une des variantes de java.io.InputStream.read() qui peut renvoyer de multiples octets. Si la valeur renvoyée n'est pas vérifiée, l'appelant ne sera pas capable de gérer correctement le cas ou moins d'octets que prévu auront été lus. C'est un bogue particulièrement insidieux car dans la plupart des programmes les lectures renvoient effectivement souvent le nombre d'octets demandé, les plantages restant sporadiques.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SR_NOT_CHECKED">
    <ShortDescription>La méthode ignore le résultat de InputStream.skip()</ShortDescription>
    <LongDescription>{1} ignore le résultat de {2}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode ignore la valeur renvoyée par java.io.InputStream.skip(), qui peut sauter de multiples octets. Si la valeur renvoyée n'est pas vérifiée, l'appelant n'est pas capable de gérer correctement les cas ou moins d'octets que prévu auront été sautés. C'est un type de bogue particulièrement insidieux car la plupart du temps le bon nombre d'octet sera effectivement sauté, et les plantages seront sporadiques. Néanmoins, sur les flux bufferisés, skip() ne s'applique qu'aux données du buffer et échoue fréquemment à sauter le nombre d'octets demandé.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION">
    <ShortDescription>La classe est Externalizable mais ne définit pas de constructeur par défaut</ShortDescription>
    <LongDescription>{0} est Externalizable mais ne définit pas de constructeur par défaut</LongDescription>
    <Details>
<![CDATA[
<p>Cette classe implémente l'interface Externalizable, mais ne définit pas de constructeur par défaut. Quand les objets Externalizable sont déserialisés, ils doivent d'abord être construit au moyen du constructeur par défaut. Cette classe n'en ayant pas, sérialisation et désérialisation échoueront à l'exécution.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SE_NO_SUITABLE_CONSTRUCTOR">
    <ShortDescription>La classe est Serializable mais sa super-classe ne possède pas de constructeur par défaut visible</ShortDescription>
    <LongDescription>{0} est Serializable mais sa super-classe ne possède pas de constructeur par défaut visible</LongDescription>
    <Details>
<![CDATA[
<p>Cette classe implémente l'interface Serializable mais pas sa super-classe. Quand un tel objet est désérialisé, les champs de la classe mère doivent être initialisés en invoquant le constructeur par défaut de la super-classe. Comme la super-classe n'en a pas, sérialisation et désérialisation échoueront à l'exécution.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SE_NO_SERIALVERSIONID">
    <ShortDescription>La classe est Serializable, mais ne définit pas serialVersionUID</ShortDescription>
    <LongDescription>{0} est Serializable ; pensez à déclarer serialVersionUID</LongDescription>
    <Details>
<![CDATA[
<p>Cette classe implémente l'interface Serializable mais ne définit pas de champ serialVersionUID. Une modification aussi simple qu'ajouter une référence vers un objet .class ajoutera des champs synthétiques à la classe, ce qui malheureusement changera la valeur implicite de serialVersionUID (Ex. : ajouter une référence à String.class générera un champ statique class$java$lang$String). De plus, différents compilateurs source vers bytecode peuvent utiliser différentes conventions de nommage pour les variables synthétiques générées pour référencer les objets classes et les classes internes. Afin de garantir l'interopérabilité de Serializable suivant les versions, pensez à ajouter un champ serialVersionUID explicite.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SF_SWITCH_FALLTHROUGH">
    <ShortDescription>Un switch comporte un cas qui déborde sur le suivant</ShortDescription>
    <LongDescription>Un switch de {1} comporte un cas qui déborde sur le suivant</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode contient un switch dont l'un des cas déborde sur le suivant. Normalement, vous devez terminer chaque cas avec une instruction break ou return.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="WS_WRITEOBJECT_SYNC">
    <ShortDescription>Seule la méthode writeObject() est synchronisée</ShortDescription>
    <LongDescription>Seule la méthode writeObject() de {0} est synchronisée</LongDescription>
    <Details>
<![CDATA[
<p>Cette classe a une méthode writeObject() qui est synchronisée ; mais aucune autre méthode de cette classe n'est synchronisée.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="RS_READOBJECT_SYNC">
    <ShortDescription>Seule la méthode readObject() est synchronisée</ShortDescription>
    <LongDescription>Seule la méthode readObject() de {0} est synchronisée</LongDescription>
    <Details>
<![CDATA[
<p>Cette classe Serializable définit une méthode readObject() qui est synchronisée. Par définition, un objet créé par désérialisation n'est accessible que par un unique thread, donc il n'y a aucun intérêt à synchroniser readObject(). Si la méthode readObject() en elle-même rend l'objet visible d'un autre thread, vous avez un exemple de style de code très douteux.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SE_NONSTATIC_SERIALVERSIONID">
    <ShortDescription>serialVersionUID n'est pas static</ShortDescription>
    <LongDescription>{1} n'est pas static</LongDescription>
    <Details>
<![CDATA[
<p>Cette classe définit un champ serialVersionUID qui n'est pas statique. Le champ devrait être rendu statique si son but est de préciser l'identifiant de version utilisé pour la sérialisation.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SE_NONFINAL_SERIALVERSIONID">
    <ShortDescription>serialVersionUID n'est pas final</ShortDescription>
    <LongDescription>{1} n'est pas final</LongDescription>
    <Details>
<![CDATA[
<p>Cette classe définit un champ serialVersionUID qui n'est pas final. Ce champ devrait être rendu final si son but est de préciser l'identifiant de version utilisé pour la sérialisation.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SE_NONLONG_SERIALVERSIONID">
    <ShortDescription>serialVersionUID n'est pas de type long</ShortDescription>
    <LongDescription>{1} n'est pas long</LongDescription>
    <Details>
<![CDATA[
<p>Cette classe définit un champ serialVersionUID qui n'est pas de type long. Ce champ devrait être de type long si son but est de préciser l'identifiant de version utilisé pour la sérialisation.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SE_BAD_FIELD">
    <ShortDescription>Champ d'instance non transient et non sérialisable dans une classe sérialisable</ShortDescription>
    <LongDescription>La classe {0} définit le champ d'instance {1} non transient et non sérialisable</LongDescription>
    <Details>
<![CDATA[
<p>Cette classe Serializable définit un champ d'instance non primitif qui n'est ni transient, ni Serializable ou java.lang.Object, et qui ne semble pas implémenter l'interface Externalizable ou les méthodes readObject() et writeObject(). Les objets de cette classe ne seront pas désérialisés correctement si un objet non Serializable est stocké dans ce champ.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SC_START_IN_CTOR">
    <ShortDescription>Un constructeur invoque Thread.start()</ShortDescription>
    <LongDescription>{1} invoque {2}</LongDescription>
    <Details>
<![CDATA[
<p>Le constructeur lance un thread. Il y a de fortes chances que ce soit une erreur si cette classe est un jour dérivée ou étendue puisque que le thread sera alors lancé avant que le constructeur de la classe dérivée ne soit appelé.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SS_SHOULD_BE_STATIC">
    <ShortDescription>Champ non lu : devrait-il être statique ?</ShortDescription>
    <LongDescription>Champ non lu : {1} devrait-il être statique ?</LongDescription>
    <Details>
<![CDATA[
<p>Cette classe contient un champ d'instance final qui est initialisé par une valeur statique déterminée à la compilation. Envisagez de rendre ce champ static.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="UUF_UNUSED_FIELD">
    <ShortDescription>Champ inutilisé</ShortDescription>
    <LongDescription>Champ inutilisé : {1}</LongDescription>
    <Details>
<![CDATA[
<p>Ce champ n'est jamais utilisé. Envisagez de le supprimer de la classe.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="URF_UNREAD_FIELD">
    <ShortDescription>Champ inutilisé</ShortDescription>
    <LongDescription>Champ inutilisé : {1}</LongDescription>
    <Details>
<![CDATA[
<p>Ce champ n'est jamais lu. Envisagez de le supprimer de la classe.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NP_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR">
    <ShortDescription>Lecture d'un champ non initalisé dans le constructeur</ShortDescription>
    <LongDescription>Lecture d'un champ non initalisé dans le constructeur {1}</LongDescription>
    <Details>
<![CDATA[
  <p> Lecture d'un champ qui n'est jamais initialisé dans aucun constructeur, et qui sera null une fois
  l'initialisation de l'objet terminée.
  Ce peut être un erreur de code, ou bien la classe contenant le champ est construite
  de telle manière que le champ est écrit en fonction de l'appel de méthodes dans un certain
  ordre (un peu délicat mais pas nécessairement mauvais).
</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR">
    <ShortDescription>Champ non initialisé dans le constructeur</ShortDescription>
    <LongDescription>Le champ n'est pas initialisé dans le constructeur {1}</LongDescription>
    <Details>
<![CDATA[
  <p> Ce champ n'est jamais initialisé dans aucun constructeur, et est de ce fait null
  une fois l'objet initialisé. Soit il s'agit d'une erreur, soit il s'agit
  d'un design douteux puisque ce champ génèra une exception s'il est déréférencé
  avant toute initialisation.
</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="UWF_UNWRITTEN_FIELD">
    <ShortDescription>Champ jamais écrit</ShortDescription>
    <LongDescription>Champ jamais écrit : {1}</LongDescription>
    <Details>
<![CDATA[
<p>Ce champ n'est jamais alimenté. Toutes les lectures vont renvoyer sa valeur par défaut. Recherchez les erreurs (devrait-il avoir été initialisé ?) ou supprimez le s'il est inutile.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD">
    <ShortDescription>Ecriture d'un champ statique depuis la méthode d'une instance</ShortDescription>
    <LongDescription>Ecriture d'un champ statique {2} depuis la méthode d'une instance {1}</LongDescription>
    <Details>
<![CDATA[
  <p>La méthode de l'instance écrit la valeur d'un champ statique.
  Celà peut être difficile à gérer si plusieurs instances ont la possibilité d'écrire
  cette valeur et celà ressemble surtout à une mauvaise pratique.
</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SIC_INNER_SHOULD_BE_STATIC">
    <ShortDescription>Devrait être une classe interne statique</ShortDescription>
    <LongDescription>La classe {0} devrait-elle être une classe interne static ?</LongDescription>
    <Details>
<![CDATA[
<p>Cette classe est une classe interne, mais n'utilise pas sa référence vers l'objet qui l'a créée. Cette référence rend les instances de cette classe plus gros et peut garder active la référence à l'objet créateur plus longtemps que nécessaire. Si possible, la classe devrait être transformée en classe interne <em>static</em>.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SIC_INNER_SHOULD_BE_STATIC_ANON">
    <ShortDescription>Peut-être transformée en classe interne statique nommée</ShortDescription>
    <LongDescription>La classe {0} pourrait-être transformée en classe interne static</LongDescription>
    <Details>
<![CDATA[
<p>Cette classe est une classe interne qui n'utilise pas sa référence vers l'objet qui l'a créée. Cette référence rend l'objet plus gros et peut garder active la référence de l'objet créateur plus longtemps que nécessaire. Si possible, la classe devrait être transformée en classe interne <em>static</em>. Puisque les classes anonymes ne peuvent pas être marquées comme static, il faudrait également nommer cette classe.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS">
    <ShortDescription>Pourrait-être transformée en classe interne statique</ShortDescription>
    <LongDescription>La classe {0} pourrait-être transformée en classe interne statique</LongDescription>
    <Details>
<![CDATA[
<p>Cette classe est une classe interne mais elle n'utilise pas sa référence vers l'objet qui l'a créée, à part durant la création de l'objet interne. Cette référence rend les instances de cette classe plus grosses et peut forcer à garder active la référence de l'objet créateur plus longtemps que nécessaire. Si possible, la classe devrait-être transformée en classe interne <em>static</em>. Puisque la référence à l'objet créateur est requise durant la construction de la classe interne, le constructeur de celle-ci devrait-être modifié afin d'accepter en argument cette référence.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="WA_NOT_IN_LOOP">
    <ShortDescription>Méthode contenant un wait() en dehors d'une boucle</ShortDescription>
    <LongDescription>wait() en dehors d'une boucle dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode contient un appel à java.lang.Object.wait() qui n'est pas dans une boucle. Si le moniteur est utilisé pour des conditions multiples, la condition que l'appelant attend peut ne pas être celle qui s'est réellement déclenchée.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NO_NOTIFY_NOT_NOTIFYALL">
    <ShortDescription>Utilisation de notify() plutôt que notifyAll() dans une méthode</ShortDescription>
    <LongDescription>Utilisation de notify() plutôt que notifyAll() dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode appelle notify() plutôt que notifyAll(). Le moniteur Java est souvent utilisé pour de multiples conditions. Appeler notify() ne réveille qu'un thread, ce qui signifie que le thread réveillé peut ne pas être celui qui attend la condition que l'appelant vient de remplir.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="RV_RETURN_VALUE_IGNORED">
    <ShortDescription>La méthode ignore une valeur de retour</ShortDescription>
    <LongDescription>La méthode {1} ignore la valeur renvoyée par {2}</LongDescription>
    <Details>
<![CDATA[
<p>La valeur renvoyée par cette méthode devrait-être vérifiée.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NP_ALWAYS_NULL">
    <ShortDescription>Déréférencement d'un pointeur null dans la méthode</ShortDescription>
    <LongDescription>Déréférencement d'un pointeur null dans la méthode {1}</LongDescription>
    <Details>
<![CDATA[
<p>Un pointeur à null est déréférencé ici. Ceci va mener à une NullPointerException quand le code sera exécuté.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NP_ALWAYS_NULL_EXCEPTION">
    <ShortDescription>Déréférencement d'un pointeur null dans le chemin d'exception d'une méthode</ShortDescription>
    <LongDescription>Déréférencement d'un pointeur null dans le chemin d'exception de {1}</LongDescription>
    <Details>
<![CDATA[
<p>Un pointeur à null dans le chemin d'exception est déréférencé ici. Celà va mener à une NullPointerException quand le code sera exécuté. Notez que puisque FindBugs ne détecte pas les chemins d'exception irréalisables, il est possible que cette alarme soit injustifiée.</p>
<p>Notez aussi que FindBugs considère le choix par défaut d'un switch comme étant dans le chemin d'exception, puisque ce choix est souvent irréalisable.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NP_NULL_ON_SOME_PATH">
    <ShortDescription>Possible déréférencement d'un pointeur null dans une méthode</ShortDescription>
    <LongDescription>Possible déréférencement d'un pointeur null dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>Une valeur par référence déréférencée ici peut-être à null à l'exécution. Celà peut conduire à une NullPointerException quand le code est exécuté.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="NP_NULL_ON_SOME_PATH_EXCEPTION">
    <ShortDescription>Possible déréférencement d'un pointeur null dans le chemin d'exception d'une méthode</ShortDescription>
    <LongDescription>Possible déréférencement d'un pointeur null dans le chemin d'exception de {1}</LongDescription>
    <Details>
<![CDATA[
<p>Une valeur par référence qui est à null dans un des chemins d'exception est déréférencée ici. Ceci peut conduire à une NullPointerException à l'exécution du code. Notez que comme FindBugs ne repère pas les chemins d'exception irréalisables, il est possible que cette alarme soit injustifiée.</p>
<p>Notez également que FindBugs considère le cas par défaut d'un switch comme faisant partie du chemin d'exception puisque ce cas est souvent inattendu.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SI_INSTANCE_BEFORE_FINALS_ASSIGNED">
    <ShortDescription>Initialiseur statique de classe créant une instance avant que tous les champs static final soient alimentés</ShortDescription>
    <LongDescription>L'initialiseur statique de {0} crée une instance avant que tous les champs static final soient alimentés</LongDescription>
    <Details>
<![CDATA[
<p>L'initialiseur static de la classe crée une instance de la classe avant que tous les champs static final soient alimentés.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="OS_OPEN_STREAM">
    <ShortDescription>La méthode peut ne pas fermer un flux</ShortDescription>
    <LongDescription>La méthode {1} peut ne pas fermer un flux</LongDescription>
    <Details>
<![CDATA[
<p>La méthode crée un objet de flux d'E/S, ne l'assigne à aucun champ, ne le passe à aucune méthode, ne le renvoit pas et ne semble pas le fermer dans tous les chemins d'exécution. Ceci peut entraîner le blocage d'un descripteur de fichier. C'est généralement une bonne idée d'utiliser un bloc finally pour s'assurer de la fermeture des flux.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="OS_OPEN_STREAM_EXCEPTION_PATH">
    <ShortDescription>La méthode peut oublier de fermer un flux en cas d'exception</ShortDescription>
    <LongDescription>La méthode {1} peut ne pas fermer un flux en cas d'exception</LongDescription>
    <Details>
<![CDATA[
<p>La méthode crée un flux d'E/S, ne l'affecte à aucun champ, ne le passe à aucune méthode, ne le renvoit pas, et ne semble pas le fermer dans tous les chemins d'exception possibles. Ceci peut provoquer le blocage d'un descripteur de fichier. C'est généralement une bonne idée d'utiliser un bloc finally pour garantir la fermeture des flux.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="PZLA_PREFER_ZERO_LENGTH_ARRAYS">
    <ShortDescription>Envisagez de renvoyer un tableau vide plutôt que null</ShortDescription>
    <LongDescription>La méthode {1} devrait-elle renvoyer un tableau vide plutôt que null ?</LongDescription>
    <Details>
<![CDATA[
<p>Renvoyer un tableau vide constitue souvent une meilleure approche plutôt que de renvoyer une référence à null pour signaler qu'il n'y a pas de résultat (c'est-à-dire, une liste vide de résultats). De cette façon, aucune vérification explicite du null n'est nécessaire dans les méthodes clientes.</p>
<p>D'un autre côté, utiliser null signifie "il n'y a pas de réponse à cette question". Celà peut donc être approprié. Par exemple, File.listFiles() renvoi une liste vide si un répertoire donné ne contient pas de fichiers, et renvoi null si le fichier n'est pas un répertoire.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="UCF_USELESS_CONTROL_FLOW">
    <ShortDescription>Instruction de contrôle du flux inutile</ShortDescription>
    <LongDescription>Instruction de contrôle du flux inutile dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode contient une instruction de contrôle du flux inutile. Ceci est souvent provoqué par inadvertance, en utilisant un paragraphe vide comme corps d'une condition. Exemple :</p>
<pre>
    if (argv.length == 1);
        System.out.println("Hello, " + argv[0]);
</pre>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="RCN_REDUNDANT_COMPARISON_TO_NULL">
    <ShortDescription>Comparaison redondante à null</ShortDescription>
    <LongDescription>Comparaison redondante à null dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode contient une comparaison redondante d'une référence avec null. Deux types de redondances sont signalés :</p>
<ul>
<li>les deux valeurs comparées sont définitivement à null</li>
<li>une valeur est définitivement à null tandis que l'autre ne pourra jamais l'être</li>
</ul>
<p>Cette alarme particulière représente deux sortes de comparaisons redondantes :</p>
<ol>
<li>Une valeur a été déréférencée, puis explicitement comparée à null : ceci indique souvent une erreur dans la méthode</li>
<li>Une value littérale null a été explicitement comparée à null : ceci peut indiquer que la méthode a été modifiée sans comprendre tous ses invariants</li>
</ol>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="RCN_REDUNDANT_CHECKED_NULL_COMPARISON">
    <ShortDescription>Comparaison redondante à null d'une valeur préalablement vérifiée</ShortDescription>
    <LongDescription>Comparaison redondante à null d'une valeur préalablement vérifiée dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode contient une comparaison redondante d'une référence à null. Deux types de comparaisons redondantes sont signalés :</p>
<ul>
<li>les deux valeurs sont définitivement à null</li>
<li>une valeur est définitivement à null et l'autre ne pourra jamais l'être</li>
</ul>
<p>Cette alarme signale généralement qu'une variable connue pour être différente de null est comparée avec null. Bien que le test ne soit pas nécessaire, ce peut-être un simple cas de programmation défensive.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="UL_UNRELEASED_LOCK">
    <ShortDescription>La méthode ne libère pas un verrou dans tous les chemins d'exécution</ShortDescription>
    <LongDescription>La méthode {1} ne libère pas un verrou dans tous les chemins d'exécution</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode acquière un verrou JSR-166 (java.util.concurrent), mais ne le libère pas dans tous les chemins d'exécution. En général, l'idiome correct pour utiliser un verrou JSR-166 est :</p>
<pre>
    Lock l = ...;
    l.lock();
    try {
        // do something
    } finally {
        l.unlock();
    }
</pre>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="UL_UNRELEASED_LOCK_EXCEPTION_PATH">
    <ShortDescription>La méthode ne libère pas un verrou dans tous les chemins d'exception</ShortDescription>
    <LongDescription>La méthode {1} ne libère pas un verrou dans tous les chemins d'exception</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode acquière un verrou JSR-166 (java.util.concurrent), mais ne le libère pas dans tous les chemins d'exception. En général, l'idiome correct pour utiliser un verrou JSR-166 est :</p>
<pre>
    Lock l = ...;
    l.lock();
    try {
        // do something
    } finally {
        l.unlock();
    }
</pre>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="RC_REF_COMPARISON">
    <ShortDescription>Comparaison de références suspecte</ShortDescription>
    <LongDescription>Comparaison suspecte des références {3} dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode compare deux références avec l'opérateur == ou !=, alors que la façon correcte de comparer les instances de ce type est généralement d'utiliser la méthode equals(). Des exemples de classes qui ne doivent généralement pas être comparées par référence sont java.lang.Integer, java.lang.Float, etc...</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="EC_UNRELATED_TYPES">
    <ShortDescription>Appel de equals() comparant des types différents</ShortDescription>
    <LongDescription>Appel de equals() comparant des types différents dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode appelle equals(Object) pour deux références de type différents. D'après le contrat de equals(), les objets de classes différentes devraient toujours être inégaux, c'est pourquoi la comparaison a de fortes chances de toujours renvoyer false à l'exécution.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="EC_UNRELATED_INTERFACES">
    <ShortDescription>Appel de equals() comparant différentes interfaces</ShortDescription>
    <LongDescription>Appel de equals() comparant différents types d'interface dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode appelle equals(Object) pour deux références d'interfaces sans rapport (aucune n'est un sous-type de l'autre). D'après le contrat de equals(), les objets de classes différentes devraient toujours être inégaux. Notez qu'il est possible que le programme contienne des classes qui implémentent les deux interfaces, donc la comparaison peut-être valide. Dans tous les cas, il est utile de regarder ça de plus prêt.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="EC_NULL_ARG">
    <ShortDescription>Appel de equals() avec un argument à null</ShortDescription>
    <LongDescription>Appel de equals() avec un argument à null dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode appelle equals(Object), passant une valeur à null comme argument. D'après le contrat de la méthode equals(), cet appel devrait systématiquement renvoyer false.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="MWN_MISMATCHED_WAIT">
    <ShortDescription>wait() non appareillé</ShortDescription>
    <LongDescription>wait() non appareillé dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode appelle Object.wait() sans détenir, visiblement, de verrou sur l'objet. Appeler wait() sans détenir de verrou entraîne le déclenchement d'une IllegalMonitorStateException.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="MWN_MISMATCHED_NOTIFY">
    <ShortDescription>notify() non appareillé</ShortDescription>
    <LongDescription>notify() non appareillé dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode appelle Object.notify() ou Object.notifyAll() sans détenir, visiblement, de verrou sur l'objet. Appeler notify() ou notifyAll() sans détenir de verrou entraîne le déclenchement d'une IllegalMonitorStateException.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SA_LOCAL_SELF_ASSIGNMENT">
    <ShortDescription>Auto-alimentation d'une variable locale</ShortDescription>
    <LongDescription>Auto-alimentation d'une variable locale dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode contient une auto-alimentation d'une variable locale, par exemple :
<pre>
  public vida foo() {
    int x = 3;
    x = x;
  }
</pre>
De telles affectations sont inutiles et peuvent indiquer une faute de frappe ou une erreur de logique.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SA_FIELD_SELF_ASSIGNMENT">
    <ShortDescription>Auto-alimentation d'un champs</ShortDescription>
    <LongDescription>Auto-alimentation du champs {2} dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode contient un champ s'auto-alimentant; par exemple,
<pre>
  int x;
  public void foo() {
    x = x;
  }
</pre>
De telles affectations sont inutiles et peuvent indiquer une faute de frappe ou une erreur logique.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="BIT_AND">
    <ShortDescription>Masques binaires incompatibles</ShortDescription>
    <LongDescription>Des masques binaires incompatibles renvoient un résultat constant dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode compare une expression de la forme (a &amp; C) avec D, qui est toujours inégale en raison des valeurs spécifiques des constantes C et D. Celà peut indiquer une faute de frappe ou une erreur logique.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="BIT_AND_ZZ">
    <ShortDescription>Masques binaires incompatibles</ShortDescription>
    <LongDescription>Des masques binaires incompatibles renvoient un résultat constant dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode compare une expression de la forme (a &amp; 0) avec 0, qui est toujours égale. Ceci peut indiquer une faute de frappe ou une erreur logique.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="BIT_IOR">
    <ShortDescription>Masques binaires incompatibles</ShortDescription>
    <LongDescription>Des masques binaires incompatibles renvoient un résultat constant dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode compare une expression de la forme (a | C) avec D, qui est toujours inégale en raison des valeurs spécifiques des constantes C et D. Ceci peut indiquer une erreur logique ou une faute de frappe.</p>
<p>Typiquement, ce bogue arrive quand du code essaye d'effectuer un test d'apparition d'un bit mais utilise l'opérateur OU ("|") au lieu de l'opérateur ET ("&amp;").</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="LI_LAZY_INIT_INSTANCE">
    <ShortDescription>Initialisation paresseuse incorrecte d'un champ d'instance</ShortDescription>
    <LongDescription>Initialisation paresseuse incorrecte du champ d'instance {2} dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode contient une initialisation paresseuse non synchronisée d'un champ non volatile. Comme le compilateur ou le processeur peuvent réordonner les instructions, les threads ne sont pas certains de voir un objet complètement initialisé, <em>si la méthode peut-être appelée par de multiples threads</em>. Vous pouvez rendre le champs volatile pour corriger le problème. Pour plus d'informations, cf. <a href="http://www.cs.umd.edu/~pugh/java/memoryModel/">site Web sur le modèle mémoire de Java</a>.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="LI_LAZY_INIT_STATIC">
    <ShortDescription>Initialisation paresseuse incorrecte d'un champ statique</ShortDescription>
    <LongDescription>Initialisation paresseuse incorrecte du champ statique {2} dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode contient une initialisation paresseuse non synchronisée d'un champ statique non volatile. Comme le compilateur ou le processeur peuvent réordonner les instructions, les threads ne sont pas certains de voir un objet complètement initialisé, <em>si la méthode peut-être appelée par de multiples threads</em>. Vous pouvez rendre le champs volatile pour corriger le problème. Pour plus d'informations, cf. <a href="http://www.cs.umd.edu/~pugh/java/memoryModel/">site Web sur le modèle mémoire de Java</a>.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="JLM_JSR166_LOCK_MONITORENTER">
    <ShortDescription>Synchronisation effectuée sur un Lock java.util.concurrent</ShortDescription>
    <LongDescription>Synchronisation effectuée sur un Lock java.util.concurrent dans la méthode {1}</LongDescription>
<Details>
<![CDATA[
<p>Cette méthode se synchronise au moyen d'une implémentation de java.util.concurrent.locks.Lock. Vous devriez plutôt utiliser les méthodes lock() et unlock().</p>
]]>
</Details>
  </BugPattern>

  <BugPattern type="UPM_UNCALLED_PRIVATE_METHOD">
    <ShortDescription>Méthode privée jamais appelée</ShortDescription>
    <LongDescription>La méthode privée {1} n'est jamais appelée</LongDescription>
<Details>
<![CDATA[
<p>Cette méthode privée n'est jamais appelée. Bien qu'il soit possible que cette méthode soit appelée par réflexion, il y a plus de chances qu'elle ne soit jamais utilisée et qu'elle puisse être supprimée.
</p>
]]>
</Details>
  </BugPattern>

  <BugPattern type="ODR_OPEN_DATABASE_RESOURCE">
    <ShortDescription>La méthode peut ne pas fermer une ressource base de données</ShortDescription>
    <LongDescription>La méthode {1} peut ne pas fermer une ressource base de données</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode crée une ressource base de données (telle qu'une connexion ou un RowSet), ne l'affecte à aucun champ, ne la passe à aucune autre méthode, ne la renvoie pas, et ne semble pas la fermer dans tous les chemins d'exécution. Ne pas fermer une ressource base de données dans tous les chemins d'exécution peut entraîner de faibles performances et poser des problèmes de communication entre la base de données et l'application.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH">
    <ShortDescription>La méthode peut ne pas fermer une ressource base de données sur une exception</ShortDescription>
    <LongDescription>La méthode {1} peut ne pas fermer une ressource de base de données en cas d'exception</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode crée une ressource base de données (telle qu'une connexion ou un RowSet), ne l'affecte à aucun champ, ne la passe à aucune autre méthode, ne la renvoie pas, et ne semble pas la fermer dans tous les chemins d'exception. Ne pas fermer une ressource base de données peut entraîner de faibles performances et poser des problèmes de communication entre la base de données et l'application.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SBSC_USE_STRINGBUFFER_CONCATENATION">
    <ShortDescription>La méthode concatène des chaînes au moyen de + en boucle</ShortDescription>
    <LongDescription>La méthode {1} concatène des chaînes au moyen de + en boucle</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode semble construire une String en utilisant une concaténation en boucle. A chaque itération, l'objet String est converti en StringBuffer/StringBuilder, complété, puis de nouveau converti en String. Ceci a un coût exponentiel en fonction du nombre d'itérations, puisque la chaîne est recopiée à chaque itération.</p>
<p>De meilleurs performances peuvent être obtenues en utilisant explicitement StringBuffer (ou StringBuilder en Java 1.5).</p>
<p>Par exemple :</p>
<pre>
  // C'est mal !
  String s = "";
  for (int i = 0; i &lt; field.length; ++i) {
    s = s + field[i];
  }

  // C'est mieux...
  StringBuffer buf = new StringBuffer();
  for (int i = 0; i &lt; field.length; ++i) {
    buf.append(field[i]);
  }
  String s = buf.toString();
</pre>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="ITA_INEFFICIENT_TO_ARRAY">
    <ShortDescription>La méthode utilise toArray() avec un tableau vide en paramètre</ShortDescription>
    <LongDescription>La méthode {1} utilise Collection.toArray() avec un tableau vide en paramètre</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode utilise la méthode toArray() d'une classe dérivant de Collection, en lui passant en paramètre un tableau vide. Il est plus efficace d'utiliser
<pre>myCollection.toArray(new Foo[myCollection.size()])</pre>
Si le tableau transmis est assez grand pour stocker tous les éléments de la collection, alors il est alimenté et renvoyé directement. Ceci évite la nécessité de créer un nouveau tableau (par réflexion) pour renvoyer le résultat.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="IJU_SETUP_NO_SUPER">
    <ShortDescription>Une classe dérivant de TestCase implémente setUp() sans appeler super.setUp()</ShortDescription>
    <LongDescription>La classe {0} dérivant de TestCase implémente setUp() sans appeler super.setUp()</LongDescription>
    <Details>
<![CDATA[
<p>La classe dérive de la classe TestCase de JUnit est implémente la méthode setUp(). La méthode setUp() devrait appeler super.setUp(), mais ne le fait pas.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="IJU_TEARDOWN_NO_SUPER">
    <ShortDescription>Une classe dérivant de TestCase implémente tearDown() sans appeler super.tearDown()</ShortDescription>
    <LongDescription>La classe {0} dérivant de TestCase implémente tearDown() sans appeler super.tearDown()</LongDescription>
    <Details>
<![CDATA[
<p>La classe dérive de la classe TestCase de JUnit et implémente la méthode tearDown(). La méthode tearDown() devrait appeler super.tearDown(), mais ne le fait pas.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="IJU_SUITE_NOT_STATIC">
    <ShortDescription>Une classe dérivant de TestCase implémente une méthode suite() non statique</ShortDescription>
    <LongDescription>La classe {0} dérivant de TestCase implémente une méthode suite() non statique</LongDescription>
    <Details>
<![CDATA[
<p>La classe dérive de TestCase de JUnit et implémente une méthode suite(). La méthode suite devrait-être comme étant static, ce qui n'est pas fait.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="BOA_BADLY_OVERRIDDEN_ADAPTER">
    <ShortDescription>La classe surcharge mal une méthode implémentée dans une superclasse Adapter</ShortDescription>
    <LongDescription>La classe {0} surcharge mal la méthode {1} implémentée dans une superclasse Adapter</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode surcharge une méthode provenant d'une classe mère qui est un Adapter qui implémente un Listener défini dans le paquetage java.awt.event ou javax.swing.event. En conséquence, cette méthode ne sera pas appelée quand l'évènement se produira.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="BRSA_BAD_RESULTSET_ACCESS">
    <ShortDescription>La méthode essaye d'accéder à un champ de ResultSet avec l'index 0</ShortDescription>
    <LongDescription>La méthode {1} essaye au champ d'index 0 d'un ResultSet</LongDescription>
    <Details>
<![CDATA[
<p>Un appel à la méthode getXXX() ou updateXXX() d'un ResultSet est effectué avec l'index de champ 0. Comme l'index des champs de ResultSet commence à 1 c'est toujours une erreur.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="SIO_SUPERFLUOUS_INSTANCEOF">
    <ShortDescription>Vérification de type inutile avec l'opérateur instanceof</ShortDescription>
    <LongDescription>La méthode {1} effectue une vérification de type inutile avec l'opérateur instanceof alors que celà pourrait-être déterminé statiquement</LongDescription>
    <Details>
<![CDATA[
<p>Vérification de type effectuée avec l'opérateur instanceof alors que celà pourrait-être déterminé statiquement.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="BAC_BAD_APPLET_CONSTRUCTOR">
    <ShortDescription>Constructeur d'Applet erroné reposant sur un AppletStub non initialisé</ShortDescription>
    <LongDescription>Constructeur d'Applet erroné reposant sur un AppletStub non initialisé</LongDescription>
    <Details>
<![CDATA[
<p>Ce constructeur appelle des méthodes de l'Applet mère qui repose sur l'AppletStub. Comme l'AppletStub n'est pas initialisé jusqu'à ce que la méthode init() de cette applet soit appelée, ces méthodes ne se comporteront pas correctement.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="EC_BAD_ARRAY_COMPARE">
    <ShortDescription>Appel à equals() sur un tableau équivalent à ==</ShortDescription>
    <LongDescription>Les appels à equals sur un tableau sont équivalents à ==</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode invoque la méthode equals(Object o) d'un tableau. Comme les tableaux ne surchargent pas la méthode equals de Object, cet appel revient à comparer les adresses. Pour comparer les contenus de tableaux, utilisez java.util.Array.equals(Object[], Object[]).</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="UOE_USE_OBJECT_EQUALS">
    <ShortDescription>Appel de equals sur une classe finale qui ne surcharge pas la version d'Object</ShortDescription>
    <LongDescription>Appels de equals sur une classe finale qui ne surcharge pas la version d'Object</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode invoque la méthode equals(Object o) d'une classe finale qui ne surcharge pas la méthode de la classe Object, et donc qui agit comme le test d'identité ==. Il est correcte d'utiliser la méthode equals(), mais vous devriez envisager de surcharger cette méthode dans la classe.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="STI_INTERRUPTED_ON_CURRENTTHREAD">
    <ShortDescription>Utilisation superflue d'un appel à currentThread() pour appeler interrupted()</ShortDescription>
    <LongDescription>La méthode {1} invoque inutilement currentThread() juste pour appeler interrupted()</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode invoque Thread.currentThread() juste pour appeler la méthode interrupted(). Comme interrupted() est une méthode statique, il est plus simple et facile d'utiliser Thread.interrupted().</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="STI_INTERRUPTED_ON_UNKNOWNTHREAD">
    <ShortDescription>Thread.interrupted() appelée par erreur sur un objet Thread arbitraire</ShortDescription>
    <LongDescription>La méthode {1} utilise la méthode statique Thread.interrupted(), essayant par erreur de l'appeler sur un objet Thread arbitraire.</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode invoque Thread.interrupted() sur un objet Thread qui n'est pas le thread actif. Pusique la méthode interrupted() est statique, la méthode interrupted() sera appelée sur un objet différent de celui auquel l'auteur du code pensait.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN">
    <ShortDescription>Un paramètre est ré-écrit avant d'être utilisé</ShortDescription>
    <LongDescription>Un paramètre de {1} est écrasé avant d'être utilisé</LongDescription>
    <Details>
<![CDATA[
<p>La valeur initiale de ce paramètre est ignorée, et le paramètre est écrasé. Ceci indique généralement une erreur provenant de la croyance infondée qu'une écriture sur ce paramètre sera transmise à l'appelant.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="DLS_DEAD_LOCAL_STORE">
    <ShortDescription>Alimentation à perte d'une variable locale</ShortDescription>
    <LongDescription>Alimentation à perte d'une variable locale dans la méthode {1}</LongDescription>
    <Details>
<![CDATA[
<p>Cette instruction assigne une valeur à une variable locale mais cette variable n'est pas lue par la suite. Ceci indique souvent une erreur puisque la valeur calculée n'est jamais utilisée.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="MF_METHOD_MASKS_FIELD">
    <ShortDescription>La méthode définit une variable qui masque un champ</ShortDescription>
    <LongDescription>La méthode {1} définit une variable qui masque le champ {2}</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode définit une variable locale ayant le même nom qu'un champ de la classe ou d'une classe mère. Ceci peut pousser la méthode à lire une valeur non initialisée dans le champs, à le laisser non initialisé ou les deux.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="MF_CLASS_MASKS_FIELD">
    <ShortDescription>La classe définit un champ qui masque un champ d'une classe mère</ShortDescription>
    <LongDescription>La classe {0} définit un champ qui masque le champ {1} d'une classe mère</LongDescription>
    <Details>
<![CDATA[
<p>Cette classe définit un champ avec le même nom qu'un champ visible d'instance d'une classe mère. C'est ambigu et peut entraîner une erreur si des méthodes mettent à jour ou accèdent à un des champs alors qu'elles souhaitaient utiliser l'autre.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="WMI_WRONG_MAP_ITERATOR">
    <ShortDescription>Utilisation inefficace d'un itérateur sur keySet au lieu de entrySet</ShortDescription>
    <LongDescription>La méthode {1} fait une utilisation inefficace d'un itérateur sur keySet au lieu d'un itérateur sur entrySet</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode accède à la valeur d'une entrée de Map au moyen d'une clé provenant d'un itérateur sur keySet. Il est plus efficace d'utiliser un itérateur sur l'entrySet de la Map, pour éviter la recherche par Map.get(clé).</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="ISC_INSTANTIATE_STATIC_CLASS">
    <ShortDescription>Instantiation inutile d'une classe qui n'a que des méthodes statiques</ShortDescription>
    <LongDescription>La méthode {1} instancie une classe qui n'a que des méthodes statiques</LongDescription>
    <Details>
<![CDATA[
<p>Cette classe alloue un objet basé sur une classe qui n'a que des méthodes statiques. Cet objet n'a pas besoin d'être créé, accédez directement aux méthodes en utilisant le nom de la classe.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="REC_CATCH_EXCEPTION">
    <ShortDescription>java.lang.Exception est intercepté alors qu'Exception n'est jamais lancé</ShortDescription>
    <LongDescription>La méthode {1} intercepte Exception, mais Exception n'est pas lancé dans le bloc try/catch et RuntimeException n'est pas appelé</LongDescription>
    <Details>
<![CDATA[
  <p>Cette méthode utilise un block try-catch qui intercepte les objets Exception, mais Exception n'est jamais déclenché dans ce bloc, et RuntimeException n'est pas explicitement intercepté.  C'est une erreur commune de dire que try / catch (Exception e) est identique à plusieurs try / catch, mais cette tournure intercepte également les RuntimeException, masquant des bugs potentiels.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="FE_FLOATING_POINT_EQUALITY">
    <ShortDescription>Test d'égalité en virgule flottante.</ShortDescription>
    <LongDescription>Test d'égalité en virgule flottane dans {1}.</LongDescription>
    <Details>
<![CDATA[
<p>Cette opération teste l'égalité de deux valeurs en virgule flottante. Les calculs en virgule flottante pouvant introduire des arrondis, les valeurs flottantes ou doubles peuvent être imprécises. Pour les valeurs qui doivent être précises, telles que les valeurs monétaires, pensez à utiliser un type à précision fixe tel qu'un BigDecimal. Pour les valeurs qui n'ont pas besoin d'être précises, pensez à tester l'égalité sur une portée quelconque, par exemple :
<code>if ( Math.abs(x - y) &lt; .0000001 )</code>.
Cf section 4.2.4 des spécifications du langage Java.</p>
    ]]>
     </Details>
  </BugPattern>

  <BugPattern type="UM_UNNECESSARY_MATH">
    <ShortDescription>Appel d'une méthode statique de la classe Math sur une valeur constante</ShortDescription>
    <LongDescription>Appel d'une méthode statique de la classe Math sur une valeur constante</LongDescription>
    <Details>
<![CDATA[
<p>Cette méthode utilise une méthode statique de java.lang.Math sur une valeur constante. Dans ce cas, le résultat de cet appel peut être déterminé statiquement, ce qui est plus rapide et souvent plus précis. Les méthodes détectées sont :
<table>
<tr><th>Méthode</th><th>Paramètre</th></tr>
<tr>abs<td></td><td>-tous-</td></tr>
<tr>acos<td></td><td>0.0 ou 1.0</td></tr>
<tr>asin<td></td><td>0.0 ou 1.0</td></tr>
<tr>atan<td></td><td>0.0 ou 1.0</td></tr>
<tr>atan2<td></td><td>0.0</td></tr>
<tr>cbrt<td></td><td>0.0 ou 1.0</td></tr>
<tr>ceil<td></td><td>-tous-</td></tr>
<tr>cos<td></td><td>0.0</td></tr>
<tr>cosh<td></td><td>0.0</td></tr>
<tr>exp<td></td><td>0.0 ou 1.0</td></tr>
<tr>expm1<td></td><td>0.0</td></tr>
<tr>floor<td></td><td>-tous-</td></tr>
<tr>log<td></td><td>0.0 ou 1.0</td></tr>
<tr>log10<td></td><td>0.0 ou 1.0</td></tr>
<tr>rint<td></td><td>-tous-</td></tr>
<tr>round<td></td><td>-tous-</td></tr>
<tr>sin<td></td><td>0.0</td></tr>
<tr>sinh<td></td><td>0.0</td></tr>
<tr>sqrt<td></td><td>0.0 ou 1.0</td></tr>
<tr>tan<td></td><td>0.0</td></tr>
<tr>tanh<td></td><td>0.0</td></tr>
<tr>toDegrees<td></td><td>0.0 ou 1.0</td></tr>
<tr>toRadians<td></td><td>0.0</td></tr>
</table>
</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="CD_CIRCULAR_DEPENDENCY">
    <ShortDescription>Dépendance circulaire entre des classes</ShortDescription>
    <LongDescription>La classe {0} a une dépendance circulaire avec d'autre classes</LongDescription>
    <Details>
<![CDATA[
<p>Cette classe a une dépendance circulaire avec d'autres classes. Ceci rend la compilation de ces classes difficile puisque chaque classe est dépendante de l'autre pour être correctement construite. Pensez à utiliser des interfaces pour briser la dépendance circulaire forte.</p>
    ]]>
    </Details>
  </BugPattern>

  <BugPattern type="RI_REDUNDANT_INTERFACES">
    <ShortDescription>Classe implémentant la même interface que sa super-classe</ShortDescription>
    <LongDescription>La classe {0} implémente la même interface que sa classe mère</LongDescription>
    <Details>
<![CDATA[
<p>Cette classe déclare implémenter une interface qui est aussi implémentée par une de ses classes mères. Ceci est redondant : dès qu'une super-classe implémente une interface, toutes les sous-classes le font aussi par défaut. Celà peut indiquer que la hiérarchie d'héritage a changé depuis la création de cette classe et la cible de l'implémentation de l'interface doit peut-être être reprise en considération.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="QF_QUESTIONABLE_FOR_LOOP">
    <ShortDescription>Incrémentation compliquée, subtile au incorrecte dans une boucle for</ShortDescription>
    <LongDescription>Incrémentation compliquée, subtile au incorrecte dans la boucle for {1} </LongDescription>
    <Details>
<![CDATA[
   <p>Etes vous certain que cette boucle incrémente la variable voulue ?
   Il apparaît qu'une autre variable est initialisée et vérifiée par la boucle.
</p>
]]>
    </Details>
  </BugPattern>

    <BugPattern type="MTIA_SUSPECT_STRUTS_INSTANCE_FIELD">
     <ShortDescription>La classe hérite d'une classe action Struts et utilise les variables de l'instance.</ShortDescription>
     <LongDescription>La classe {0} hérite d'une classe action Struts et utilise les variables de l'instance.</LongDescription>
     <Details>
   <![CDATA[
    <p>
    Cette classe hérite d'une classe action Struts, et utilise une variable de cette instance.
    Puisqu'une seule instance de la classe action Struts est créée par le cadre de travail Struts
    , et utilisée dans un environnement multitâche, ce paradigme est très fortement découragé
    et très certainement problématique. Considérer l'emploi seul de variables propres à la méthode.
    </p>
    ]]>
      </Details>
    </BugPattern>

    <BugPattern type="MTIA_SUSPECT_SERVLET_INSTANCE_FIELD">
     <ShortDescription>La classe hérite de Servlet et utilise les variables de l'instance.</ShortDescription>
     <LongDescription>La classe {0} hérite de Servlet et utilise les variables de l'instance.</LongDescription>
     <Details>
   <![CDATA[
    <p>
    Cette classe hérite de la classe Servlet, et utilise une variable de l'instance.
    Puisqu'une seule instance d'une classe Servlet est créée par le cadre de travail j2ee,
    , et utilisée dans un environnement multitâche, ce paradigme est très fortement découragé
    et très certainement problématique. Considérer l'emploi seul de variables propres à la méthode.
    </p>
    ]]>
      </Details>
    </BugPattern>

    <BugPattern type="PS_PUBLIC_SEMAPHORES">
     <ShortDescription>La classe expose sa synchronisation et ses sémaphores dans son interface publique.</ShortDescription>
     <LongDescription>La classe {0} expose sa synchronisation et ses sémaphores dans son interface publique.</LongDescription>
     <Details>
   <![CDATA[
    <p>
    Cette classe utilise la synchronisation avec with wait(), notify() or notifyAll() sur elle-même
    (la référence this). Les classes qui utilise cette classes peuvent de plus utiliser une instance de cette
    classe comme un objet de synchronisation. Du fait que deux classes peuvent utiliser le même objet pour
    la synchronisation, la cohérence en environnement multitâche devient suspecte.
    Vous ne devriez synchroniser ni appeler de méthodes de sémaphores sur une référence publique.
    Considérer l'utilisation d'une varible interne privée pour contrôler la synchronisation.
    </p>
    ]]>
      </Details>
    </BugPattern>

  <BugPattern type="ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL">
    <ShortDescription>Valeur entière transtypée en nombre flottant passée à Math.ceil</ShortDescription>
    <LongDescription>Une valeur entière est transtypée en nombre flottant puis passée à Math.ceil dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>
Ce code convertit une valeur entière en nombre flottant à double précision et
passe le résultat à la méthode Math.ceil(), qui arrondit un nombre flottant à sa valeur
entière immédiatement supérieure. Cette opération n'a pas de raison d'être, puisque
le transtypage d'un entier en double donne un nombre sans valeur après la virgule.
Il est vraissemblable que l'opération qui a créé la valeur pour la passer à Math.ceil
visait l'utilisation de l'arithmétique sur un nombre flottant en double précision.
</p>

]]>
    </Details>
  </BugPattern>

  <BugPattern type="ICAST_IDIV_CAST_TO_DOUBLE">
    <ShortDescription>Résultat d'une division entière transtypé en nombre flottant</ShortDescription>
    <LongDescription>Résultat d'une division entière transtypé en nombre flottant à double précision dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>
Ce ccode transtype le résultat d'une division entière en un nombre flottant à double précision.
Effectuer une division sur des nombres entiers n'est pas précis.
Le fait que le résultat soit transtypé en double suggère que cette précision était
voulue dès le départ. Peut être l'un ou l'autre des opérandes, ou les deux opérandes,
auraient du être transtypé <em>avant</em> d'effectuer la division.
Voici un exemple:
</p>
<blockquote>
<pre>
int x = 2;
int y = 5;
// Wrong: yields result 0.0
double value1 =  x / y;

// Right: yields result 0.4
double value2 =  x / (double) y;
</pre>
</blockquote>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="BC_BAD_CAST_TO_ABSTRACT_COLLECTION">
    <ShortDescription>Transtypage douteux d'un type Collection vers une classe abstraite</ShortDescription>
    <LongDescription>Transtypage douteux d'un type Collection vers une classe abstraite {4} dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>
Ce code transtype un object de type Collection vers un type de collection abstrait
(tel que Collection). Assurez vous que l'objet est bien du type précisé.
Si vous désirez par exemple faire une itération sur une collection, le transtypage
vers Set ou List est inutile.
</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="BC_IMPOSSIBLE_CAST">
    <ShortDescription>Transtypage impossible</ShortDescription>
    <LongDescription>Transtypage impossible de {3} vers {4} dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>
Ce trantypage lancera toujours une exception ClassCastException.
</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="BC_UNCONFIRMED_CAST">
    <ShortDescription>Transtypage non vérifié/non confirmé</ShortDescription>
    <LongDescription>Transtypage non vérifié/non confirmé de {3} vers {4} dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>
La faisablité du transtypage n'est pas vérifiée, et tous les objets candidats au transtypage
ne sont pas légitimes. Assurez vous que la logique du programme est correcte et que
le transtypage n'échouera pas.
</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="BC_BAD_CAST_TO_CONCRETE_COLLECTION">
    <ShortDescription>Transtypage douteux vers une collection concrète</ShortDescription>
    <LongDescription>Transtypage douteux de {3} vers une collection concrète {4} dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>
Ce code transtype une collection abtraite (telles que Collection, List, ou Set)
vers une implémentation concrète spécifique (telles que ArrayList ou HashSet).
Ceci n'est pas forcément correct, et peut rendre votre code plus fragile,
puisqu'il un éventuel refactoring futur avec une autre implémentation
concrète plus difficile. A défaut d'une raison valable, l'utilisation
des classes abstraites est recommandée.
</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION">
    <ShortDescription>Syntaxe d'expression régulière invalide</ShortDescription>
    <LongDescription>Syntaxe d'expression régulière invalide {1}</LongDescription>
    <Details>
<![CDATA[
<p>
Le code utilise une expression régulière qui est invalide selon la syntaxe
des expressions régulières. Lors de l'exécution, une exception PatternSyntaxException sera lancée.
</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="DLS_OVERWRITTEN_INCREMENT">
    <ShortDescription>Incrémentation annulée</ShortDescription>
    <LongDescription>Incrémentation annulée {1}</LongDescription>
    <Details>
<![CDATA[
<p>
Ce code incrémente une valeur (ex., <code>i++</code>) et en annule
immédiatement l'effet. Par exemple, <code>i = i++</code> réécrit de façon
immédiate la valeur incrémentée avec la valeur originale.
</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT">
    <ShortDescription>Décalage à droite non signé et transtypage short/byte</ShortDescription>
    <LongDescription>Décalage à droite non signé et transtypage vers un short/byte dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>
Le code effectue un décalage à droite non signé, dont le résultat
est transtypé vers un short ou un byte, ce qui élimine les bits supérieurs
du résultat. Puisque les bits supérieurs sont éliminés, il peut ne pas y avoir
de différence entre un décalage à droite signé ou non signé (ceci dépend
de la taille du décalage)</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="ICAST_BAD_SHIFT_AMOUNT">
    <ShortDescription>Décalage d'un int hors de proportion (0..31)</ShortDescription>
    <LongDescription>Décalage d'un int hors de proportion ({2}) dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>
Un décalage de n bits est effectué avec n hors des limites (0..31).
Ceci résulte en l'utilisation des 5 bits inférieurs de l'entier pour décider
de la valeur du décalage. Ce n'est sans doute pas l'effet recherché et est
pour le moins source de confusion.
</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="IM_MULTIPLYING_RESULT_OF_IREM">
    <ShortDescription>Multiplication d'un entier avec le résulat entier d'un modulo</ShortDescription>
    <LongDescription>Multiplication d'un entier avec le résulat entier d'un modulo dans {1}</LongDescription>
    <Details>
<![CDATA[
<p>
Ce code mutilplie le résultat d'un modulo avec une constante entière.
Faîtes attention à la précédence des opérateurs. Par exemple,
i % 60 * 1000 correspond à (i % 60) * 1000, non à i % (60 * 1000).
</p>
]]>
    </Details>
  </BugPattern>
  <BugPattern type="PZ_BAD_MONTH">
    <ShortDescription>Passe une valeur de constante de mois hors de proportion (0..11)</ShortDescription>
    <LongDescription>{1} passe une valeur de constante de mois incorrecte ({2}) à {3}</LongDescription>
    <Details>
<![CDATA[
<p>
La valeur de la constante de mois excède les limites attendues (entre 0 et 11).
</p>
]]>
    </Details>
  </BugPattern>


   <!--
  **********************************************************************
   BugCodes
  **********************************************************************
   -->

  <BugCode abbrev="IL" >Boucle infinie</BugCode>
  <BugCode abbrev="VO">Utilisation de volatile</BugCode>
  <BugCode abbrev="UI">Héritage non sûr</BugCode>
  <BugCode abbrev="FL">Utilisation de simple précision</BugCode>
  <BugCode abbrev="TEST">Test de détecteur incomplet ou prototype</BugCode>
  <BugCode abbrev="IMSE">Interception inutile de IllegalMonitorStateException</BugCode>
  <BugCode abbrev="CN">Mauvaise implémentation de l'idiome Cloneable</BugCode>
  <BugCode abbrev="FI">Utilisations erronées des finaliseurs</BugCode>
  <BugCode abbrev="ES">Vérification de l'égalité de String au moyen de == ou !=</BugCode>
  <BugCode abbrev="ML">Synchronisation sur un champ mis à jour (Verrou modifiable)</BugCode>
  <BugCode abbrev="UG">Méthode get non synchronisée, méthode set synchronisée</BugCode>
  <BugCode abbrev="IC">Initialisation circulaire</BugCode>
  <BugCode abbrev="SI">Initialisation statique suspecte</BugCode>
  <BugCode abbrev="IS">Synchronisation incohérente</BugCode>
  <BugCode abbrev="IS2">Synchronisation incohérente</BugCode>
  <BugCode abbrev="Eq">Méthodes equals() covariantes</BugCode>
  <BugCode abbrev="Co">Méthodes compareTo() covariantes</BugCode>
  <BugCode abbrev="HE">Les objets égaux doivent avoir des codes de hachage égaux</BugCode>
  <BugCode abbrev="AM">Mauvaise utilisation de l'API</BugCode>
  <BugCode abbrev="Dm">Utilisation d'une méthode inutile</BugCode>
  <BugCode abbrev="UR">Lecture dans champ non initialisé dans un constructeur</BugCode>
  <BugCode abbrev="RR">Méthode ignorant la valeur de retour de InputStream.read()</BugCode>
  <BugCode abbrev="NN">Méthode contenant un appel isolé à notify()</BugCode>
  <BugCode abbrev="UW">wait() inconditionnel dans une méthode</BugCode>
  <BugCode abbrev="SP">Méthode bouclant sur un champ</BugCode>
  <BugCode abbrev="DC">Possible double vérification d'un champ</BugCode>
  <BugCode abbrev="Wa">Méthode contenant un wait() sans boucle</BugCode>
  <BugCode abbrev="No">Utilisation de notify() au lieu de notifyAll() dans une méthode</BugCode>
  <BugCode abbrev="DE">Exception ignorée</BugCode>
  <BugCode abbrev="Ru">Méthode invoquant run()</BugCode>
  <BugCode abbrev="It">Définition incorrecte d'un itérateur</BugCode>
  <BugCode abbrev="SnVI">Classe Serializable sans versionID</BugCode>
  <BugCode abbrev="Se">Définition incorrecte d'une classe Serializable</BugCode>
  <BugCode abbrev="WS">Seule la méthode writeObject() de la classe est synchronisée</BugCode>
  <BugCode abbrev="RS">La méthode readObject() de la classe est synchronisée</BugCode>
  <BugCode abbrev="SC">Constructeur invoquant Thread.start()</BugCode>
  <BugCode abbrev="MS">Champ statique modifiable</BugCode>
  <BugCode abbrev="EI">Méthode renvoyant un tableau, ce qui peut exposer sa représentation interne</BugCode>
  <BugCode abbrev="Nm">Noms ambigus</BugCode>
  <BugCode abbrev="SS">Champ non lu qui devrait être statique ?</BugCode>
  <BugCode abbrev="UuF">Champ inutilisé</BugCode>
  <BugCode abbrev="UrF">Champ inutilisé</BugCode>
  <BugCode abbrev="UwF">Champ jamais alimenté</BugCode>
  <BugCode abbrev="SIC">Classe interne pouvant être rendue statique</BugCode>
  <BugCode abbrev="TLW">wait() avec deux verrous en attente</BugCode>
  <BugCode abbrev="RV">Valeur de retour d'une méthode ignorée</BugCode>
  <BugCode abbrev="NP">Déréférencement d'un pointeur à null</BugCode>
  <BugCode abbrev="OS">Flux pas toujours fermé dans les différents chemins d'éxécution</BugCode>
  <BugCode abbrev="PZLA">Renvoyer un tableau de longueur nulle plutôt que la valeur "null"</BugCode>
  <BugCode abbrev="UCF">Contrôle de flux d'éxécution inutile</BugCode>
  <BugCode abbrev="RCN">Comparaison à null redondante</BugCode>
  <BugCode abbrev="UL">Verrou pas toujours relaché dans les différents chemins d'éxécution</BugCode>
  <BugCode abbrev="RC">Comparaison par référence suspecte</BugCode>
  <BugCode abbrev="EC">Comparaison par equals() suspecte</BugCode>
  <BugCode abbrev="MWN">wait() ou notify() non appareillé</BugCode>
  <BugCode abbrev="SA">Auto-assignation inutile</BugCode>
  <BugCode abbrev="BIT">Expression logique binaire suspecte</BugCode>
  <BugCode abbrev="LI">Initialisation paresseuse non synchronisée</BugCode>
  <BugCode abbrev="JLM">Synchronisation sur un verrou JSR166</BugCode>
  <BugCode abbrev="UPM">Méthode privée jamais invoquée</BugCode>
  <BugCode abbrev="EI2">Stockage d'une référence vers un objet modifiable</BugCode>
  <BugCode abbrev="NS">Utilisation suspecte d'un opérateur binaire</BugCode>
  <BugCode abbrev="ODR">Ressource de base données pas toujours fermée dans tous les chemins d'éxécution</BugCode>
  <BugCode abbrev="SBSC">Concaténation de chaînes au moyen de + dans une boucle</BugCode>
  <BugCode abbrev="ITA">Utilisation inefficace de collection.toArray(new Foo[0])</BugCode>
  <BugCode abbrev="SW">Règles de codage de Swing</BugCode>
  <BugCode abbrev="IJU">Jeu d'essai JUnit incorrectement implémenté</BugCode>
  <BugCode abbrev="BOA">Erreur dans la surcharge d'un Adapter</BugCode>
  <BugCode abbrev="SF">"switch" dont un cas déborde</BugCode>
  <BugCode abbrev="BRSA">Mauvais accès à un ResultSet</BugCode>
  <BugCode abbrev="SIO">Opérateur instanceof superflu</BugCode>
  <BugCode abbrev="BAC">Constructeur d'Applet erroné</BugCode>
  <BugCode abbrev="UOE">Utiliser Object.equals()</BugCode>
  <BugCode abbrev="STI">Interruption de thread douteuse</BugCode>
  <BugCode abbrev="DLS">Alimentation à perte</BugCode>
  <BugCode abbrev="IP">Paramètre ignoré</BugCode>
  <BugCode abbrev="MF">Champ masqué</BugCode>
  <BugCode abbrev="WMI">Itérateur Map erroné</BugCode>
  <BugCode abbrev="ISC">Classe statique instanciée</BugCode>
  <BugCode abbrev="REC">Capture de RuntimeException</BugCode>
  <BugCode abbrev="FE">Test d'égalité en virgule flottante</BugCode>
  <BugCode abbrev="UM">Constante Math inutile</BugCode>
  <BugCode abbrev="CD">Dépendance circulaire</BugCode>
  <BugCode abbrev="RI">Interfaces redondantes</BugCode>
  <BugCode abbrev="MTIA">Accès à une instance depuis plusieurs tâches</BugCode>
  <BugCode abbrev="PS">Sémaphores publiques</BugCode>
  <BugCode abbrev="ICAST">Transtypage de valeurs entières</BugCode>
  <BugCode abbrev="RE">Expressions régulières</BugCode>
  <BugCode abbrev="SQL">Injection SQL</BugCode>
  <BugCode abbrev="ESync">Blocs synchronisés vides</BugCode>
  <BugCode abbrev="QF">Boucles for douteuses</BugCode>
  <BugCode abbrev="BC">Mauvais transtypage de références</BugCode>
  <BugCode abbrev="IM">Opération douteuse sur des entiers</BugCode>
  <BugCode abbrev="ST">Mauvaise utilisation de champs statiques</BugCode>
  <BugCode abbrev="PZ">Détection de bogue inspirée par "Programming Puzzlers" de Josh Bloch et Neal Gafter</BugCode>


</MessageCollection>
