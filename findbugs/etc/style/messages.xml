<!--
	Default message file for FindBugs style plugin.
-->

<MessageCollection>

	<!-- Detectors -->

	<Detector class="edu.umd.cs.findbugs.style.FindDeadLocalStores">
		<Details>
<![CDATA[
<p>
This detector looks for assignments to local variables that
are never subsequently read.  Due to the way byte code is generated for final local variables,
false positives for these cases are often seen, which is why the detector is currently disabled.
 It is a moderately fast detector.
</p>
]]>
		</Details>
	</Detector>

	<Detector class="edu.umd.cs.findbugs.style.FindMaskedFields">
		<Details>
<![CDATA[
<p> This detector looks for class level fields that are masked by
local fields defined in methods.
It is a fast detector.</p>
]]>
		</Details>
	</Detector>

	<!-- BugPatterns -->

	<BugPattern type="DLS_DEAD_LOCAL_STORE">
		<ShortDescription>Dead store to local variable</ShortDescription>
		<LongDescription>Dead store to local variable in method {1}</LongDescription>
		<Details>
<![CDATA[
<p>
This instruction assigns a value to a local variable,
but the value is not read by any subsequent instruction.
Often, this indicates an error, because the value computed 
is never used.
</p>
]]>
		</Details>
	</BugPattern>

	<BugPattern type="MF_METHOD_MASKS_FIELD">
		<ShortDescription>Method defines a variable that obscures a field</ShortDescription>
		<LongDescription>Method {1} defines a variable that obscures field {2}</LongDescription>
		<Details>
<![CDATA[
<p> This method defines a local variable with the same name as a field
in this class or a superclass.  This may cause the method to
read an uninitialized value from the field, leave the field uninitialized,
or both.</p>
]]>
		</Details>
	</BugPattern>

	<BugPattern type="MF_CLASS_MASKS_FIELD">
		<ShortDescription>Class defines field that obscures a superclass field</ShortDescription>
		<LongDescription>Class {0} defines field that obscures superclass field {1}</LongDescription>
		<Details>
<![CDATA[
<p> This class defines a field with the same name as a visible
instance field in a superclass.  This is confusing, and
may indicate an error if methods update or access one of
the fields when they wanted the other.</p>
]]>
		</Details>
	</BugPattern>

	<!-- BugCodes -->

	<BugCode abbrev="DLS">Dead local store</BugCode>
	<BugCode abbrev="MF">Masked Field</BugCode>

</MessageCollection>

<!-- vim:set ts=4: -->
