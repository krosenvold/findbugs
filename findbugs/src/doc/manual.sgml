<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V4.2//EN">
 
<book lang="en" id="findbugs-manual">
 
<bookinfo>
<title>Using FindBugs</title>

<author>
  <firstname>David</firstname>
  <surname>Hovemeyer</surname>
</author>

<edition>@VERSION@</edition>

<pubdate>@RELEASE_DATE@</pubdate>

</bookinfo>
 
<chapter id="introduction">
<title>Introduction</title>

<para> FindBugs is a program to find bugs in Java programs.  It looks for instances
of "bug patterns" --- code instances that are likely to be errors.</para>

<para> This document describes version @VERSION@ of FindBugs. This is an
early release of the tool, so you may find problems with it. We
are very interested in getting your feedback on FindBugs. Please visit
the <ulink url="http://www.cs.umd.edu/~pugh/java/bugs/">FindBugs web page</ulink> for
the latest information on FindBugs, contact information, and support resources such
as information about the FindBugs mailing lists.</para>

<sect1>
<title>Requirements</title>
<para> To use FindBugs, you need a runtime environment compatible with
<ulink url="http://java.sun.com/j2se">Java 2 Standard Edition</ulink>, version 1.4.0 or later.
FindBugs is platform independent, and is known to run on GNU/Linux, Windows, and
MacOS X platforms.</para>

<para>You should have at least 256 MB of memory to use FindBugs.</para>
</sect1>
 
</chapter>

<chapter id="installing">
<title>Installing FindBugs</title>

<para>
The easiest way to install FindBugs is to download a binary distribution.
Binary distributions are available in
<ulink url="http://www.cs.umd.edu/~pugh/java/bugs/release/findbugs-@VERSION@.tar.gz">gzipped tar format</ulink> and
<ulink url="http://www.cs.umd.edu/~pugh/java/bugs/release/findbugs-@VERSION@.zip">zip format</ulink>.
Once you have downloaded a binary distribution, extract it into a directory of your choice.
</para>

<para>
Extracting a gzipped tar format distribution:
<screen>
<prompt>$ </prompt><command>gunzip -c findbugs-@VERSION@.tar.gz | tar xvf -</command>
</screen>
</para>

<para>
Extracting a zip format distribution:
<screen>
<prompt>C:\Software> </prompt><command>unzip findbugs-@VERSION@.zip</command>
</screen>
</para>

<para>
Usually, extracting a binary distribution will create a directory ending in
<filename class=directory>findbugs-@VERSION@</filename>. For example, if you extracted
the binary distribution from the <filename class=directory>C:\Software</filename>
directory, then the FindBugs software will be extracted into the directory
<filename class=directory>C:\Software\findbugs-@VERSION@</filename>.
This directory is the FindBugs home directory.  We'll refer to it as
<replaceable>$FINDBUGS_HOME</replaceable> throughout this manual.
</para>

<para>
Once you have extracted the binary distribution into <replaceable>$FINDBUGS_HOME</replaceable>,
you need to add its <filename class=directory>bin</filename> subdirectory to your
executable search path.  In addition, on Windows platforms, you need to set an
environment variable specifying the location of <replaceable>$FINDBUGS_HOME</replaceable>.
</para>

<para>
Here are the required commands on Unix-like systems using the sh or bash shells:
<screen>
<prompt>$ </prompt><command>PATH=<replaceable>$FINDBUGS_HOME</replaceable>/bin:$PATH</command>
<prompt>$ </prompt><command>export PATH</command>
</screen>
</para>

<para>
Here is the required command on Unix-like systems using the csh or tcsh shells:
<screen>
<prompt>% </prompt><command>setenv PATH <replaceable>$FINDBUGS_HOME</replaceable>/bin:$PATH</command>
</screen>
</para>

<para>
Here are the required commands on Windows systems:
<screen>
<prompt>C:\My Directory> </prompt><command>set FINDBUGS_HOME=<replaceable>$FINDBUGS_HOME</replaceable></command>
<prompt>C:\My Directory> </prompt><command>set PATH=%FINDBUGS_HOME%\bin;%PATH%</command>
</screen>
</para>

</chapter>

<chapter id="building">
<title>Building FindBugs from Source</title>

<para>
This chapter describes how to build FindBugs from source code.  Unless you are
interesting in modifying FindBugs, you will probably want to skip to the
<link linkend="gui">next chapter</link>.
</para>

</chapter>


<chapter id="gui">
<title>Using the Findbugs Graphical User Interface</title>

<para>
FindBugs has two user interfaces: a graphical user interface (GUI) and a
command line user interface.  This chapter describes the graphical user interface.
</para>

<sect1>
<title>Executing the FindBugs GUI</title>

<para>
To start FindBugs using the GUI, simply run the <command>findbugs</command>
command.  (This assumes you have set up your executable path as described in the
<link linkend="installing">installation section</link>.
</para>

<para>
The <command>findbugs</command> can take several options:
<variablelist>
  <varlistentry>
    <term><command>-textui</command></term>
    <listitem>
       <para>
         Use the command line interface instead of the GUI.
         The command line interface is described in the <link linkend="textui">next chapter</link>.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><command>-jvmArgs=<replaceable>args</replaceable></command></term>
    <listitem>
       <para>
         Specifies arguments to pass to the JVM.  For example,
         you can use this option to increase the maximum Java heap size
         if you are analyzing a very large program.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><command>-plastic</command></term>
    <listitem>
       <para>
          Use the plastic look and feel from <ulink url="http://jgoodies.com/">jgoodies.com</ulink>.
          To use this option, put the file <filename>plastic.jar</filename>
          in the <filename class=directory><replaceable>$FINDBUGS_HOME</replaceable>/lib</filename>
          directory.
       </para>
    </listitem>
  </varlistentry>

</variablelist>
</para>
</sect1>

<sect1>
<title>Creating a Project</title>
<para>
After you have started FindBugs using the <command>findbugs</command> command,
choose the <menuchoice><guimenu>File</guimenu><guimenuitem>New Project</guimenuitem></menuchoice>
menu item.  You will see a dialog which looks like this:
<mediaobject>
<imageobject>
<imagedata fileref="project-dialog.png">
</imageobject>
</mediaobject>
</para>

<para>
Use the "Browse" button next to the "Jar file" text field to select a Jar
file containing java classes to analyze for bugs.  You may add multiple
Jar files.
</para>

<para>
You can also add the source directories which contain
the source code for the Jar files you are analyzing.  This will enable
FindBugs to highlight the source code which contains a possible error.
The source directories you add should be the roots of the Java
package hierarchy.  For example, if your application is contained in the
<varname>org.foobar.myapp</varname> package, you should add the
parent directory of the <filename class=directory>org</filename> directory
to the source directory list for the project.
</para>

<para>
Another optional step is to add additional Jar files or directories as
classpath entries.  You should do this if the Jar files you are analyzing
have references to other classes which are not included in the analyzed
jar files and are not in the standard runtime classpath.  Some of the bug
pattern detectors in FindBugs make use of class hierarchy information,
so you will get more accurate results if the entire class hierarchy is
available which FindBugs performs its analysis.
</para>

</sect1>

<sect1>
<title>Running the Analysis</title>
<para>
Once you have added all of the Jar files and source directories,
click the "Find Bugs!" button to analyze the classes contained in the
Jar files.  Note that for a very large program on an older computer,
this may take quite a while (tens of minutes).  A recent computer with
ample memory will typically be able to analyze a large program in only a
few minutes.
</para>
</sect1>

<sect1>
<title>Browsing Results</title>

<para>
When the analysis completes, you will see a screen like the following:
<mediaobject>
  <imageobject>
    <imagedata fileref="example-details.png">
  </imageobject>
</mediaobject>
</para>

<para>
The top pane of the window shows the bug tree; this is a hierarchical
representation of all of the potential bugs detected in the analyzed
Jar files.  The tabs allow you to browse by class, package, or bug type.
</para>

<para>
When you select a particular bug instance in the top pane, you will
see a description of the bug in the "Details" tab of the bottom pane.
In addition, the "Source code" tab of the bottom pane will, for some
kinds of bugs, show the program source code where the potential bug occurs.
In the above example, the bug is an access to an uninitialized field in
a constructor.  The source code window highlights the line containing
the problematic access.
</para>

<para>
You may use the <menuchoice><guimenu>File</guimenu><guimenuitem>Save project</guimenuitem></menuchoice>
menu option to save the current lists
of Jar files and source directories.  A saved project may be loaded with
the <menuchoice><guimenu>File</guimenu><guimenuitem>Open project</guimenuitem></menuchoice> menu option.
Note that the analysis results are
not saved, so you will have to run the analysis again.  (Saving results
may be added to a future FindBugs release).
</para>

</sect1>


</chapter>

<chapter id="textui">
<title>Using the FindBugs Command Line Interface</title>

<para>Yep.</para>

</chapter>



</book>
