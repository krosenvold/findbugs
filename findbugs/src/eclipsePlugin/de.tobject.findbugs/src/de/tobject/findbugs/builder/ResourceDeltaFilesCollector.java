/*  * FindBugs Eclipse Plug-in. * Copyright (C) 2003 - 2004, Peter Friese *   * This library is free software; you can redistribute it and/or * modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation; either * version 2.1 of the License, or (at your option) any later version. *  * This library is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU * Lesser General Public License for more details. *  * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA */ package de.tobject.findbugs.builder;import java.util.ArrayList;import java.util.Collection;import java.util.Iterator;import org.eclipse.core.resources.IResource;import org.eclipse.core.resources.IResourceDelta;/** * This file collector collects all files in a  * {@link org.eclipse.core.resources.IResourceDelta}. *  * @author Peter Friese * @version 1.0 * @since 25.09.2003 */public class ResourceDeltaFilesCollector extends AbstractFilesCollector {	private IResourceDelta resourceDelta;	/**	 * Creates a new resource delta file collector.	 *  	 * @param resourceDelta The resource delta to scan for files.	 */	public ResourceDeltaFilesCollector(IResourceDelta resourceDelta) {		this.resourceDelta = resourceDelta;	}	/* (non-Javadoc)	 * @see de.tobject.findbugs.builder.AbstractFilesCollector#getFiles()	 */	public Collection getFiles() {		return collectFiles(this.resourceDelta);	}	/**	 * Returns a list of all files in a resource delta. This is of help when 	 * performing an incremental build.	 * 	 * @see #getFiles()	 * @see #getFiles(IContainer)	 * @return Collection A list of all files to be built.	 */	private Collection collectFiles(IResourceDelta delta) {		ArrayList files = new ArrayList(0);		ArrayList folders = new ArrayList(0);		IResourceDelta affectedChildren[] = delta.getAffectedChildren();		for (int i = 0; i < affectedChildren.length; i++) {			IResourceDelta childDelta = affectedChildren[i];			IResource child = childDelta.getResource();			int childType = child.getType();			if (childType == IResource.FILE) {				if (DEBUG) {					System.out.println(						"Delta file: " + child.getFullPath().toOSString());				}				int deltaKind = childDelta.getKind();				if ((deltaKind == IResourceDelta.ADDED					|| deltaKind == IResourceDelta.CHANGED)) {					if (isJavaArtifact(child)) {						files.add(child);					}				}			}			else {				if (childType == IResource.FOLDER) {					folders.add(childDelta);				}			}		}				for (Iterator iter = folders.iterator();			iter.hasNext();			files.addAll(collectFiles((IResourceDelta) iter.next())));		return files;	}	}