/*
 * FindBugs - Find bugs in Java programs
 * Copyright (C) 2003,2004 University of Maryland
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*
 * ConfigureDetectorsDialog.java
 *
 * Created on June 3, 2003, 3:52 PM
 */

package edu.umd.cs.findbugs.gui;

import java.util.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;
import edu.umd.cs.findbugs.*;

/**
 * Configure Detectors by enabling/disabling them.
 * @author David Hovemeyer
 */
public class ConfigureDetectorsDialog extends javax.swing.JDialog {
    
    private static final int SPEED_COLUMN = 1;
    private static final int ENABLED_COLUMN = 2;
    
    /** Creates new form ConfigureDetectorsDialog */
    public ConfigureDetectorsDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
	postInitComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        detectorTableScrollPane = new javax.swing.JScrollPane();
        detectorTable = new javax.swing.JTable();
        detectorDescriptionScrollPane = new javax.swing.JScrollPane();
        detectorDescription = new javax.swing.JEditorPane();
        jSeparator1 = new javax.swing.JSeparator();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        spacer = new javax.swing.JLabel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("Configure Detectors");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        detectorTableScrollPane.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        detectorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Bug Detector", "Speed", "Enabled"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        populateTable();
        detectorTable.getColumnModel().getColumn(ENABLED_COLUMN).setMaxWidth(60);
        detectorTable.getColumnModel().getColumn(SPEED_COLUMN).setMaxWidth(60);
        detectorTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        detectorTableScrollPane.setViewportView(detectorTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.8;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 2, 6);
        getContentPane().add(detectorTableScrollPane, gridBagConstraints);

        detectorDescriptionScrollPane.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        detectorDescriptionScrollPane.setPreferredSize(new java.awt.Dimension(110, 120));
        detectorDescriptionScrollPane.setViewportView(detectorDescription);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(2, 6, 2, 6);
        getContentPane().add(detectorDescriptionScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        getContentPane().add(jSeparator1, gridBagConstraints);

        okButton.setMnemonic('O');
        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 2);
        getContentPane().add(okButton, gridBagConstraints);

        cancelButton.setMnemonic('C');
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 4, 6);
        getContentPane().add(cancelButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(spacer, gridBagConstraints);

        pack();
    }//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
	closeDialog();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
	// Update new enabled/disabled status for the Detectors
	int num = factoryList.size();
	for (int i = 0; i < num; ++i) {
	    DetectorFactory factory = factoryList.get(i);
	    Boolean enabled = (Boolean) detectorTable.getValueAt(i, ENABLED_COLUMN);
	    factory.setEnabled(enabled.booleanValue());
	}
	closeDialog();
    }//GEN-LAST:event_okButtonActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void postInitComponents() {
	// Listen to detector table selections so we can (hopefully)
	// display the description of the detector
	
	ListSelectionModel rowSM = detectorTable.getSelectionModel();
	rowSM.addListSelectionListener(new ListSelectionListener() {
	    public void valueChanged(ListSelectionEvent e) {
		if (e.getValueIsAdjusting()) return;
        
		ListSelectionModel lsm =(ListSelectionModel)e.getSource();
		if (!lsm.isSelectionEmpty()) {
		    int selectedRow = lsm.getMinSelectionIndex();
		    viewDetectorDetails(factoryList.get(selectedRow));
		}
	    }
	});
    }
    
    private void viewDetectorDetails(DetectorFactory factory) {
	String detailHTML = factory.getDetailHTML();
	if (detailHTML == null) {
	    detectorDescription.setText("");
	} else {
	    detectorDescription.setContentType("text/html");
	    detectorDescription.setText(detailHTML);
	}
    }
    
    private void populateTable() {
        Iterator<DetectorFactory> i = DetectorFactoryCollection.instance().factoryIterator();
        while (i.hasNext()) {
            DetectorFactory factory = i.next();
            DefaultTableModel model = (DefaultTableModel) detectorTable.getModel();
            model.addRow(new Object[]{factory.getFullName(), factory.getSpeed(), Boolean.valueOf(factory.isEnabled())});
	    factoryList.add(factory);
        }
    }
    
    private void closeDialog() {
	setVisible(false);
	dispose();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new ConfigureDetectorsDialog(new javax.swing.JFrame(), true).show();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JEditorPane detectorDescription;
    private javax.swing.JScrollPane detectorDescriptionScrollPane;
    private javax.swing.JTable detectorTable;
    private javax.swing.JScrollPane detectorTableScrollPane;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel spacer;
    // End of variables declaration//GEN-END:variables
    
    // My variables
    private ArrayList<DetectorFactory> factoryList = new ArrayList<DetectorFactory>();
}
